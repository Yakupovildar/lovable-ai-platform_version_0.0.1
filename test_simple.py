#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
"""

import sys
import os
sys.path.append('backend')

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —á–∞—Å—Ç–∏
from dataclasses import dataclass
from enum import Enum
from typing import List, Dict, Optional, Any

# –ö–æ–ø–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ enum'—ã
class ProjectType(Enum):
    MEDIA_PLAYER = "media_player"
    THREE_D_GAME = "3d_game"
    THREE_D_VIEWER = "3d_viewer" 
    DATABASE_APP = "database_app"
    CHAT_APP = "chat"
    MOBILE_APP = "mobile_app"
    AI_APP = "ai_app"

class RequestType(Enum):
    CREATE_NEW_PROJECT = "create"
    MODIFY_EXISTING = "modify"
    GENERAL_CHAT = "chat"

def test_message_analysis():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    
    message = """
    –°–æ–∑–¥–∞–π –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ "–ò–ò –ù–∞—Å—Ç–∞–≤–Ω–∏–∫ –ú–∏–ª–ª–∏–∞—Ä–¥–µ—Ä–æ–≤" –¥–ª—è iPhone. 
    
    –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
    - 3D –≥–æ–ª–æ–≤–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ (–ò–ª–æ–Ω –ú–∞—Å–∫, –ë–∏–ª–ª –ì–µ–π—Ç—Å, –î–∂–µ—Ñ –ë–µ–∑–æ—Å, –£–æ—Ä—Ä–µ–Ω –ë–∞—Ñ—Ñ–µ—Ç)
    - –†–µ–∞–ª—å–Ω—ã–π –≥–æ–ª–æ—Å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ 
    - –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–Ω—Ç–µ—Ä–≤—å—é –º–∏–ª–ª–∏–∞—Ä–¥–µ—Ä–æ–≤
    - –ò–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    - –í—ã–±–æ—Ä –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
    - –í–≤–æ–¥ –≤–æ–ø—Ä–æ—Å–æ–≤ –≥–æ–ª–æ—Å–æ–º –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º
    - –ü–æ–¥—Ä–æ–±–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    - –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–º–æ—Ü–∏–∏ 3D –º–æ–¥–µ–ª–∏ –ø—Ä–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ
    - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
    - –û—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
    """
    
    print("üß™ –¢–ï–°–¢ –ê–ù–ê–õ–ò–ó–ê –°–õ–û–ñ–ù–û–ì–û –ó–ê–ü–†–û–°–ê")
    print("=" * 50)
    
    message_lower = message.lower()
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞
    detected_types = []
    
    if any(word in message_lower for word in ['3d', '3–¥', '—Ç—Ä–µ—Ö–º–µ—Ä–Ω—ã–π', '–≥–æ–ª–æ–≤–∞']):
        detected_types.append("3D —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏")
        
    if any(word in message_lower for word in ['–º–æ–±–∏–ª—å–Ω–æ–µ', 'iphone', '–∞–π—Ñ–æ–Ω']):
        detected_types.append("–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
        
    if any(word in message_lower for word in ['–≥–æ–ª–æ—Å', '—Ä–µ—á—å', '–∞—É–¥–∏–æ']):
        detected_types.append("–ê—É–¥–∏–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏")
        
    if any(word in message_lower for word in ['–±–∞–∑–∞', '–¥–∞–Ω–Ω—ã–µ', '—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ', '–∏—Å—Ç–æ—Ä–∏—è']):
        detected_types.append("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
        
    if any(word in message_lower for word in ['–∏–∏', 'ai', '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç']):
        detected_types.append("–ò–ò –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è")
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π
    features = []
    
    if '–≤—ã–±–æ—Ä –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞' in message_lower:
        features.append("–°–∏—Å—Ç–µ–º–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")
    if '–≥–æ–ª–æ—Å–æ–º' in message_lower:
        features.append("–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥")
    if '–∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–º–æ—Ü–∏–∏' in message_lower:
        features.append("3D –∞–Ω–∏–º–∞—Ü–∏–∏ –ª–∏—Ü–∞")
    if '–æ—Ñ—Ñ–ª–∞–π–Ω' in message_lower:
        features.append("–û—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º")
    if '–∏–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å' in message_lower:
        features.append("–ü—Ä–æ—Å—Ç–æ–π UX")
    if '—Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ' in message_lower:
        features.append("–õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è RU")
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    complexity_factors = [
        '–º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
        '3d –º–æ–¥–µ–ª–∏', 
        '—Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏',
        '–±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π',
        '–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è',
        '–≥–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥',
        '–æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º'
    ]
    
    complexity_score = sum(1 for factor in complexity_factors if any(word in message_lower for word in factor.split()))
    
    if complexity_score >= 6:
        complexity = "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è"
    elif complexity_score >= 4:
        complexity = "–í—ã—Å–æ–∫–∞—è"  
    elif complexity_score >= 2:
        complexity = "–°—Ä–µ–¥–Ω—è—è"
    else:
        complexity = "–ù–∏–∑–∫–∞—è"
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"üì± –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: {', '.join(detected_types)}")
    print(f"‚öôÔ∏è –§—É–Ω–∫—Ü–∏–∏: {', '.join(features)}")
    print(f"üìà –°–ª–æ–∂–Ω–æ—Å—Ç—å: {complexity} ({complexity_score}/7 —Ñ–∞–∫—Ç–æ—Ä–æ–≤)")
    print(f"üéØ –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    print(f"\n‚úÖ –ü–†–û–í–ï–†–ö–ê –ü–û–ö–†–´–¢–ò–Ø –¢–†–ï–ë–û–í–ê–ù–ò–ô:")
    
    requirements_check = {
        "3D —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": "3d" in message_lower,
        "–ú–æ–±–∏–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞": "–º–æ–±–∏–ª—å–Ω–æ–µ" in message_lower or "iphone" in message_lower,
        "–ê—É–¥–∏–æ/–ì–æ–ª–æ—Å": "–≥–æ–ª–æ—Å" in message_lower,
        "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö": "–±–∞–∑–∞" in message_lower or "—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ" in message_lower,
        "–ò–ò –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è": "–∏–∏" in message_lower or "–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫" in message_lower,
        "–õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è": "—Ä—É—Å—Å–∫–æ–º" in message_lower
    }
    
    for req, detected in requirements_check.items():
        status = "‚úÖ" if detected else "‚ùå"
        print(f"   {status} {req}")
    
    coverage = sum(requirements_check.values()) / len(requirements_check) * 100
    print(f"\nüìä –ü–æ–∫—Ä—ã—Ç–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π: {coverage:.1f}%")
    
    # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
    print(f"\nüõ†Ô∏è –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –¢–ï–•–ù–û–õ–û–ì–ò–ò:")
    
    tech_recommendations = [
        "Three.js (3D —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥)",
        "Web Audio API (—Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏)",
        "MediaRecorder API (–≥–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥)",
        "IndexedDB –∏–ª–∏ Supabase (–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö)",
        "PWA —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ (–º–æ–±–∏–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è)",
        "Service Workers (–æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º)",
        "Speech Recognition API",
        "WebGL (3D –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å)"
    ]
    
    for i, tech in enumerate(tech_recommendations, 1):
        print(f"   {i}. {tech}")
    
    # –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
    print(f"\n‚ö†Ô∏è –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–ï –°–õ–û–ñ–ù–û–°–¢–ò:")
    
    challenges = [
        "3D –º–æ–¥–µ–ª–∏ –ª–∏—Ü —Ç—Ä–µ–±—É—é—Ç –±–æ–ª—å—à–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤",
        "–°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω",
        "iOS Safari –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è WebGL",
        "–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ —Ç—Ä–µ–±—É–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", 
        "–û—Ñ—Ñ–ª–∞–π–Ω –ò–ò —Ç—Ä–µ–±—É–µ—Ç –±–æ–ª—å—à–æ–≥–æ –æ–±—ä–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö",
        "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ 3D –º–æ–¥–µ–ª–∏ –º–∏–ª–ª–∏–∞—Ä–¥–µ—Ä–æ–≤ - –∞–≤—Ç–æ—Ä—Å–∫–∏–µ –ø—Ä–∞–≤–∞"
    ]
    
    for i, challenge in enumerate(challenges, 1):
        print(f"   {i}. {challenge}")
    
    print(f"\nüéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
    if coverage >= 80 and complexity_score >= 5:
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –°–ü–û–°–û–ë–ù–ê –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å")
        print("üöÄ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ—ç—Ç–∞–ø–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞")
    elif coverage >= 60:
        print("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –ß–ê–°–¢–ò–ß–ù–û —Å–ø–æ—Å–æ–±–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å")
        print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
    else:
        print("‚ùå –°–∏—Å—Ç–µ–º–∞ –ù–ï –≥–æ—Ç–æ–≤–∞ –∫ —Ç–∞–∫–æ–º—É –∑–∞–ø—Ä–æ—Å—É")
        print("üìö –¢—Ä–µ–±—É–µ—Ç—Å—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
    
    return coverage, complexity_score

if __name__ == "__main__":
    coverage, complexity = test_message_analysis()
    
    print(f"\n" + "=" * 50)
    print(f"üìä –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê:")
    print(f"   –ü–æ–∫—Ä—ã—Ç–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π: {coverage:.1f}%")
    print(f"   –°–ª–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞: {complexity}/7")
    
    if coverage >= 80 and complexity >= 5:
        print(f"   –°—Ç–∞—Ç—É—Å: üéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù")
    else:
        print(f"   –°—Ç–∞—Ç—É—Å: ‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê")