
// JavaScript –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
let currentUser = null;
let currentSession = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    checkAuthentication();
    initializeDashboard();
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
async function checkAuthentication() {
    try {
        const response = await fetch('/api/user/profile');
        if (response.ok) {
            const data = await response.json();
            currentUser = data.user;
            updateUserInterface();
        } else {
            // –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
            window.location.href = '/auth';
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
        window.location.href = '/auth';
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function updateUserInterface() {
    if (!currentUser) return;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    document.getElementById('userName').textContent = currentUser.name;
    document.getElementById('userPlan').textContent = getPlanName(currentUser.plan);
    document.getElementById('requestsCount').textContent = currentUser.requests_left;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç —Å—á–µ—Ç—á–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
    const requestsElement = document.getElementById('requestsCount');
    if (currentUser.requests_left <= 3) {
        requestsElement.style.color = '#ef4444';
    } else if (currentUser.requests_left <= 7) {
        requestsElement.style.color = '#f59e0b';
    } else {
        requestsElement.style.color = '#22c55e';
    }
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const userNameInput = document.querySelector('#settings-tab #userName');
    const userEmailInput = document.querySelector('#settings-tab #userEmail');
    if (userNameInput) userNameInput.value = currentUser.name;
    if (userEmailInput) userEmailInput.value = currentUser.email;
}

function getPlanName(plan) {
    const plans = {
        'free': '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω',
        'personal': '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π',
        'team': '–ö–æ–º–∞–Ω–¥–Ω—ã–π'
    };
    return plans[plan] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–∞–Ω';
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π –¥–∞—à–±–æ—Ä–¥–∞
function initializeDashboard() {
    setupTabs();
    setupChat();
    loadUserProjects();
    loadChatHistory();
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–æ–∫
function setupTabs() {
    const menuItems = document.querySelectorAll('.menu-item');
    const tabContents = document.querySelectorAll('.tab-content');
    
    menuItems.forEach(item => {
        item.addEventListener('click', function() {
            const tabName = this.getAttribute('data-tab');
            showTab(tabName);
        });
    });
}

function showTab(tabName) {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É –≤ –º–µ–Ω—é
    document.querySelectorAll('.menu-item').forEach(item => {
        item.classList.remove('active');
    });
    document.querySelector(`[data-tab="${tabName}"]`).classList.add('active');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é –≤–∫–ª–∞–¥–∫—É
    document.querySelectorAll('.tab-content').forEach(content => {
        content.classList.remove('active');
    });
    document.getElementById(`${tabName}-tab`).classList.add('active');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (tabName === 'projects') {
        loadUserProjects();
    } else if (tabName === 'history') {
        loadChatHistory();
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Ç–∞
function setupChat() {
    const chatInput = document.getElementById('chatInput');
    const sendButton = document.getElementById('sendMessage');
    
    if (chatInput && sendButton) {
        sendButton.addEventListener('click', sendMessage);
        chatInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
async function sendMessage() {
    const chatInput = document.getElementById('chatInput');
    const message = chatInput.value.trim();
    
    if (!message) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
    if (currentUser && currentUser.requests_left <= 0 && currentUser.plan === 'free') {
        showLimitModal();
        return;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    addMessage(message, 'user');
    chatInput.value = '';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
    showTypingIndicator();
    
    try {
        const response = await fetch('/api/chat', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ 
                message: message,
                session_id: currentSession
            })
        });
        
        hideTypingIndicator();
        
        if (response.status === 429) {
            // –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω
            const data = await response.json();
            showLimitModal();
            return;
        }
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
        if (data.requests_left !== undefined) {
            currentUser.requests_left = data.requests_left;
            updateUserInterface();
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç AI —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        addMessage(data.message, 'ai', data);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
        if (data.suggestions && data.suggestions.length > 0) {
            showSuggestions(data.suggestions);
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        hideTypingIndicator();
        addMessage('ü§ñ –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', 'ai');
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
function addMessage(text, sender, data = null) {
    const chatMessages = document.getElementById('chatMessages');
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${sender}-message`;
    
    const avatar = sender === 'ai' ? 'ü§ñ' : 'üë§';
    const avatarClass = sender === 'ai' ? 'ai-avatar' : 'user-avatar';
    
    let messageContent = `<p>${formatMessage(text)}</p>`;
    
    // –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    if (data && data.type === 'project_created' && data.download_url) {
        messageContent += `
            <div class="project-actions" style="margin-top: 1rem;">
                <button class="download-btn" onclick="downloadProject('${data.download_url}', '${data.project_id}')">
                    üì¶ –°–∫–∞—á–∞—Ç—å –ø—Ä–æ–µ–∫—Ç
                </button>
                <button class="view-btn" onclick="viewProject('${data.project_id}')">
                    üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–æ–≤
                </button>
            </div>
        `;
    }
    
    // –ï—Å–ª–∏ AI –ø–æ–¥–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    if (data && data.type === 'ai_summary') {
        messageContent = formatAISummary(text, data);
    }
    
    messageDiv.innerHTML = `
        <div class="message-avatar ${avatarClass}">${avatar}</div>
        <div class="message-content">
            ${messageContent}
        </div>
    `;
    
    chatMessages.appendChild(messageDiv);
    chatMessages.scrollTop = chatMessages.scrollHeight;
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    messageDiv.style.opacity = '0';
    messageDiv.style.transform = 'translateY(20px)';
    setTimeout(() => {
        messageDiv.style.opacity = '1';
        messageDiv.style.transform = 'translateY(0)';
        messageDiv.style.transition = 'all 0.3s ease';
    }, 100);
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
function formatMessage(text) {
    // –ó–∞–º–µ–Ω—è–µ–º —ç–º–æ–¥–∑–∏ –Ω–∞ –±–æ–ª–µ–µ –∫—Ä—É–ø–Ω—ã–µ
    text = text.replace(/üéâ/g, '<span style="font-size: 1.5em;">üéâ</span>');
    text = text.replace(/üöÄ/g, '<span style="font-size: 1.2em;">üöÄ</span>');
    text = text.replace(/‚úÖ/g, '<span style="color: #22c55e;">‚úÖ</span>');
    text = text.replace(/üí°/g, '<span style="color: #f59e0b;">üí°</span>');
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    text = text.replace(/\*\*(.*?)\*\*/g, '<strong style="color: #8b5cf6;">$1</strong>');
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–∫–∏
    text = text.replace(/^‚Ä¢ (.+)$/gm, '<div style="margin: 0.5rem 0; padding-left: 1rem;">‚ñ∂ $1</div>');
    
    // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –∞–±–∑–∞—Ü—ã
    text = text.replace(/\n\n/g, '</p><p>');
    
    return text;
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤ AI
function formatAISummary(text, data) {
    return `
        <div class="ai-summary">
            <div class="summary-title">
                üéâ ${data.title || '–ì–û–¢–û–í–û! –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤–Ω–µ—Å–µ–Ω—ã!'}
            </div>
            <div class="summary-content">
                ${formatMessage(text)}
            </div>
            ${data.changes ? `
                <div class="summary-section">
                    <h4>üîß –í–Ω–µ—Å–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:</h4>
                    <ul class="summary-list">
                        ${data.changes.map(change => `<li>${change}</li>`).join('')}
                    </ul>
                </div>
            ` : ''}
            ${data.next_steps ? `
                <div class="summary-section">
                    <h4>üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:</h4>
                    <ul class="summary-list">
                        ${data.next_steps.map(step => `<li>${step}</li>`).join('')}
                    </ul>
                </div>
            ` : ''}
        </div>
    `;
}

// –ü–æ–∫–∞–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–µ—á–∞—Ç–∏
function showTypingIndicator() {
    const chatMessages = document.getElementById('chatMessages');
    const typingDiv = document.createElement('div');
    typingDiv.className = 'message ai-message typing-indicator';
    typingDiv.id = 'typingIndicator';
    
    typingDiv.innerHTML = `
        <div class="message-avatar ai-avatar">ü§ñ</div>
        <div class="message-content">
            <div class="typing-dots">
                <span></span>
                <span></span>
                <span></span>
            </div>
        </div>
    `;
    
    chatMessages.appendChild(typingDiv);
    chatMessages.scrollTop = chatMessages.scrollHeight;
}

function hideTypingIndicator() {
    const typingIndicator = document.getElementById('typingIndicator');
    if (typingIndicator) {
        typingIndicator.remove();
    }
}

// –ü–æ–∫–∞–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
function showSuggestions(suggestions) {
    const chatMessages = document.getElementById('chatMessages');
    const suggestionsDiv = document.createElement('div');
    suggestionsDiv.className = 'suggestions';
    
    const buttons = suggestions.map(suggestion => 
        `<button onclick="sendSuggestion('${suggestion.replace(/'/g, "\\'")}'); removeSuggestions();" class="suggestion-btn">${suggestion}</button>`
    ).join('');
    
    suggestionsDiv.innerHTML = `
        <div class="suggestions-container">
            ${buttons}
        </div>
    `;
    
    chatMessages.appendChild(suggestionsDiv);
    chatMessages.scrollTop = chatMessages.scrollHeight;
}

function sendSuggestion(suggestion) {
    const chatInput = document.getElementById('chatInput');
    chatInput.value = suggestion;
    sendMessage();
}

function removeSuggestions() {
    const suggestions = document.querySelector('.suggestions');
    if (suggestions) {
        suggestions.remove();
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function loadUserProjects() {
    try {
        const response = await fetch('/api/user/projects');
        if (response.ok) {
            const data = await response.json();
            displayProjects(data.projects);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤:', error);
    }
}

function displayProjects(projects) {
    const projectsGrid = document.getElementById('projectsGrid');
    
    if (projects.length === 0) {
        projectsGrid.innerHTML = `
            <div style="text-align: center; padding: 3rem; color: rgba(255, 255, 255, 0.7);">
                <div style="font-size: 3rem; margin-bottom: 1rem;">üìÅ</div>
                <h3>–ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤</h3>
                <p>–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç —á–µ—Ä–µ–∑ —á–∞—Ç!</p>
            </div>
        `;
        return;
    }
    
    const projectCards = projects.map(project => `
        <div class="project-card" data-project-id="${project.project_id}">
            <div class="project-header">
                <h3>${project.name}</h3>
                <span class="project-type">${project.type}</span>
            </div>
            <div class="project-content">
                <p class="project-description">${project.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}</p>
                <div class="project-stats">
                    <span>üìÑ ${project.files ? project.files.length : 0} —Ñ–∞–π–ª–æ–≤</span>
                    <span>üîÑ v${project.version || 1}</span>
                    <span class="project-status status-${project.status || 'active'}">${project.status || 'active'}</span>
                </div>
            </div>
            <div class="project-actions">
                <button onclick="openProject('${project.project_id}')" class="btn-primary">
                    <i>üìù</i> –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                </button>
                <button onclick="runProject('${project.project_id}')" class="btn-secondary">
                    <i>‚ñ∂Ô∏è</i> –ó–∞–ø—É—Å—Ç–∏—Ç—å
                </button>
                <button onclick="shareProject('${project.project_id}')" class="btn-outline">
                    <i>üîó</i> –ü–æ–¥–µ–ª–∏—Ç—å—Å—è
                </button>
            </div>
            <div class="project-footer">
                <small>–°–æ–∑–¥–∞–Ω: ${formatDate(project.created_at)}</small>
                <small>–ò–∑–º–µ–Ω–µ–Ω: ${formatDate(project.updated_at)}</small>
            </div>
        </div>
    `).join('');
    
    projectsGrid.innerHTML = projectCards;
}

async function openProject(projectId) {
    try {
        const response = await fetch(`/api/project/${projectId}/files`);
        if (response.ok) {
            const data = await response.json();
            showProjectEditor(projectId, data.files);
        } else {
            showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞', 'error');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', error);
        showNotification('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–æ–µ–∫—Ç–∞', 'error');
    }
}

async function runProject(projectId) {
    try {
        const response = await fetch(`/api/project/${projectId}/run`, {
            method: 'POST'
        });
        
        if (response.ok) {
            const data = await response.json();
            showNotification('–ü—Ä–æ–µ–∫—Ç –∑–∞–ø—É—â–µ–Ω!', 'success');
            // –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–µ–∫—Ç –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ –∏–ª–∏ iframe
            window.open(data.url, '_blank');
        } else {
            showNotification('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞', 'error');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞', 'error');
    }
}

function shareProject(projectId) {
    const shareUrl = `${window.location.origin}/project/${projectId}`;
    navigator.clipboard.writeText(shareUrl).then(() => {
        showNotification('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!', 'success');
    });
}

function showProjectEditor(projectId, files) {
    const modal = document.createElement('div');
    modal.className = 'project-editor-modal';
    
    const fileList = files.map(file => `
        <div class="file-item" onclick="selectFile('${file.path}')">
            <span class="file-icon">${getFileIcon(file.type)}</span>
            <span class="file-name">${file.path}</span>
        </div>
    `).join('');
    
    modal.innerHTML = `
        <div class="modal-content project-editor">
            <div class="modal-header">
                <h2>–†–µ–¥–∞–∫—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞</h2>
                <button onclick="closeModal()" class="close-btn">√ó</button>
            </div>
            <div class="editor-body">
                <div class="file-sidebar">
                    <h3>–§–∞–π–ª—ã</h3>
                    <div class="file-list">
                        ${fileList}
                    </div>
                    <button onclick="addNewFile('${projectId}')" class="btn-outline">
                        + –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª
                    </button>
                </div>
                <div class="code-editor">
                    <div class="editor-tabs" id="editorTabs"></div>
                    <textarea id="codeEditor" placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"></textarea>
                    <div class="editor-actions">
                        <button onclick="saveCurrentFile()" class="btn-primary">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                        <button onclick="formatCode()" class="btn-secondary">üé® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                    </div>
                </div>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä —Å –ø–µ—Ä–≤—ã–º —Ñ–∞–π–ª–æ–º
    if (files.length > 0) {
        selectFile(files[0].path, files);
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
    window.currentProject = { projectId, files };
}

function selectFile(filePath, files = null) {
    const fileData = files || window.currentProject.files;
    const file = fileData.find(f => f.path === filePath);
    
    if (file) {
        const codeEditor = document.getElementById('codeEditor');
        codeEditor.value = file.content;
        codeEditor.setAttribute('data-file-path', filePath);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
        updateEditorTabs(filePath);
    }
}

async function saveCurrentFile() {
    const codeEditor = document.getElementById('codeEditor');
    const filePath = codeEditor.getAttribute('data-file-path');
    const content = codeEditor.value;
    
    if (!filePath) {
        showNotification('–ù–µ –≤—ã–±—Ä–∞–Ω —Ñ–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è', 'warning');
        return;
    }
    
    try {
        const response = await fetch(`/api/project/${window.currentProject.projectId}/file`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                file_path: filePath,
                file_content: content
            })
        });
        
        if (response.ok) {
            showNotification('–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω!', 'success');
        } else {
            showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞', 'error');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
        showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞', 'error');
    }
}

function getFileIcon(fileType) {
    const icons = {
        'html': 'üìÑ',
        'css': 'üé®', 
        'javascript': '‚ö°',
        'python': 'üêç',
        'text': 'üìù'
    };
    return icons[fileType] || 'üìÑ';
}

function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU', { 
        day: '2-digit', 
        month: '2-digit', 
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    });
}

function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
        notification.classList.add('show');
    }, 100);
    
    setTimeout(() => {
        notification.remove();
    }, 3000);
}

function closeModal() {
    const modal = document.querySelector('.project-editor-modal');
    if (modal) {
        modal.remove();
    }
                <h3>–ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤</h3>
                <p>–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç –≤ —á–∞—Ç–µ —Å AI</p>
                <button class="btn-primary" onclick="showTab('chat')" style="margin-top: 1rem;">
                    üí¨ –ù–∞—á–∞—Ç—å –≤ —á–∞—Ç–µ
                </button>
            </div>
        `;
        return;
    }
    
    projectsGrid.innerHTML = projects.map(project => `
        <div class="project-card" onclick="openProject('${project.project_id}')">
            <div class="project-title">${project.name}</div>
            <div class="project-date">${formatDate(project.created_at)}</div>
            <div class="project-description">${project.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}</div>
            <div class="project-actions" onclick="event.stopPropagation();">
                <button class="project-btn btn-primary" onclick="downloadProject('/api/download/${project.project_id}', '${project.project_id}')">
                    üì• –°–∫–∞—á–∞—Ç—å
                </button>
                <button class="project-btn btn-secondary" onclick="editProject('${project.project_id}')">
                    ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                </button>
            </div>
        </div>
    `).join('');
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤
async function loadChatHistory() {
    try {
        const response = await fetch('/api/user/history');
        if (response.ok) {
            const data = await response.json();
            displayChatHistory(data.sessions);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error);
    }
}

function displayChatHistory(sessions) {
    const historyList = document.getElementById('historyList');
    
    if (sessions.length === 0) {
        historyList.innerHTML = `
            <div style="text-align: center; padding: 3rem; color: rgba(255, 255, 255, 0.7);">
                <div style="font-size: 3rem; margin-bottom: 1rem;">üìã</div>
                <h3>–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞</h3>
                <p>–ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ —Å AI, –∏ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –∏—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤</p>
            </div>
        `;
        return;
    }
    
    historyList.innerHTML = sessions.map(session => {
        const firstMessage = session.messages[0]?.message || '–ë–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–π';
        const title = firstMessage.length > 60 ? firstMessage.substr(0, 60) + '...' : firstMessage;
        
        return `
            <div class="history-item" onclick="loadChatSession('${session.session_id}')">
                <div class="history-title">${title}</div>
                <div class="history-date">${formatDate(session.created_at)} ‚Ä¢ ${session.messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π</div>
            </div>
        `;
    }).join('');
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏
function downloadProject(downloadUrl, projectId) {
    const link = document.createElement('a');
    link.href = downloadUrl;
    link.download = `project_${projectId}.zip`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    showNotification('üì¶ –ü—Ä–æ–µ–∫—Ç –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...', 'success');
}

function viewProject(projectId) {
    showNotification('üëÅÔ∏è –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–æ–≤ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏', 'info');
}

function editProject(projectId) {
    showTab('chat');
    const chatInput = document.getElementById('chatInput');
    chatInput.value = `–î–æ—Ä–∞–±–æ—Ç–∞–π –ø—Ä–æ–µ–∫—Ç —Å ID: ${projectId}`;
    chatInput.focus();
}

// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
function showLimitModal() {
    const modal = document.getElementById('limitModal');
    modal.classList.add('active');
}

function closeLimitModal() {
    const modal = document.getElementById('limitModal');
    modal.classList.remove('active');
}

// –§—É–Ω–∫—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
function showComingSoon() {
    showNotification('üöß –û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!', 'info');
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
async function saveSettings() {
    const name = document.querySelector('#settings-tab #userName').value;
    
    try {
        const response = await fetch('/api/user/update', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ name })
        });
        
        if (response.ok) {
            const data = await response.json();
            currentUser.name = name;
            updateUserInterface();
            showNotification('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'success');
        } else {
            const data = await response.json();
            showNotification('‚ùå ' + data.error, 'error');
        }
    } catch (error) {
        showNotification('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫', 'error');
    }
}

// –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
async function logout() {
    try {
        await fetch('/api/logout', { method: 'POST' });
        window.location.href = '/auth';
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error);
        window.location.href = '/auth';
    }
}

// –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function formatDate(dateString) {
    const date = new Date(dateString);
    const now = new Date();
    const diffTime = Math.abs(now - date);
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    
    if (diffDays === 1) {
        return '–°–µ–≥–æ–¥–Ω—è';
    } else if (diffDays === 2) {
        return '–í—á–µ—Ä–∞';
    } else if (diffDays <= 7) {
        return `${diffDays} –¥–Ω—è –Ω–∞–∑–∞–¥`;
    } else {
        return date.toLocaleDateString('ru-RU');
    }
}

function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 1rem 1.5rem;
        border-radius: 10px;
        color: white;
        font-weight: 600;
        z-index: 10000;
        animation: slideInRight 0.3s ease;
        ${type === 'success' ? 'background: #10b981;' : 
          type === 'error' ? 'background: #ef4444;' : 
          'background: #3b82f6;'}
    `;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
        notification.style.animation = 'slideOutRight 0.3s ease';
        setTimeout(() => {
            document.body.removeChild(notification);
        }, 300);
    }, 3000);
}

function clearHistory() {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–æ–≤?')) {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å API –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
        showNotification('üßπ –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏', 'info');
    }
}

// –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —á–∞—Ç
function loadChatSession(sessionId) {
    // TODO: –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å–µ—Å—Å–∏—é —á–∞—Ç–∞
    showTab('chat');
    showNotification('üìã –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–∏...', 'info');
}
