// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω—Ä—ã
let scene, camera, renderer, currentAvatar;
let voices = [];
let recognition = null;
let isListening = false;
let currentMentor = 'elon';
let conversationHistory = [];

// –î–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤
const mentors = {
    elon: {
        name: '–ò–ª–æ–Ω –ú–∞—Å–∫',
        description: '–í–∏–∑–∏–æ–Ω–µ—Ä –∏ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å, –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å Tesla, SpaceX –∏ Neuralink',
        personality: '–¥–µ—Ä–∑–∫–∏–π, –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π, –ø—Ä—è–º–æ–ª–∏–Ω–µ–π–Ω—ã–π, –∞–º–±–∏—Ü–∏–æ–∑–Ω—ã–π',
        voice: 'ru-RU',
        color: '#ff6b35'
    },
    jobs: {
        name: '–°—Ç–∏–≤ –î–∂–æ–±—Å',
        description: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å Apple, —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–µ—Ä —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π',
        personality: '–ø–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏—Å—Ç, –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π, —Ç—Ä–µ–±–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π, —Ö–∞—Ä–∏–∑–º–∞—Ç–∏—á–Ω—ã–π',
        voice: 'en-US',
        color: '#007aff'
    },
    gates: {
        name: '–ë–∏–ª–ª –ì–µ–π—Ç—Å',
        description: '–û—Å–Ω–æ–≤–∞—Ç–µ–ª—å Microsoft, —Ñ–∏–ª–∞–Ω—Ç—Ä–æ–ø –∏ –≤–∏–∑–∏–æ–Ω–µ—Ä',
        personality: '–∞–Ω–∞–ª–∏—Ç–∏—á–Ω—ã–π, —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π, –≥—É–º–∞–Ω–Ω—ã–π, –¥–∞–ª—å–Ω–æ–≤–∏–¥–Ω—ã–π',
        voice: 'en-US',
        color: '#00a1f1'
    },
    bezos: {
        name: '–î–∂–µ—Ñ—Ñ –ë–µ–∑–æ—Å',
        description: '–û—Å–Ω–æ–≤–∞—Ç–µ–ª—å Amazon, –ø–∏–æ–Ω–µ—Ä —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –∫–æ–º–º–µ—Ä—Ü–∏–∏',
        personality: '—Ü–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª–µ–Ω–Ω—ã–π, –∫–ª–∏–µ–Ω—Ç–æ–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π',
        voice: 'en-US',
        color: '#ff9900'
    },
    buffett: {
        name: '–£–æ—Ä—Ä–µ–Ω –ë–∞—Ñ—Ñ–µ—Ç',
        description: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –∏–Ω–≤–µ—Å—Ç–æ—Ä, –æ—Ä–∞–∫—É–ª –∏–∑ –û–º–∞—Ö–∏',
        personality: '–º—É–¥—Ä—ã–π, —Ç–µ—Ä–ø–µ–ª–∏–≤—ã–π, –ø—Ä–æ—Å—Ç–æ–π, —Ü–µ–Ω–Ω–æ—Å—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π',
        voice: 'en-US',
        color: '#2e8b57'
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    initializeApp();
    setupVoiceSupport();
    setupEventListeners();
    createAvatar();
});

// –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
function initializeApp() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –ù–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ 3D...');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ WebGL
    if (!isWebGLSupported()) {
        showError('WebGL –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ –≤–∞—à–µ–º –±—Ä–∞—É–∑–µ—Ä–µ');
        return;
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è 3D —Å—Ü–µ–Ω—ã
    init3DScene();
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
    loadConversationHistory();
    
    console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ WebGL
function isWebGLSupported() {
    try {
        const canvas = document.createElement('canvas');
        return !!(window.WebGLRenderingContext && canvas.getContext('webgl'));
    } catch (e) {
        return false;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è 3D —Å—Ü–µ–Ω—ã
function init3DScene() {
    const container = document.getElementById('avatar3d');
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã
    scene = new THREE.Scene();
    scene.background = new THREE.Color(0x1a1a2e);
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–º–µ—Ä—ã
    camera = new THREE.PerspectiveCamera(75, container.clientWidth / container.clientHeight, 0.1, 1000);
    camera.position.z = 5;
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞
    renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
    renderer.setSize(container.clientWidth, container.clientHeight);
    renderer.shadowMap.enabled = true;
    renderer.shadowMap.type = THREE.PCFSoftShadowMap;
    
    // –û—á–∏—â–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞
    container.innerHTML = '';
    container.appendChild(renderer.domElement);
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Å–≤–µ—â–µ–Ω–∏—è
    const ambientLight = new THREE.AmbientLight(0x404040, 0.4);
    scene.add(ambientLight);
    
    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
    directionalLight.position.set(10, 10, 5);
    directionalLight.castShadow = true;
    scene.add(directionalLight);
    
    // –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏
    animate();
}

// –°–æ–∑–¥–∞–Ω–∏–µ 3D –∞–≤–∞—Ç–∞—Ä–∞
function createAvatar() {
    const mentor = mentors[currentMentor];
    
    // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
    if (currentAvatar) {
        scene.remove(currentAvatar);
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞
    currentAvatar = new THREE.Group();
    
    // –ì–æ–ª–æ–≤–∞ (—Å—Ñ–µ—Ä–∞)
    const headGeometry = new THREE.SphereGeometry(1, 32, 32);
    const headMaterial = new THREE.MeshPhongMaterial({ 
        color: mentor.color,
        shininess: 100,
        transparent: true,
        opacity: 0.9
    });
    const head = new THREE.Mesh(headGeometry, headMaterial);
    head.position.y = 1.5;
    head.castShadow = true;
    currentAvatar.add(head);
    
    // –¢–µ–ª–æ (—Ü–∏–ª–∏–Ω–¥—Ä)
    const bodyGeometry = new THREE.CylinderGeometry(0.6, 0.8, 2, 8);
    const bodyMaterial = new THREE.MeshPhongMaterial({ 
        color: new THREE.Color(mentor.color).multiplyScalar(0.7)
    });
    const body = new THREE.Mesh(bodyGeometry, bodyMaterial);
    body.castShadow = true;
    currentAvatar.add(body);
    
    // –ì–ª–∞–∑–∞
    const eyeGeometry = new THREE.SphereGeometry(0.1, 8, 8);
    const eyeMaterial = new THREE.MeshBasicMaterial({ color: 0xffffff });
    
    const leftEye = new THREE.Mesh(eyeGeometry, eyeMaterial);
    leftEye.position.set(-0.3, 1.7, 0.8);
    currentAvatar.add(leftEye);
    
    const rightEye = new THREE.Mesh(eyeGeometry, eyeMaterial);
    rightEye.position.set(0.3, 1.7, 0.8);
    currentAvatar.add(rightEye);
    
    // –ó—Ä–∞—á–∫–∏
    const pupilGeometry = new THREE.SphereGeometry(0.05, 8, 8);
    const pupilMaterial = new THREE.MeshBasicMaterial({ color: 0x000000 });
    
    const leftPupil = new THREE.Mesh(pupilGeometry, pupilMaterial);
    leftPupil.position.set(-0.3, 1.7, 0.85);
    currentAvatar.add(leftPupil);
    
    const rightPupil = new THREE.Mesh(pupilGeometry, pupilMaterial);
    rightPupil.position.set(0.3, 1.7, 0.85);
    currentAvatar.add(rightPupil);
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –≤ —Å—Ü–µ–Ω—É
    scene.add(currentAvatar);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    currentAvatar.scale.set(0, 0, 0);
    animateAvatarAppearance();
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–µ
    updateMentorInfo();
}

// –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞
function animateAvatarAppearance() {
    const startTime = Date.now();
    const duration = 1000;
    
    function animate() {
        const elapsed = Date.now() - startTime;
        const progress = Math.min(elapsed / duration, 1);
        
        // Easing —Ñ—É–Ω–∫—Ü–∏—è
        const eased = 1 - Math.pow(1 - progress, 3);
        
        currentAvatar.scale.set(eased, eased, eased);
        currentAvatar.rotation.y = (1 - eased) * Math.PI * 2;
        
        if (progress < 1) {
            requestAnimationFrame(animate);
        }
    }
    
    animate();
}

// –ê–Ω–∏–º–∞—Ü–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∞–≤–∞—Ç–∞—Ä–∞
function animateSpeaking() {
    if (!currentAvatar) return;
    
    const head = currentAvatar.children[0];
    const originalScale = { x: 1, y: 1, z: 1 };
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –∫–∞—á–∞–Ω–∏—è –≥–æ–ª–æ–≤—ã
    const animation = () => {
        const time = Date.now() * 0.01;
        head.rotation.x = Math.sin(time) * 0.1;
        head.rotation.z = Math.sin(time * 0.7) * 0.05;
        
        // –õ–µ–≥–∫–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø—Ä–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ
        const scale = 1 + Math.sin(time * 2) * 0.02;
        head.scale.set(scale, scale, scale);
    };
    
    return animation;
}

// –¶–∏–∫–ª –∞–Ω–∏–º–∞—Ü–∏–∏
function animate() {
    requestAnimationFrame(animate);
    
    if (currentAvatar) {
        // –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –ª–µ–≥–∫–æ–µ –ø–æ–∫–∞—á–∏–≤–∞–Ω–∏–µ
        const time = Date.now() * 0.001;
        currentAvatar.rotation.y += 0.005;
        currentAvatar.position.y = Math.sin(time * 2) * 0.1;
    }
    
    renderer.render(scene, camera);
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
function setupVoiceSupport() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Web Speech API
    if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
        recognition = new SpeechRecognition();
        
        recognition.lang = 'ru-RU';
        recognition.continuous = false;
        recognition.interimResults = false;
        
        recognition.onresult = function(event) {
            const transcript = event.results[0][0].transcript;
            document.getElementById('userInput').value = transcript;
            sendMessage();
        };
        
        recognition.onerror = function(event) {
            console.error('Speech recognition error:', event.error);
            showNotification('–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏', 'error');
            isListening = false;
            updateVoiceButton();
        };
        
        recognition.onend = function() {
            isListening = false;
            updateVoiceButton();
        };
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤
    if ('speechSynthesis' in window) {
        speechSynthesis.onvoiceschanged = function() {
            voices = speechSynthesis.getVoices();
        };
        voices = speechSynthesis.getVoices();
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // –°–º–µ–Ω–∞ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞
    document.getElementById('mentorSelect').addEventListener('change', function(e) {
        currentMentor = e.target.value;
        createAvatar();
    });
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    document.getElementById('sendBtn').addEventListener('click', sendMessage);
    document.getElementById('userInput').addEventListener('keypress', function(e) {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            sendMessage();
        }
    });
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
    addVoiceButton();
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
    window.addEventListener('resize', onWindowResize);
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
function addVoiceButton() {
    const inputContainer = document.querySelector('.chat-input-container');
    
    const voiceBtn = document.createElement('button');
    voiceBtn.id = 'voiceBtn';
    voiceBtn.className = 'voice-btn';
    voiceBtn.innerHTML = 'üé§';
    voiceBtn.title = '–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥';
    voiceBtn.addEventListener('click', toggleVoiceInput);
    
    inputContainer.appendChild(voiceBtn);
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
function toggleVoiceInput() {
    if (!recognition) {
        showNotification('–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è', 'error');
        return;
    }
    
    if (isListening) {
        recognition.stop();
        isListening = false;
    } else {
        recognition.start();
        isListening = true;
        showNotification('–ì–æ–≤–æ—Ä–∏—Ç–µ...', 'info');
    }
    
    updateVoiceButton();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
function updateVoiceButton() {
    const voiceBtn = document.getElementById('voiceBtn');
    if (voiceBtn) {
        voiceBtn.innerHTML = isListening ? '‚èπÔ∏è' : 'üé§';
        voiceBtn.classList.toggle('listening', isListening);
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendMessage() {
    const input = document.getElementById('userInput');
    const message = input.value.trim();
    
    if (!message) return;
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    addMessage(message, 'user');
    input.value = '';
    
    // –ü–æ–∫–∞–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    showTypingIndicator();
    
    try {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞  
        const response = await fetch('/api/mentor-chat', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                message: message,
                mentor: currentMentor,
                personality: mentors[currentMentor].personality,
                history: conversationHistory.slice(-10) // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
            })
        });
        
        const data = await response.json();
        
        if (data.response) {
            // –£–¥–∞–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
            removeTypingIndicator();
            
            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ AI
            addMessage(data.response, 'ai');
            
            // –û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            speakText(data.response);
            
            // –ê–Ω–∏–º–∞—Ü–∏—è –≥–æ–≤–æ—Ä—è—â–µ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
            const speakingAnimation = animateSpeaking();
            const speakingInterval = setInterval(speakingAnimation, 50);
            
            setTimeout(() => {
                clearInterval(speakingInterval);
            }, 3000);
            
        } else {
            throw new Error('–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        removeTypingIndicator();
        addMessage('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', 'ai');
        showNotification('–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º', 'error');
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
function addMessage(text, sender) {
    const messagesContainer = document.getElementById('chatMessages');
    
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${sender}-message`;
    
    if (sender === 'ai') {
        messageDiv.innerHTML = `
            <div class="message-avatar">ü§ñ</div>
            <div class="message-content">
                <strong>${mentors[currentMentor].name}:</strong>
                <p>${text}</p>
                <div class="message-time">${new Date().toLocaleTimeString()}</div>
            </div>
        `;
    } else {
        messageDiv.innerHTML = `
            <div class="message-content">
                <p>${text}</p>
                <div class="message-time">${new Date().toLocaleTimeString()}</div>
            </div>
            <div class="message-avatar">üë§</div>
        `;
    }
    
    messagesContainer.appendChild(messageDiv);
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
    conversationHistory.push({ sender, text, timestamp: new Date().toISOString() });
    saveConversationHistory();
    
    // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    messageDiv.style.opacity = '0';
    messageDiv.style.transform = 'translateY(20px)';
    
    requestAnimationFrame(() => {
        messageDiv.style.transition = 'all 0.3s ease';
        messageDiv.style.opacity = '1';
        messageDiv.style.transform = 'translateY(0)';
    });
}

// –ü–æ–∫–∞–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–µ—á–∞—Ç–∏
function showTypingIndicator() {
    const messagesContainer = document.getElementById('chatMessages');
    
    const typingDiv = document.createElement('div');
    typingDiv.className = 'message ai-message typing-indicator';
    typingDiv.id = 'typingIndicator';
    typingDiv.innerHTML = `
        <div class="message-avatar">ü§ñ</div>
        <div class="message-content">
            <div class="typing-dots">
                <span></span>
                <span></span>
                <span></span>
            </div>
        </div>
    `;
    
    messagesContainer.appendChild(typingDiv);
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–µ—á–∞—Ç–∏
function removeTypingIndicator() {
    const typingIndicator = document.getElementById('typingIndicator');
    if (typingIndicator) {
        typingIndicator.remove();
    }
}

// –û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
function speakText(text) {
    if (!('speechSynthesis' in window)) return;
    
    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
    speechSynthesis.cancel();
    
    const utterance = new SpeechSynthesisUtterance(text);
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ–ª–æ—Å–∞
    const mentor = mentors[currentMentor];
    const voice = voices.find(v => v.lang.includes(mentor.voice)) || voices[0];
    if (voice) {
        utterance.voice = voice;
    }
    
    utterance.rate = 0.9;
    utterance.pitch = 1;
    utterance.volume = 0.8;
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –≤–æ –≤—Ä–µ–º—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
    utterance.onstart = function() {
        if (currentAvatar) {
            currentAvatar.userData.speaking = true;
        }
    };
    
    utterance.onend = function() {
        if (currentAvatar) {
            currentAvatar.userData.speaking = false;
        }
    };
    
    speechSynthesis.speak(utterance);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–µ
function updateMentorInfo() {
    const mentor = mentors[currentMentor];
    
    document.getElementById('mentorName').textContent = mentor.name;
    document.getElementById('mentorDescription').textContent = mentor.description;
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º—ã
    document.documentElement.style.setProperty('--mentor-color', mentor.color);
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
function saveConversationHistory() {
    try {
        localStorage.setItem('ai_mentor_history', JSON.stringify(conversationHistory));
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:', error);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
function loadConversationHistory() {
    try {
        const saved = localStorage.getItem('ai_mentor_history');
        if (saved) {
            conversationHistory = JSON.parse(saved);
            
            // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 —Å–æ–æ–±—â–µ–Ω–∏–π
            const recentMessages = conversationHistory.slice(-5);
            const messagesContainer = document.getElementById('chatMessages');
            
            // –û—á–∏—Å—Ç–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            messagesContainer.innerHTML = '';
            
            recentMessages.forEach(msg => {
                addMessage(msg.text, msg.sender);
            });
            
            if (recentMessages.length === 0) {
                // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                addMessage('–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –æ–ø—ã—Ç–æ–º –∏ –∑–Ω–∞–Ω–∏—è–º–∏. –û —á–µ–º —Ö–æ—Ç–∏—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å?', 'ai');
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
function onWindowResize() {
    const container = document.getElementById('avatar3d');
    if (container && camera && renderer) {
        camera.aspect = container.clientWidth / container.clientHeight;
        camera.updateProjectionMatrix();
        renderer.setSize(container.clientWidth, container.clientHeight);
    }
}

// –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message, type = 'info') {
    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    let notificationContainer = document.getElementById('notifications');
    if (!notificationContainer) {
        notificationContainer = document.createElement('div');
        notificationContainer.id = 'notifications';
        notificationContainer.className = 'notifications-container';
        document.body.appendChild(notificationContainer);
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    
    notificationContainer.appendChild(notification);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    requestAnimationFrame(() => {
        notification.classList.add('show');
    });
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
    setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 300);
    }, 3000);
}

// –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏
function showError(message) {
    const container = document.getElementById('avatar3d');
    container.innerHTML = `
        <div class="error-message">
            <h3>‚ùå –û—à–∏–±–∫–∞</h3>
            <p>${message}</p>
            <button onclick="location.reload()">–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å</button>
        </div>
    `;
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.sendMessage = sendMessage;
window.toggleVoiceInput = toggleVoiceInput;