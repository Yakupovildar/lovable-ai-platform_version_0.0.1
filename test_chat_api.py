#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π API —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä—è–º–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AI —á–∞—Ç–∞
"""

import sys
import os
from flask import Flask, request, jsonify
from flask_cors import CORS
sys.path.append('backend')

from backend.intelligent_chat import IntelligentChat

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)
CORS(app)  # –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AI —á–∞—Ç
chat = IntelligentChat()

@app.route('/api/test-chat', methods=['POST'])
def test_chat():
    """–¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è —á–∞—Ç–∞ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    try:
        data = request.get_json()
        
        if not data or 'message' not in data:
            return jsonify({
                'error': '–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ª–µ message',
                'status': 'error'
            }), 400
        
        message = data['message']
        session_id = data.get('session_id', 'default_test_session')
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
        result = chat.chat(session_id, message)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        suggestions = chat.get_suggestions(session_id)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        return jsonify({
            'status': 'success',
            'response': result['response'],
            'session_id': result['session_id'],
            'intent_analysis': result['intent_analysis'],
            'ai_provider': result['ai_provider'],
            'message_count': result['message_count'],
            'suggestions': suggestions,
            'timestamp': result['timestamp']
        })
        
    except Exception as e:
        return jsonify({
            'error': f'–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}',
            'status': 'error'
        }), 500

@app.route('/api/chat-history/<session_id>', methods=['GET'])
def get_test_chat_history(session_id):
    """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞"""
    try:
        session = chat.get_session(session_id)
        
        if not session:
            return jsonify({
                'error': '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
                'status': 'error'
            }), 404
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è JSON
        messages = []
        for msg in session.messages:
            if msg.role != 'system':  # –ò—Å–∫–ª—é—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                messages.append({
                    'role': msg.role,
                    'content': msg.content,
                    'timestamp': msg.timestamp.isoformat(),
                    'message_type': msg.message_type
                })
        
        return jsonify({
            'status': 'success',
            'session_id': session_id,
            'messages': messages,
            'total_messages': len(messages),
            'created_at': session.created_at.isoformat(),
            'last_activity': session.last_activity.isoformat(),
            'context': session.context
        })
        
    except Exception as e:
        return jsonify({
            'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}',
            'status': 'error'
        }), 500

@app.route('/api/suggestions/<session_id>', methods=['GET'])
def get_suggestions(session_id):
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Å–µ—Å—Å–∏–∏"""
    try:
        suggestions = chat.get_suggestions(session_id)
        
        return jsonify({
            'status': 'success',
            'suggestions': suggestions,
            'session_id': session_id
        })
        
    except Exception as e:
        return jsonify({
            'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {str(e)}',
            'status': 'error'
        }), 500

@app.route('/api/status', methods=['GET'])
def get_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    return jsonify({
        'status': 'running',
        'ai_chat': 'active',
        'sessions_count': len(chat.sessions),
        'openai_available': chat.openai_api_key is not None,
        'claude_available': chat.claude_api_key is not None,
        'version': '2.0.0'
    })

@app.route('/test', methods=['GET'])
def test_page():
    """–ü—Ä–æ—Å—Ç–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return '''
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <title>–¢–µ—Å—Ç AI –ß–∞—Ç–∞</title>
        <style>
            body { font-family: Arial; max-width: 800px; margin: 0 auto; padding: 20px; }
            .chat-container { border: 1px solid #ccc; height: 400px; overflow-y: scroll; padding: 10px; margin: 10px 0; }
            .message { margin: 10px 0; padding: 8px; border-radius: 8px; }
            .user { background: #e3f2fd; text-align: right; }
            .ai { background: #f1f8e9; }
            .input-area { display: flex; margin: 10px 0; }
            .input-area input { flex: 1; padding: 10px; }
            .input-area button { padding: 10px 20px; margin-left: 10px; }
            .suggestions { margin: 10px 0; }
            .suggestion { display: inline-block; margin: 5px; padding: 5px 10px; background: #f5f5f5; border-radius: 15px; cursor: pointer; border: 1px solid #ddd; }
            .status { background: #fff3e0; padding: 10px; border-radius: 5px; margin: 10px 0; }
        </style>
    </head>
    <body>
        <h1>ü§ñ –¢–µ—Å—Ç AI –ß–∞—Ç–∞ Lovable Platform</h1>
        
        <div class="status" id="status">
            <strong>–°—Ç–∞—Ç—É—Å:</strong> <span id="status-text">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
        </div>
        
        <div class="chat-container" id="chat"></div>
        
        <div class="suggestions" id="suggestions">
            <strong>üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:</strong>
        </div>
        
        <div class="input-area">
            <input type="text" id="messageInput" placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..." onkeypress="if(event.key==='Enter') sendMessage()">
            <button onclick="sendMessage()">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
            <button onclick="clearChat()">–û—á–∏—Å—Ç–∏—Ç—å</button>
        </div>
        
        <script>
            const sessionId = 'test_web_session_' + Date.now();
            
            async function checkStatus() {
                try {
                    const response = await fetch('/api/status');
                    const status = await response.json();
                    document.getElementById('status-text').innerHTML = `
                        ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç | –°–µ—Å—Å–∏–π: ${status.sessions_count} | 
                        OpenAI: ${status.openai_available ? '‚úÖ' : '‚ùå'} | 
                        Claude: ${status.claude_available ? '‚úÖ' : '‚ùå'}
                    `;
                } catch (e) {
                    document.getElementById('status-text').textContent = '‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è';
                }
            }
            
            async function sendMessage() {
                const input = document.getElementById('messageInput');
                const message = input.value.trim();
                if (!message) return;
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                addMessage(message, 'user');
                input.value = '';
                
                try {
                    const response = await fetch('/api/test-chat', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ message, session_id: sessionId })
                    });
                    
                    const result = await response.json();
                    
                    if (result.status === 'success') {
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç AI
                        addMessage(result.response, 'ai', result.ai_provider);
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                        updateSuggestions(result.suggestions);
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                        checkStatus();
                    } else {
                        addMessage('–û—à–∏–±–∫–∞: ' + result.error, 'ai', 'error');
                    }
                } catch (e) {
                    addMessage('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + e.message, 'ai', 'error');
                }
            }
            
            function addMessage(text, type, provider = '') {
                const chat = document.getElementById('chat');
                const div = document.createElement('div');
                div.className = `message ${type}`;
                
                if (type === 'ai' && provider) {
                    div.innerHTML = `<strong>ü§ñ AI (${provider}):</strong> ${text}`;
                } else if (type === 'user') {
                    div.innerHTML = `<strong>üë§ –í—ã:</strong> ${text}`;
                } else {
                    div.textContent = text;
                }
                
                chat.appendChild(div);
                chat.scrollTop = chat.scrollHeight;
            }
            
            function updateSuggestions(suggestions) {
                const container = document.getElementById('suggestions');
                container.innerHTML = '<strong>üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:</strong>';
                
                suggestions.forEach(suggestion => {
                    const span = document.createElement('span');
                    span.className = 'suggestion';
                    span.textContent = suggestion;
                    span.onclick = () => {
                        document.getElementById('messageInput').value = suggestion;
                        sendMessage();
                    };
                    container.appendChild(span);
                });
            }
            
            function clearChat() {
                document.getElementById('chat').innerHTML = '';
                document.getElementById('suggestions').innerHTML = '<strong>üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:</strong>';
            }
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            checkStatus();
            addMessage('–ü—Ä–∏–≤–µ—Ç! –Ø AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Lovable Platform. –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å?', 'ai', 'system');
        </script>
    </body>
    </html>
    '''

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ AI —á–∞—Ç —Å–µ—Ä–≤–µ—Ä–∞...")
    print("üåê –û—Ç–∫—Ä–æ–π—Ç–µ: http://127.0.0.1:5001/test")
    print("üì° API: http://127.0.0.1:5001/api/test-chat")
    print("üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    app.run(
        host='127.0.0.1', 
        port=5001, 
        debug=False, 
        use_reloader=False
    )