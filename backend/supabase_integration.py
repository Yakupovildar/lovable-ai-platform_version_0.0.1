#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Supabase –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
"""

import os
import json
import requests
from typing import Dict, List, Any, Optional
from dataclasses import dataclass
import uuid

@dataclass
class SupabaseProject:
    """–ü—Ä–æ–µ–∫—Ç –≤ Supabase"""
    project_id: str
    name: str
    url: str
    anon_key: str
    service_key: str
    database_url: str
    status: str

class SupabaseManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –∏ –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Supabase"""
    
    def __init__(self):
        self.supabase_access_token = os.getenv('SUPABASE_ACCESS_TOKEN')
        self.base_url = 'https://api.supabase.com/v1'
        self.organization_id = os.getenv('SUPABASE_ORG_ID')
        
    def create_project(self, name: str, database_password: str = None) -> Optional[SupabaseProject]:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –≤ Supabase"""
        
        if not self.supabase_access_token:
            print("‚ö†Ô∏è Supabase Access Token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —Å–æ–∑–¥–∞—é demo –ø—Ä–æ–µ–∫—Ç")
            return self._create_demo_project(name)
        
        if not database_password:
            database_password = f"SecurePass_{uuid.uuid4().hex[:8]}"
            
        headers = {
            'Authorization': f'Bearer {self.supabase_access_token}',
            'Content-Type': 'application/json'
        }
        
        payload = {
            'name': name.lower().replace(' ', '-'),
            'organization_id': self.organization_id,
            'plan': 'free',
            'region': 'us-east-1',
            'db_pass': database_password
        }
        
        try:
            response = requests.post(
                f'{self.base_url}/projects',
                headers=headers,
                json=payload,
                timeout=30
            )
            
            if response.status_code == 201:
                project_data = response.json()
                
                return SupabaseProject(
                    project_id=project_data['id'],
                    name=project_data['name'],
                    url=f"https://{project_data['id']}.supabase.co",
                    anon_key="",  # –ü–æ–ª—É—á–∏–º –ø–æ–∑–∂–µ
                    service_key="",  # –ü–æ–ª—É—á–∏–º –ø–æ–∑–∂–µ
                    database_url=project_data.get('database', {}).get('host', ''),
                    status=project_data['status']
                )
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Supabase –ø—Ä–æ–µ–∫—Ç–∞: {response.text}")
                return self._create_demo_project(name)
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Supabase –ø—Ä–æ–µ–∫—Ç–∞: {e}")
            return self._create_demo_project(name)
            
    def _create_demo_project(self, name: str) -> SupabaseProject:
        """–°–æ–∑–¥–∞–µ—Ç –¥–µ–º–æ –ø—Ä–æ–µ–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        project_id = f"demo_{uuid.uuid4().hex[:8]}"
        
        return SupabaseProject(
            project_id=project_id,
            name=name,
            url=f"https://{project_id}.supabase.co",
            anon_key=f"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.demo_anon_key_{project_id}",
            service_key=f"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.demo_service_key_{project_id}",
            database_url=f"postgresql://postgres:password@db.{project_id}.supabase.co:5432/postgres",
            status='ACTIVE_DEMO'
        )
        
    def wait_for_project_ready(self, project: SupabaseProject, timeout_minutes: int = 5) -> bool:
        """–ñ–¥–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
        
        if 'demo' in project.project_id.lower():
            print(f"‚úÖ Demo –ø—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤: {project.name}")
            return True
            
        headers = {
            'Authorization': f'Bearer {self.supabase_access_token}',
        }
        
        import time
        max_attempts = timeout_minutes * 12  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        
        for attempt in range(max_attempts):
            try:
                response = requests.get(
                    f'{self.base_url}/projects/{project.project_id}',
                    headers=headers,
                    timeout=10
                )
                
                if response.status_code == 200:
                    project_data = response.json()
                    if project_data['status'] == 'ACTIVE_HEALTHY':
                        print(f"‚úÖ Supabase –ø—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤: {project.name}")
                        return True
                        
                print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞... ({attempt + 1}/{max_attempts})")
                time.sleep(5)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
                
        print(f"‚è∞ Timeout: –ø—Ä–æ–µ–∫—Ç –Ω–µ –≥–æ—Ç–æ–≤ –∑–∞ {timeout_minutes} –º–∏–Ω—É—Ç")
        return False
        
    def get_project_keys(self, project: SupabaseProject) -> Dict[str, str]:
        """–ü–æ–ª—É—á–∞–µ—Ç API –∫–ª—é—á–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
        
        if 'demo' in project.project_id.lower():
            return {
                'anon_key': project.anon_key,
                'service_key': project.service_key
            }
            
        headers = {
            'Authorization': f'Bearer {self.supabase_access_token}',
        }
        
        try:
            response = requests.get(
                f'{self.base_url}/projects/{project.project_id}/api-keys',
                headers=headers,
                timeout=10
            )
            
            if response.status_code == 200:
                keys = response.json()
                return {
                    'anon_key': keys.get('anon', ''),
                    'service_key': keys.get('service_role', '')
                }
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–π: {response.text}")
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª—é—á–µ–π: {e}")
            
        return {'anon_key': '', 'service_key': ''}
        
    def create_database_tables(self, project: SupabaseProject, schema: Dict[str, Dict[str, str]]) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        
        if 'demo' in project.project_id.lower():
            print(f"‚úÖ Demo —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã –¥–ª—è {project.name}")
            return True
            
        # –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –∑–¥–µ—Å—å –±—É–¥–µ—Ç SQL –∑–∞–ø—Ä–æ—Å
        sql_statements = []
        
        for table_name, columns in schema.items():
            columns_sql = []
            for column_name, column_type in columns.items():
                columns_sql.append(f"  {column_name} {column_type}")
                
            create_table_sql = f"""
CREATE TABLE IF NOT EXISTS {table_name} (
{',\n'.join(columns_sql)}
);
"""
            sql_statements.append(create_table_sql)
            
        # –í—ã–ø–æ–ª–Ω—è–µ–º SQL —á–µ—Ä–µ–∑ REST API Supabase
        try:
            headers = {
                'Authorization': f'Bearer {project.service_key}',
                'Content-Type': 'application/json',
                'apikey': project.anon_key
            }
            
            for sql in sql_statements:
                response = requests.post(
                    f'{project.url}/rest/v1/rpc/exec_sql',
                    headers=headers,
                    json={'sql': sql.strip()},
                    timeout=10
                )
                
                if response.status_code != 200:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {response.text}")
                    
            print(f"‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã –≤ {project.name}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
            return False
            
    def seed_sample_data(self, project: SupabaseProject, table_name: str, data: List[Dict]) -> bool:
        """–ó–∞–ø–æ–ª–Ω—è–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏–º–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        
        if 'demo' in project.project_id.lower():
            print(f"‚úÖ Demo –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ {table_name}")
            return True
            
        try:
            headers = {
                'Authorization': f'Bearer {project.service_key}',
                'Content-Type': 'application/json',
                'apikey': project.anon_key
            }
            
            response = requests.post(
                f'{project.url}/rest/v1/{table_name}',
                headers=headers,
                json=data,
                timeout=10
            )
            
            if response.status_code in [200, 201]:
                print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ {table_name}: {len(data)} –∑–∞–ø–∏—Å–µ–π")
                return True
            else:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False

class SupabaseProjectSetup:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        self.supabase_manager = SupabaseManager()
        
    def setup_ecommerce_project(self, project_name: str) -> Optional[SupabaseProject]:
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞"""
        
        print(f"üöÄ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é Supabase –ø—Ä–æ–µ–∫—Ç –¥–ª—è: {project_name}")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç
        project = self.supabase_manager.create_project(project_name)
        if not project:
            return None
            
        # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        if not self.supabase_manager.wait_for_project_ready(project):
            return None
            
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏
        keys = self.supabase_manager.get_project_keys(project)
        project.anon_key = keys['anon_key']
        project.service_key = keys['service_key']
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É –ë–î –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞
        ecommerce_schema = {
            'products': {
                'id': 'uuid primary key default gen_random_uuid()',
                'name': 'text not null',
                'description': 'text',
                'price': 'decimal(10,2) not null',
                'image_url': 'text',
                'category': 'text',
                'stock': 'integer default 0',
                'created_at': 'timestamp default now()'
            },
            'orders': {
                'id': 'uuid primary key default gen_random_uuid()',
                'user_email': 'text not null',
                'total': 'decimal(10,2) not null',
                'status': 'text default \'pending\'',
                'created_at': 'timestamp default now()'
            },
            'order_items': {
                'id': 'uuid primary key default gen_random_uuid()',
                'order_id': 'uuid references orders(id)',
                'product_id': 'uuid references products(id)',
                'quantity': 'integer not null',
                'price': 'decimal(10,2) not null'
            }
        }
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        if not self.supabase_manager.create_database_tables(project, ecommerce_schema):
            return None
            
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
        sample_products = [
            {
                'name': '–°—Ç–∏–ª—å–Ω–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞',
                'description': '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ö–ª–æ–ø–∫–æ–≤–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞',
                'price': 1500.00,
                'category': '–û–¥–µ–∂–¥–∞',
                'stock': 10,
                'image_url': 'https://images.unsplash.com/photo-1521572163474-6864f9cf17ab'
            },
            {
                'name': '–î–∂–∏–Ω—Å—ã –ø—Ä–µ–º–∏—É–º',
                'description': '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –¥–∂–∏–Ω—Å—ã –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞',
                'price': 3500.00,
                'category': '–û–¥–µ–∂–¥–∞',
                'stock': 5,
                'image_url': 'https://images.unsplash.com/photo-1542272604-787c3835535d'
            },
            {
                'name': '–ö—Ä–æ—Å—Å–æ–≤–∫–∏ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ',
                'description': '–£–¥–æ–±–Ω—ã–µ –∫—Ä–æ—Å—Å–æ–≤–∫–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏',
                'price': 5000.00,
                'category': '–û–±—É–≤—å',
                'stock': 8,
                'image_url': 'https://images.unsplash.com/photo-1549298916-b41d501d3772'
            }
        ]
        
        self.supabase_manager.seed_sample_data(project, 'products', sample_products)
        
        print(f"‚úÖ Supabase –ø—Ä–æ–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {project.url}")
        return project
        
def test_supabase_integration():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Supabase"""
    setup = SupabaseProjectSetup()
    
    project = setup.setup_ecommerce_project("Test Ecommerce Store")
    if project:
        print(f"üéâ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω: {project.url}")
        print(f"üîë Anon key: {project.anon_key[:20]}...")
        print(f"üîë Service key: {project.service_key[:20]}...")

if __name__ == "__main__":
    test_supabase_integration()