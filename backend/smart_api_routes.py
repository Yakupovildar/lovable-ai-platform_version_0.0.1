"""
–£–ª—É—á—à–µ–Ω–Ω—ã–µ API —Ä–æ—É—Ç—ã —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —É–º–Ω—ã—Ö AI —Å–µ—Ä–≤–∏—Å–æ–≤
"""

from flask import Flask, request, jsonify, session, send_file
import json
import uuid
import os
import zipfile
import time
from datetime import datetime
from smart_ai_generator import SmartAIGenerator
from intelligent_chat import IntelligentChat

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–º–Ω—ã—Ö AI —Å–µ—Ä–≤–∏—Å–æ–≤
smart_generator = SmartAIGenerator()
intelligent_chat = IntelligentChat()

def register_smart_routes(app, login_required, monitor_performance, logger, executor, 
                         get_user_by_id, update_user_requests, save_chat_message, 
                         save_user_project, get_cache_key, get_from_cache, set_cache, 
                         clear_user_cache):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–µ API —Ä–æ—É—Ç—ã"""
    
    @app.route('/api/smart-chat', methods=['POST'])
    @login_required
    @monitor_performance
    def smart_chat():
        """–£–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞ —Å –Ω–æ–≤—ã–º AI"""
        data = request.json
        message = data.get('message', '')
        chat_session_id = data.get('session_id', str(uuid.uuid4()))
        
        try:
            user_id = session['user_id']
            
            # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_cache_key = get_cache_key("user", user_id)
            user = get_from_cache(user_cache_key)
            if not user:
                user = get_user_by_id(user_id)
                if not user:
                    return jsonify({"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404
                set_cache(user_cache_key, user, ttl=60)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
            requests_used = user[5]
            requests_limit = user[6]
            
            if requests_used >= requests_limit and user[4] == 'free':
                return jsonify({
                    "type": "limit_exceeded",
                    "message": "‚ö° –õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω! –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã.",
                    "requests_used": requests_used,
                    "requests_limit": requests_limit,
                    "show_subscription": True,
                    "suggestions": intelligent_chat.get_suggestions(f"chat_{user_id}_{chat_session_id}")
                }), 429
            
            print(f"üß† –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —É–º–Ω—ã–π —á–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {message[:50]}...")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —É–º–Ω—ã–π —á–∞—Ç
            chat_result = intelligent_chat.chat(
                session_id=f"chat_{user_id}_{chat_session_id}",
                user_message=message,
                preferred_ai='auto'  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π AI
            )
            
            ai_response = chat_result['response']
            intent_analysis = chat_result['intent_analysis']
            
            print(f"üéØ –ù–∞–º–µ—Ä–µ–Ω–∏–µ: {intent_analysis['intent']}, AI: {chat_result['ai_provider']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç
            project_result = None
            if intent_analysis['intent'] == 'create_project' and any(word in message.lower() for word in ['—Å–æ–∑–¥–∞–π', '—Å–¥–µ–ª–∞–π', '–ø–æ—Å—Ç—Ä–æ–π']):
                try:
                    print("üöÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞, –≥–µ–Ω–µ—Ä–∏—Ä—É—é...")
                    project_result = smart_generator.generate_project(message, 'auto')
                    
                    if project_result.success:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–µ–∫—Ç
                        project_id = str(uuid.uuid4())
                        project_path = f"projects/{project_id}"
                        os.makedirs(project_path, exist_ok=True)
                        
                        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
                        for file_obj in project_result.files:
                            file_path = os.path.join(project_path, file_obj.name)
                            with open(file_path, 'w', encoding='utf-8') as f:
                                f.write(file_obj.content)
                        
                        # –°–æ–∑–¥–∞–µ–º ZIP –∞—Ä—Ö–∏–≤
                        zip_path = f"projects/{project_id}.zip"
                        with zipfile.ZipFile(zip_path, 'w') as zipf:
                            for file_obj in project_result.files:
                                zipf.writestr(file_obj.name, file_obj.content)
                        
                        ai_response += f"\n\nüéâ **–ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤!** –Ø —Å–æ–∑–¥–∞–ª {project_result.project_type} —Å {len(project_result.files)} —Ñ–∞–π–ª–∞–º–∏.\n\n"
                        ai_response += f"üìÅ **–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞:** {', '.join(project_result.structure)}\n\n"
                        ai_response += f"üìã **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:** {project_result.instructions}\n\n"
                        ai_response += f"üíæ –ü—Ä–æ–µ–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å ID: {project_id}"
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ –≤ –±–∞–∑—É
                        save_user_project(user_id, project_id, message, project_result.project_type, json.dumps({
                            'files': [{'name': f.name, 'type': f.type} for f in project_result.files],
                            'structure': project_result.structure,
                            'instructions': project_result.instructions
                        }))
                        
                        print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç {project_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å {len(project_result.files)} —Ñ–∞–π–ª–∞–º–∏")
                        
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: {e}")
                    ai_response += "\n\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –Ω–æ —è –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –∫–æ–¥–æ–º!"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
            if user[4] == 'free':
                executor.submit(update_user_requests, user_id, 1)
                requests_used += 1
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
            executor.submit(save_chat_message, user_id, chat_session_id, message, ai_response, 'smart_chat')
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            clear_user_cache(user_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response_data = {
                "type": "success",
                "message": ai_response,
                "intent": intent_analysis['intent'],
                "project_type": intent_analysis.get('project_type', 'webapp'),
                "ai_provider": chat_result['ai_provider'],
                "suggestions": intelligent_chat.get_suggestions(f"chat_{user_id}_{chat_session_id}"),
                "requests_left": max(0, requests_limit - requests_used),
                "requests_used": requests_used,
                "requests_limit": requests_limit,
                "session_id": chat_session_id,
                "timestamp": chat_result['timestamp']
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ –µ—Å–ª–∏ –±—ã–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω
            if project_result and project_result.success:
                response_data["project_generated"] = True
                response_data["project_id"] = project_id
                response_data["project_files"] = len(project_result.files)
                response_data["download_url"] = f"/api/download-project/{project_id}"
            
            return jsonify(response_data)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —É–º–Ω–æ–º —á–∞—Ç–µ: {e}")
            return jsonify({
                "type": "error",
                "message": "ü§ñ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É—é –ø–æ–º–æ—á—å –ø–æ-–¥—Ä—É–≥–æ–º—É!",
                "suggestions": ["–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ –∫–æ–¥–µ", "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å"],
                "error_details": str(e)
            })

    @app.route('/api/smart-generate-project', methods=['POST'])
    @login_required
    @monitor_performance
    def smart_generate_project():
        """–£–º–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"""
        data = request.json
        description = data.get('description', '')
        project_name = data.get('project_name', '–ú–æ–π –ø—Ä–æ–µ–∫—Ç')
        preferred_ai = data.get('ai_provider', 'auto')
        
        try:
            user_id = session['user_id']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ª–∏–º–∏—Ç—ã
            user = get_user_by_id(user_id)
            if not user:
                return jsonify({"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404
            
            requests_used = user[5]
            requests_limit = user[6]
            
            if requests_used >= requests_limit and user[4] == 'free':
                return jsonify({
                    "success": False,
                    "error": "limit_exceeded",
                    "message": "‚ö° –õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω!"
                }), 429
            
            print(f"üöÄ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–æ–µ–∫—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {description[:50]}...")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç —Å –ø–æ–º–æ—â—å—é —É–º–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
            project_result = smart_generator.generate_project(description, preferred_ai)
            
            if not project_result.success:
                return jsonify({
                    "success": False,
                    "error": "generation_failed",
                    "message": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–ø—Ä–æ—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ."
                })
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–µ–∫—Ç
            project_id = str(uuid.uuid4())
            project_path = f"projects/{project_id}"
            os.makedirs(project_path, exist_ok=True)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
            saved_files = []
            for file_obj in project_result.files:
                file_path = os.path.join(project_path, file_obj.name)
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(file_obj.content)
                saved_files.append({
                    'name': file_obj.name,
                    'type': file_obj.type,
                    'size': len(file_obj.content)
                })
            
            # –°–æ–∑–¥–∞–µ–º ZIP –∞—Ä—Ö–∏–≤
            zip_path = f"projects/{project_id}.zip"
            with zipfile.ZipFile(zip_path, 'w') as zipf:
                for file_obj in project_result.files:
                    zipf.writestr(file_obj.name, file_obj.content)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            save_user_project(user_id, project_id, description, project_result.project_type, json.dumps({
                'files': saved_files,
                'structure': project_result.structure,
                'instructions': project_result.instructions
            }))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
            if user[4] == 'free':
                update_user_requests(user_id, 1)
                requests_used += 1
            
            print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç {project_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {len(project_result.files)} —Ñ–∞–π–ª–æ–≤")
            
            return jsonify({
                "success": True,
                "project_id": project_id,
                "project_name": project_name,
                "project_type": project_result.project_type,
                "files_count": len(project_result.files),
                "structure": project_result.structure,
                "instructions": project_result.instructions,
                "download_url": f"/api/download-project/{project_id}",
                "files": saved_files,
                "requests_left": max(0, requests_limit - requests_used),
                "message": f"–ü—Ä–æ–µ–∫—Ç '{project_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!"
            })
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: {e}")
            return jsonify({
                "success": False,
                "error": "generation_error",
                "message": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞",
                "error_details": str(e)
            })

    @app.route('/api/download-project/<project_id>')
    @login_required
    def download_smart_project(project_id):
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            zip_path = f"projects/{project_id}.zip"
            if os.path.exists(zip_path):
                return send_file(
                    zip_path,
                    as_attachment=True,
                    download_name=f"project_{project_id}.zip",
                    mimetype='application/zip'
                )
            else:
                return jsonify({"error": "–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ {project_id}: {e}")
            return jsonify({"error": "–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"}), 500

    @app.route('/api/chat-suggestions/<session_id>')
    @login_required
    def get_chat_suggestions(session_id):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞"""
        try:
            user_id = session['user_id']
            chat_session_id = f"chat_{user_id}_{session_id}"
            suggestions = intelligent_chat.get_suggestions(chat_session_id)
            
            return jsonify({
                "success": True,
                "suggestions": suggestions,
                "session_id": session_id
            })
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {e}")
            return jsonify({
                "success": False,
                "suggestions": [
                    "–°–æ–∑–¥–∞–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∞–π—Ç",
                    "–°–¥–µ–ª–∞–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∏–≥—Ä—É", 
                    "–ü–æ–º–æ–≥–∏ —Å –¥–∏–∑–∞–π–Ω–æ–º",
                    "–û–±—ä—è—Å–Ω–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é"
                ]
            })

    @app.route('/api/analyze-request', methods=['POST'])
    @login_required
    def analyze_user_request():
        """–ê–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞"""
        data = request.json
        message = data.get('message', '')
        
        try:
            analysis = intelligent_chat.analyze_user_intent(message)
            
            return jsonify({
                "success": True,
                "analysis": analysis,
                "estimated_complexity": analysis.get('complexity', 'medium'),
                "suggested_approach": "smart_generation" if analysis['intent'] == 'create_project' else "chat_assistance"
            })
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return jsonify({
                "success": False,
                "error": str(e)
            })

    @app.route('/api/ai-status')
    def get_ai_status():
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ AI —Å–µ—Ä–≤–∏—Å–æ–≤"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ AI —Å–µ—Ä–≤–∏—Å—ã
            from ai_config import AIConfig
            ai_config = AIConfig()
            
            return jsonify({
                "ai_services": {
                    "gigachat": {
                        "available": ai_config.gigachat_enabled,
                        "model": "GigaChat-Pro" if ai_config.gigachat_enabled else None
                    },
                    "yandex": {
                        "available": ai_config.yandex_enabled,
                        "model": "YandexGPT-Lite" if ai_config.yandex_enabled else None
                    },
                    "localai": {
                        "available": ai_config.localai_enabled,
                        "model": "LocalAI" if ai_config.localai_enabled else None
                    }
                },
                "preferred_ai": ai_config.default_ai,
                "smart_features": {
                    "project_generation": True,
                    "code_analysis": True,
                    "intent_recognition": True,
                    "personalized_suggestions": True
                }
            })
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ AI: {e}")
            return jsonify({"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å AI"})

    print("‚úÖ –£–º–Ω—ã–µ API —Ä–æ—É—Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    return app