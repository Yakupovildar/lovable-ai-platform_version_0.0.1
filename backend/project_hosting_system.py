#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ —Ö–æ—Å—Ç–∏–Ω–≥–∞ –∏ –ø—Ä–µ–≤—å—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
–°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ URL, QR –∫–æ–¥—ã, –æ–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ
"""

import os
import json
import uuid
import qrcode
import io
import base64
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
from pathlib import Path
import sqlite3
import hashlib

# Database configuration - –ï–î–ò–ù–ê–Ø –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
DB_PATH = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'users.db')

class ProjectHostingSystem:
    """–°–∏—Å—Ç–µ–º–∞ –¥–ª—è —Ö–æ—Å—Ç–∏–Ω–≥–∞ –∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"""
    
    def __init__(self):
        self.projects_dir = Path("hosted_projects")
        self.projects_dir.mkdir(exist_ok=True)
        self.base_url = os.getenv('BASE_URL', 'http://127.0.0.1:5002')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ä–µ–¥—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        self.is_railway = os.getenv('RAILWAY_ENVIRONMENT_ID') is not None
        self.is_production = os.getenv('NODE_ENV') == 'production' or self.is_railway
        
        if self.is_railway:
            print("üöÇ Running on Railway - using optimized configuration")
        
        self.init_database()
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö–æ—Å—Ç–∏–Ω–≥–∞"""
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS hosted_projects (
                project_id TEXT PRIMARY KEY,
                user_id TEXT NOT NULL,
                project_name TEXT NOT NULL,
                project_type TEXT NOT NULL,
                files TEXT NOT NULL,
                created_at REAL NOT NULL,
                last_accessed REAL NOT NULL,
                access_count INTEGER DEFAULT 0,
                is_public BOOLEAN DEFAULT 1,
                custom_domain TEXT NULL,
                qr_code TEXT NULL,
                thumbnail TEXT NULL
            )
        ''')
        
        conn.commit()
        conn.close()
    
    def host_project(self, project_data: Dict[str, Any], user_id: str) -> Dict[str, Any]:
        """–†–∞–∑–º–µ—â–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç –≤ –æ–±–ª–∞–∫–µ –∏ —Å–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π URL"""
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
        project_id = self.generate_project_id()
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
        project_path = self.projects_dir / project_id
        project_path.mkdir(exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
        files = project_data.get('files', {})
        self.save_project_files(project_path, files)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR –∫–æ–¥
        qr_code_data = self.generate_qr_code(project_id)
        
        # –°–æ–∑–¥–∞–µ–º thumbnail
        try:
            if isinstance(files, dict):
                thumbnail_data = self.generate_thumbnail(files.get('index.html', ''))
            elif isinstance(files, list):
                # –ò—â–µ–º index.html –≤ —Å–ø–∏—Å–∫–µ —Ñ–∞–π–ª–æ–≤
                index_html_content = ''
                for item in files:
                    if isinstance(item, dict):
                        if item.get('name') == 'index.html' or item.get('filename') == 'index.html':
                            index_html_content = item.get('content', '')
                            break
                    elif isinstance(item, str) and 'index.html' in item:
                        index_html_content = item
                        break
                thumbnail_data = self.generate_thumbnail(index_html_content)
            else:
                print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø files –¥–ª—è thumbnail: {type(files)}")
                thumbnail_data = self.generate_thumbnail('')
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è thumbnail: {e}")
            thumbnail_data = self.generate_thumbnail('')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º –¥–ª—è Railway
        max_retries = 3
        for attempt in range(max_retries):
            try:
                conn = sqlite3.connect(DB_PATH)
                cursor = conn.cursor()
                
                # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS hosted_projects (
                        project_id TEXT PRIMARY KEY,
                        user_id TEXT NOT NULL,
                        project_name TEXT NOT NULL,
                        project_type TEXT NOT NULL,
                        files TEXT NOT NULL,
                        created_at REAL NOT NULL,
                        last_accessed REAL NOT NULL,
                        access_count INTEGER DEFAULT 0,
                        is_public BOOLEAN DEFAULT 1,
                        custom_domain TEXT NULL,
                        qr_code TEXT NULL,
                        thumbnail TEXT NULL
                    )
                ''')
                
                cursor.execute('''
                    INSERT OR REPLACE INTO hosted_projects 
                    (project_id, user_id, project_name, project_type, files, created_at, 
                     last_accessed, qr_code, thumbnail)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
                ''', (
                    project_id,
                    user_id,
                    project_data.get('name', 'Unnamed Project'),
                    project_data.get('type', 'web_app'),
                    json.dumps(files),
                    datetime.now().timestamp(),
                    datetime.now().timestamp(),
                    qr_code_data,
                    thumbnail_data
                ))
                
                conn.commit()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ–µ–∫—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è
                cursor.execute('SELECT project_id FROM hosted_projects WHERE project_id = ?', (project_id,))
                if cursor.fetchone():
                    print(f"‚úÖ Project {project_id} successfully saved to database (attempt {attempt + 1})")
                    conn.close()
                    break
                else:
                    raise Exception("Project not found after insert")
                    
            except Exception as e:
                print(f"‚ö†Ô∏è Database save attempt {attempt + 1} failed: {e}")
                if 'conn' in locals():
                    conn.close()
                if attempt == max_retries - 1:
                    print(f"‚ùå Failed to save project {project_id} after {max_retries} attempts")
                    # –ù–∞ Railway –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –µ—Å–ª–∏ –±–∞–∑–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞—Å—å
                    # —Ç–∞–∫ –∫–∞–∫ –µ—Å—Ç—å fallback –ø—Ä–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏
                else:
                    import time
                    time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ retry
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ
        return {
            'project_id': project_id,
            'live_url': f"{self.base_url}/app/{project_id}",
            'preview_url': f"{self.base_url}/preview/{project_id}",
            'qr_code': qr_code_data,
            'thumbnail': thumbnail_data,
            'files_hosted': len(files),
            'hosting_status': 'active'
        }
    
    def generate_project_id(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —á–∏—Ç–∞–µ–º—ã–π ID –ø—Ä–æ–µ–∫—Ç–∞"""
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
        timestamp = str(int(datetime.now().timestamp()))[-6:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 6 —Ü–∏—Ñ—Ä –≤—Ä–µ–º–µ–Ω–∏
        random_part = str(uuid.uuid4())[:6]  # –ü–µ—Ä–≤—ã–µ 6 —Å–∏–º–≤–æ–ª–æ–≤ UUID
        
        return f"{timestamp}-{random_part}"
    
    def save_project_files(self, project_path: Path, files: Dict[str, str]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –¥–∏—Å–∫"""
        try:
            if isinstance(files, dict):
                for filename, content in files.items():
                    file_path = project_path / filename

                    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    file_path.parent.mkdir(parents=True, exist_ok=True)

                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
                    with open(file_path, 'w', encoding='utf-8') as f:
                        f.write(content)
            else:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: files –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º: {type(files)}")
                print(f"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {files}")
                # –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫, –ø–æ–ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
                if isinstance(files, list):
                    for i, item in enumerate(files):
                        if isinstance(item, dict) and 'name' in item and 'content' in item:
                            filename = item['name']
                            content = item['content']
                            file_path = project_path / filename
                            file_path.parent.mkdir(parents=True, exist_ok=True)
                            with open(file_path, 'w', encoding='utf-8') as f:
                                f.write(content)
                        else:
                            print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –≤ –ø–æ–∑–∏—Ü–∏–∏ {i}: {item}")
        except AttributeError as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ files.items(): {e}")
            print(f"‚ö†Ô∏è –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(files)}")
            print(f"‚ö†Ô∏è –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {files}")
            return

    def _save_single_file(self, project_path: Path, filename: str, content: str):
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        file_path = project_path / filename

        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        file_path.parent.mkdir(parents=True, exist_ok=True)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)
    
    def generate_qr_code(self, project_id: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç QR –∫–æ–¥ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        app_url = f"{self.base_url}/app/{project_id}"
        
        qr = qrcode.QRCode(
            version=1,
            error_correction=qrcode.constants.ERROR_CORRECT_L,
            box_size=10,
            border=4,
        )
        
        qr.add_data(app_url)
        qr.make(fit=True)
        
        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ QR –∫–æ–¥–∞
        img = qr.make_image(fill_color="black", back_color="white")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64 –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
        buffer = io.BytesIO()
        img.save(buffer, format='PNG')
        
        qr_code_base64 = base64.b64encode(buffer.getvalue()).decode('utf-8')
        
        return f"data:image/png;base64,{qr_code_base64}"
    
    def generate_thumbnail(self, html_content: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç thumbnail –ø—Ä–µ–≤—å—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        # –ü—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è thumbnail –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã headless –±—Ä–∞—É–∑–µ—Ä
        
        if 'game' in html_content.lower() or 'canvas' in html_content.lower():
            thumbnail_type = 'üéÆ'
        elif 'shop' in html_content.lower() or 'store' in html_content.lower():
            thumbnail_type = 'üõí'
        elif 'portfolio' in html_content.lower():
            thumbnail_type = 'üíº'
        elif 'blog' in html_content.lower():
            thumbnail_type = 'üìù'
        elif 'dashboard' in html_content.lower():
            thumbnail_type = 'üìä'
        else:
            thumbnail_type = 'üåê'
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π SVG thumbnail
        svg_thumbnail = f'''
        <svg width="300" height="200" xmlns="http://www.w3.org/2000/svg">
            <defs>
                <linearGradient id="grad1" x1="0%" y1="0%" x2="100%" y2="100%">
                    <stop offset="0%" style="stop-color:#667eea;stop-opacity:1" />
                    <stop offset="100%" style="stop-color:#764ba2;stop-opacity:1" />
                </linearGradient>
            </defs>
            <rect width="300" height="200" fill="url(#grad1)" rx="10"/>
            <text x="150" y="100" font-family="Arial" font-size="48" fill="white" 
                  text-anchor="middle" dominant-baseline="central">{thumbnail_type}</text>
            <text x="150" y="160" font-family="Arial" font-size="14" fill="white" 
                  text-anchor="middle">AI Generated App</text>
        </svg>
        '''
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º SVG –≤ base64
        thumbnail_base64 = base64.b64encode(svg_thumbnail.encode('utf-8')).decode('utf-8')
        
        return f"data:image/svg+xml;base64,{thumbnail_base64}"
    
    def get_project_stats(self, project_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–µ–∫—Ç–∞"""
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT project_name, project_type, created_at, last_accessed, 
                   access_count, is_public
            FROM hosted_projects 
            WHERE project_id = ?
        ''', (project_id,))
        
        result = cursor.fetchone()
        conn.close()
        
        if result:
            return {
                'project_name': result[0],
                'project_type': result[1],
                'created_at': datetime.fromtimestamp(result[2]),
                'last_accessed': datetime.fromtimestamp(result[3]),
                'access_count': result[4],
                'is_public': bool(result[5]),
                'age_days': (datetime.now() - datetime.fromtimestamp(result[2])).days
            }
        
        return None
    
    def update_access_stats(self, project_id: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ–µ–∫—Ç—É"""
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        cursor.execute('''
            UPDATE hosted_projects 
            SET last_accessed = ?, access_count = access_count + 1
            WHERE project_id = ?
        ''', (datetime.now().timestamp(), project_id))
        
        conn.commit()
        conn.close()
    
    def get_user_projects(self, user_id: str) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT project_id, project_name, project_type, created_at, 
                   access_count, thumbnail
            FROM hosted_projects 
            WHERE user_id = ?
            ORDER BY created_at DESC
        ''', (user_id,))
        
        results = cursor.fetchall()
        conn.close()
        
        projects = []
        for result in results:
            projects.append({
                'project_id': result[0],
                'project_name': result[1],
                'project_type': result[2],
                'created_at': datetime.fromtimestamp(result[3]).strftime('%d.%m.%Y %H:%M'),
                'access_count': result[4],
                'thumbnail': result[5],
                'live_url': f"{self.base_url}/app/{result[0]}",
                'preview_url': f"{self.base_url}/preview/{result[0]}"
            })
        
        return projects
    
    def delete_project(self, project_id: str, user_id: str) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –ø—Ä–æ–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT user_id FROM hosted_projects WHERE project_id = ?
        ''', (project_id,))
        
        result = cursor.fetchone()
        
        if not result or result[0] != user_id:
            conn.close()
            return False
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        cursor.execute('''
            DELETE FROM hosted_projects WHERE project_id = ?
        ''', (project_id,))
        
        conn.commit()
        conn.close()
        
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å –¥–∏—Å–∫–∞
        project_path = self.projects_dir / project_id
        if project_path.exists():
            import shutil
            shutil.rmtree(project_path)
        
        return True
    
    def cleanup_old_projects(self, days_old: int = 30):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤"""
        cutoff_time = datetime.now() - timedelta(days=days_old)
        
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        # –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
        cursor.execute('''
            SELECT project_id FROM hosted_projects 
            WHERE last_accessed < ? AND access_count < 5
        ''', (cutoff_time.timestamp(),))
        
        old_projects = cursor.fetchall()
        
        for (project_id,) in old_projects:
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã
            project_path = self.projects_dir / project_id
            if project_path.exists():
                import shutil
                shutil.rmtree(project_path)
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã
            cursor.execute('''
                DELETE FROM hosted_projects WHERE project_id = ?
            ''', (project_id,))
        
        conn.commit()
        conn.close()
        
        return len(old_projects)

class ProjectPreviewGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–µ–≤—å—é –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ —á–∞—Ç–µ"""
    
    def __init__(self, hosting_system: ProjectHostingSystem):
        self.hosting = hosting_system
    
    def generate_chat_preview(self, project_data: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML –ø—Ä–µ–≤—å—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —á–∞—Ç–µ"""
        
        project_id = project_data.get('id', project_data.get('project_id', 'unknown'))
        project_name = project_data.get('name', 'Unnamed Project')
        live_url = project_data.get('hosted_url', project_data.get('live_url', '#'))
        
        # Debugging: Log the project_data to see what's being passed
        print(f"üîç Preview generation - project_data keys: {list(project_data.keys())}")
        print(f"üîç Preview generation - hosted_url: {project_data.get('hosted_url', 'NOT_FOUND')}")
        print(f"üîç Preview generation - live_url: {project_data.get('live_url', 'NOT_FOUND')}")
        print(f"üîç Preview generation - final live_url: {live_url}")
        
        thumbnail = project_data.get('thumbnail', '')
        
        preview_html = f'''
        <div class="project-preview-card" style="
            background: #ffffff;
            border: 1px solid #e5e7eb;
            border-radius: 12px;
            padding: 16px;
            margin: 16px 0;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
            max-width: 500px;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            color: #1f2937;
        ">
            <div style="display: flex; align-items: center; gap: 12px; margin-bottom: 12px;">
                <div style="
                    width: 48px; 
                    height: 48px; 
                    border-radius: 8px;
                    background: linear-gradient(135deg, #8b5cf6, #06b6d4);
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    font-size: 20px;
                ">üéâ</div>
                <div>
                    <h3 style="color: #1f2937; margin: 0; font-size: 16px; font-weight: 600;">
                        {project_name}
                    </h3>
                    <p style="color: #6b7280; margin: 4px 0 0 0; font-size: 14px;">
                        –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!
                    </p>
                </div>
            </div>
            
            <div class="preview-actions" style="
                display: flex; 
                gap: 8px; 
                flex-wrap: wrap;
                margin-top: 12px;
            ">
                <a href="{live_url}" target="_blank" style="
                    background: linear-gradient(135deg, #8b5cf6, #06b6d4);
                    color: white;
                    padding: 10px 20px;
                    border-radius: 25px;
                    text-decoration: none;
                    font-weight: bold;
                    font-size: 14px;
                    display: inline-flex;
                    align-items: center;
                    gap: 5px;
                    transition: transform 0.2s ease;
                ">
                    üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                </a>
                
                <button onclick="showQRCode('{project_id}')" style="
                    background: #f1f5f9;
                    color: #374151;
                    border: 1px solid #d1d5db;
                    padding: 8px 12px;
                    border-radius: 6px;
                    cursor: pointer;
                    font-size: 14px;
                    display: inline-flex;
                    align-items: center;
                    gap: 5px;
                ">
                    üì± QR –∫–æ–¥
                </button>
                
                <button onclick="shareProject('{live_url}')" style="
                    background: #f1f5f9;
                    color: #374151;
                    border: 1px solid #d1d5db;
                    padding: 8px 12px;
                    border-radius: 6px;
                    cursor: pointer;
                    font-size: 14px;
                    display: inline-flex;
                    align-items: center;
                    gap: 5px;
                ">
                    üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è
                </button>
            </div>
            
            <div style="
                margin-top: 12px;
                padding-top: 12px;
                border-top: 1px solid #e5e7eb;
                font-size: 12px;
                color: #9ca3af;
            ">
                üí° –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–æ –≤ –æ–±–ª–∞–∫–µ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ
            </div>
        </div>
        '''
        
        return preview_html
    
    def generate_mobile_qr_modal(self, project_id: str, qr_code: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å QR –∫–æ–¥–æ–º"""
        
        return f'''
        <div id="qr-modal-{project_id}" class="qr-modal" style="
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            z-index: 10000;
            display: flex;
            align-items: center;
            justify-content: center;
        ">
            <div style="
                background: #ffffff;
                padding: 30px;
                border-radius: 15px;
                text-align: center;
                max-width: 300px;
                box-shadow: 0 20px 40px rgba(0, 0, 0, 0.5);
            ">
                <h3 style="color: #333; margin-bottom: 20px;">
                    üì± –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR –∫–æ–¥
                </h3>
                
                <img src="{qr_code}" alt="QR Code" style="
                    width: 200px;
                    height: 200px;
                    margin-bottom: 20px;
                    border: 1px solid #ddd;
                    border-radius: 10px;
                ">
                
                <p style="color: #666; font-size: 14px; margin-bottom: 20px;">
                    –û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –Ω–∞–≤–µ–¥–∏—Ç–µ –Ω–∞ –∫–æ–¥
                </p>
                
                <button onclick="closeQRModal('{project_id}')" style="
                    background: #333;
                    color: white;
                    border: none;
                    padding: 10px 20px;
                    border-radius: 25px;
                    cursor: pointer;
                    font-size: 14px;
                ">
                    –ó–∞–∫—Ä—ã—Ç—å
                </button>
            </div>
        </div>
        '''