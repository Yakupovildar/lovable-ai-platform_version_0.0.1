#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–∞—Å—Ç–æ—è—â–∏—Ö full-stack –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
–°–æ–∑–¥–∞–µ—Ç React/Next.js –ø—Ä–æ–µ–∫—Ç—ã —Å backend, –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º
"""

import os
import json
import uuid
import zipfile
import tempfile
import shutil
from typing import Dict, List, Any, Optional
from dataclasses import dataclass
from datetime import datetime
import subprocess
import requests

@dataclass
class FullStackProject:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ full-stack –ø—Ä–æ–µ–∫—Ç–∞"""
    project_id: str
    name: str
    type: str
    framework: str  # 'nextjs', 'react', 'vue'
    description: str
    frontend_files: Dict[str, str]
    backend_files: Dict[str, str]
    database_schema: Dict[str, Any]
    env_variables: Dict[str, str]
    package_json: Dict[str, Any]
    deployment_config: Dict[str, Any]
    created_at: str
    github_repo: Optional[str] = None
    deployed_url: Optional[str] = None

class FullStackGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã—Ö full-stack –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"""
    
    def __init__(self):
        self.projects_dir = os.path.join(os.path.dirname(__file__), 'fullstack_projects')
        self.ensure_projects_dir()
        
        # –®–∞–±–ª–æ–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤
        self.project_templates = {
            'ecommerce': self._generate_ecommerce_project,
            'blog': self._generate_universal_project,
            'dashboard': self._generate_universal_project,
            'landing': self._generate_universal_project,
            'portfolio': self._generate_universal_project,
            'todo': self._generate_universal_project,
            'chat': self._generate_universal_project,
            'crm': self._generate_universal_project,
            'fitness': self._generate_universal_project,
            'game': self._generate_universal_project
        }
        
    def ensure_projects_dir(self):
        """–°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
        if not os.path.exists(self.projects_dir):
            os.makedirs(self.projects_dir, exist_ok=True)
            
    def generate_fullstack_project(self, description: str, project_name: str, project_type: str = 'auto') -> FullStackProject:
        """–ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ full-stack –ø—Ä–æ–µ–∫—Ç–∞"""
        
        print(f"üöÄ –°–æ–∑–¥–∞—é full-stack –ø—Ä–æ–µ–∫—Ç: {project_name}")
        print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}")
        print(f"üéØ –¢–∏–ø: {project_type}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞ –µ—Å–ª–∏ auto
        if project_type == 'auto':
            project_type = self._detect_project_type(description)
            
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –ø—Ä–æ–µ–∫—Ç–∞
        project_id = f"fs_{uuid.uuid4().hex[:12]}"
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞
        framework = self._select_framework(project_type, description)
        
        print(f"üîß –§—Ä–µ–π–º–≤–æ—Ä–∫: {framework}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç
        if project_type in self.project_templates:
            project = self.project_templates[project_type](
                project_id, project_name, description, framework
            )
        else:
            # Fallback –∫ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–º—É —à–∞–±–ª–æ–Ω—É
            project = self._generate_universal_project(
                project_id, project_name, description, framework, project_type
            )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–µ–∫—Ç –Ω–∞ –¥–∏—Å–∫
        self._save_project_to_disk(project)
        
        print(f"‚úÖ Full-stack –ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω: {project.project_id}")
        return project
        
    def _detect_project_type(self, description: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é"""
        description_lower = description.lower()
        
        type_keywords = {
            'ecommerce': ['–º–∞–≥–∞–∑–∏–Ω', 'shop', '–∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω', '–ø—Ä–æ–¥–∞–∂–∞', '—Ç–æ–≤–∞—Ä—ã', '–∫–æ—Ä–∑–∏–Ω–∞', '–∑–∞–∫–∞–∑'],
            'blog': ['–±–ª–æ–≥', 'blog', '—Å—Ç–∞—Ç—å–∏', '–Ω–æ–≤–æ—Å—Ç–∏', '–ø—É–±–ª–∏–∫–∞—Ü–∏–∏', 'cms'],
            'dashboard': ['–∞–¥–º–∏–Ω–∫–∞', 'dashboard', '–ø–∞–Ω–µ–ª—å', '–∞–Ω–∞–ª–∏—Ç–∏–∫–∞', '—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'],
            'landing': ['–ª–µ–Ω–¥–∏–Ω–≥', 'landing', '—Å–∞–π—Ç-–≤–∏–∑–∏—Ç–∫–∞', '–ø—Ä–æ–º–æ', '–æ–¥–Ω–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–∏–∫'],
            'portfolio': ['–ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ', 'portfolio', '—Ä–µ–∑—é–º–µ', '–≥–∞–ª–µ—Ä–µ—è —Ä–∞–±–æ—Ç'],
            'todo': ['todo', '–∑–∞–¥–∞—á–∏', '–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫', '—Å–ø–∏—Å–æ–∫ –¥–µ–ª'],
            'chat': ['—á–∞—Ç', '–º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä', '–æ–±—â–µ–Ω–∏–µ', '—Å–æ–æ–±—â–µ–Ω–∏—è'],
            'crm': ['crm', '–∫–ª–∏–µ–Ω—Ç—ã', '–ø—Ä–æ–¥–∞–∂–∏', '–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç'],
            'fitness': ['—Ñ–∏—Ç–Ω–µ—Å', '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏', '—Å–ø–æ—Ä—Ç', '–∑–¥–æ—Ä–æ–≤—å–µ'],
            'game': ['–∏–≥—Ä–∞', 'game', '—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ', '–≥–µ–π–º–ø–ª–µ–π']
        }
        
        for project_type, keywords in type_keywords.items():
            if any(keyword in description_lower for keyword in keywords):
                return project_type
                
        return 'landing'  # default
        
    def _select_framework(self, project_type: str, description: str) -> str:
        """–í—ã–±–∏—Ä–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞"""
        
        # –î–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Ä–∞–∑–Ω—ã–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏
        framework_mapping = {
            'ecommerce': 'nextjs',  # –ù—É–∂–µ–Ω SSR –∏ API routes
            'blog': 'nextjs',       # SEO –≤–∞–∂–µ–Ω
            'dashboard': 'react',   # SPA –ø–æ–¥—Ö–æ–¥–∏—Ç
            'landing': 'nextjs',    # SEO –∫—Ä–∏—Ç–∏—á–µ–Ω
            'portfolio': 'nextjs',  # SEO –≤–∞–∂–µ–Ω
            'todo': 'react',        # –ü—Ä–æ—Å—Ç–æ–µ SPA
            'chat': 'nextjs',       # –ù—É–∂–µ–Ω real-time
            'crm': 'nextjs',        # –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
            'fitness': 'react',     # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            'game': 'react'         # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        }
        
        return framework_mapping.get(project_type, 'nextjs')
        
    def _generate_ecommerce_project(self, project_id: str, name: str, description: str, framework: str) -> FullStackProject:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω"""
        
        # Frontend —Ñ–∞–π–ª—ã
        frontend_files = {
            'pages/index.js': self._generate_ecommerce_home_page(name, description),
            'pages/products/[id].js': self._generate_product_page(),
            'pages/cart.js': self._generate_cart_page(),
            'pages/checkout.js': self._generate_checkout_page(),
            'pages/api/products.js': self._generate_products_api(),
            'pages/api/orders.js': self._generate_orders_api(),
            'components/ProductCard.js': self._generate_product_card(),
            'components/Cart.js': self._generate_cart_component(),
            'components/Header.js': self._generate_header_component(),
            'styles/globals.css': self._generate_global_styles(),
            'styles/Home.module.css': self._generate_home_styles(),
            'public/favicon.ico': '# Favicon placeholder',
            'README.md': self._generate_readme(name, description, 'ecommerce'),
            'next.config.js': self._generate_nextjs_config()
        }
        
        # Backend API routes —É–∂–µ –≤–∫–ª—é—á–µ–Ω—ã –≤ Next.js
        backend_files = {}
        
        # –°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        database_schema = {
            'products': {
                'id': 'uuid primary key default gen_random_uuid()',
                'name': 'text not null',
                'description': 'text',
                'price': 'decimal(10,2) not null',
                'image_url': 'text',
                'category': 'text',
                'stock': 'integer default 0',
                'created_at': 'timestamp default now()'
            },
            'orders': {
                'id': 'uuid primary key default gen_random_uuid()',
                'user_email': 'text not null',
                'total': 'decimal(10,2) not null',
                'status': 'text default \'pending\'',
                'created_at': 'timestamp default now()'
            },
            'order_items': {
                'id': 'uuid primary key default gen_random_uuid()',
                'order_id': 'uuid references orders(id)',
                'product_id': 'uuid references products(id)',
                'quantity': 'integer not null',
                'price': 'decimal(10,2) not null'
            }
        }
        
        # Environment variables
        env_variables = {
            'NEXT_PUBLIC_SUPABASE_URL': 'your-supabase-url',
            'NEXT_PUBLIC_SUPABASE_ANON_KEY': 'your-supabase-anon-key',
            'SUPABASE_SERVICE_KEY': 'your-supabase-service-key',
            'STRIPE_SECRET_KEY': 'your-stripe-secret-key',
            'NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY': 'your-stripe-publishable-key'
        }
        
        # Package.json
        package_json = {
            'name': name.lower().replace(' ', '-'),
            'version': '0.1.0',
            'private': True,
            'scripts': {
                'dev': 'next dev',
                'build': 'next build',
                'start': 'next start',
                'lint': 'next lint'
            },
            'dependencies': {
                'next': '^14.0.0',
                'react': '^18.0.0',
                'react-dom': '^18.0.0',
                '@supabase/supabase-js': '^2.38.0',
                'stripe': '^14.0.0',
                '@stripe/stripe-js': '^2.0.0'
            },
            'devDependencies': {
                'eslint': '^8.0.0',
                'eslint-config-next': '14.0.0'
            }
        }
        
        # Deployment config
        deployment_config = {
            'platform': 'vercel',
            'build_command': 'npm run build',
            'output_directory': '.next',
            'env_vars_required': list(env_variables.keys())
        }
        
        return FullStackProject(
            project_id=project_id,
            name=name,
            type='ecommerce',
            framework=framework,
            description=description,
            frontend_files=frontend_files,
            backend_files=backend_files,
            database_schema=database_schema,
            env_variables=env_variables,
            package_json=package_json,
            deployment_config=deployment_config,
            created_at=datetime.now().isoformat()
        )
        
    def _generate_universal_project(self, project_id: str, name: str, description: str, framework: str, project_type: str) -> FullStackProject:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤"""
        
        frontend_files = {
            'pages/index.js' if framework == 'nextjs' else 'src/App.js': self._generate_universal_home_page(name, description),
            'package.json': json.dumps({
                'name': name.lower().replace(' ', '-'),
                'version': '0.1.0',
                'private': True,
                'scripts': {
                    'dev': 'next dev' if framework == 'nextjs' else 'react-scripts start',
                    'build': 'next build' if framework == 'nextjs' else 'react-scripts build',
                    'start': 'next start' if framework == 'nextjs' else 'serve -s build'
                },
                'dependencies': {
                    'next': '^14.0.0' if framework == 'nextjs' else None,
                    'react': '^18.0.0',
                    'react-dom': '^18.0.0',
                    'react-scripts': '^5.0.1' if framework == 'react' else None
                }
            }, indent=2)
        }
        
        return FullStackProject(
            project_id=project_id,
            name=name,
            type=project_type,
            framework=framework,
            description=description,
            frontend_files=frontend_files,
            backend_files={},
            database_schema={},
            env_variables={},
            package_json={},
            deployment_config={'platform': 'vercel'},
            created_at=datetime.now().isoformat()
        )
        
    def _save_project_to_disk(self, project: FullStackProject):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–µ–∫—Ç –Ω–∞ –¥–∏—Å–∫ –≤ –≤–∏–¥–µ zip –∞—Ä—Ö–∏–≤–∞ –∏ –æ—Ç–¥–µ–ª—å–Ω–æ–π –ø–∞–ø–∫–∏"""
        
        project_path = os.path.join(self.projects_dir, project.project_id)
        os.makedirs(project_path, exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º frontend —Ñ–∞–π–ª—ã
        for file_path, content in project.frontend_files.items():
            full_path = os.path.join(project_path, file_path)
            os.makedirs(os.path.dirname(full_path), exist_ok=True)
            
            with open(full_path, 'w', encoding='utf-8') as f:
                f.write(content)
                
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º backend —Ñ–∞–π–ª—ã
        for file_path, content in project.backend_files.items():
            full_path = os.path.join(project_path, file_path)
            os.makedirs(os.path.dirname(full_path), exist_ok=True)
            
            with open(full_path, 'w', encoding='utf-8') as f:
                f.write(content)
                
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
        metadata = {
            'project_id': project.project_id,
            'name': project.name,
            'type': project.type,
            'framework': project.framework,
            'description': project.description,
            'database_schema': project.database_schema,
            'env_variables': project.env_variables,
            'deployment_config': project.deployment_config,
            'created_at': project.created_at
        }
        
        with open(os.path.join(project_path, 'project-metadata.json'), 'w', encoding='utf-8') as f:
            json.dump(metadata, f, indent=2, ensure_ascii=False)
            
        # –°–æ–∑–¥–∞–µ–º zip –∞—Ä—Ö–∏–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        zip_path = os.path.join(self.projects_dir, f"{project.project_id}.zip")
        with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
            for root, dirs, files in os.walk(project_path):
                for file in files:
                    file_path = os.path.join(root, file)
                    arc_name = os.path.relpath(file_path, project_path)
                    zipf.write(file_path, arc_name)
                    
        print(f"üíæ –ü—Ä–æ–µ–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {project_path}")
        print(f"üì¶ –ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: {zip_path}")
        
    # –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    def _generate_ecommerce_home_page(self, name: str, description: str) -> str:
        return f'''import Head from 'next/head'
import { useState, useEffect } from 'react'
import ProductCard from '../components/ProductCard'
import Header from '../components/Header'

export default function Home() {{
  const [products, setProducts] = useState([])
  const [loading, setLoading] = useState(true)

  useEffect(() => {{
    fetchProducts()
  }}, [])

  const fetchProducts = async () => {{
    try {{
      const response = await fetch('/api/products')
      const data = await response.json()
      setProducts(data)
    }} catch (error) {{
      console.error('Error fetching products:', error)
    }} finally {{
      setLoading(false)
    }}
  }}

  return (
    <div>
      <Head>
        <title>{name}</title>
        <meta name="description" content="{description}" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Header />

      <main style={{{{ padding: '2rem' }}}}>
        <h1 style={{{{ textAlign: 'center', marginBottom: '2rem' }}}}>
          {name}
        </h1>
        
        <p style={{{{ textAlign: 'center', marginBottom: '3rem', fontSize: '1.2rem', color: '#666' }}}}>
          {description}
        </p>

        {{loading ? (
          <div style={{{{ textAlign: 'center' }}}}>–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤...</div>
        ) : (
          <div style={{{{
            display: 'grid',
            gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',
            gap: '2rem',
            maxWidth: '1200px',
            margin: '0 auto'
          }}}}>
            {{products.map(product => (
              <ProductCard key={{product.id}} product={{product}} />
            ))}}
          </div>
        )}}
      </main>
    </div>
  )
}}'''

    def _generate_product_card(self) -> str:
        return '''import { useState } from 'react'

export default function ProductCard({ product }) {
  const [addingToCart, setAddingToCart] = useState(false)

  const addToCart = async () => {
    setAddingToCart(true)
    try {
      // –õ–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
      const cart = JSON.parse(localStorage.getItem('cart') || '[]')
      const existingItem = cart.find(item => item.id === product.id)
      
      if (existingItem) {
        existingItem.quantity += 1
      } else {
        cart.push({...product, quantity: 1})
      }
      
      localStorage.setItem('cart', JSON.stringify(cart))
      alert('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!')
    } catch (error) {
      console.error('Error adding to cart:', error)
    } finally {
      setAddingToCart(false)
    }
  }

  return (
    <div style={{
      border: '1px solid #ddd',
      borderRadius: '8px',
      padding: '1rem',
      backgroundColor: 'white',
      boxShadow: '0 2px 4px rgba(0,0,0,0.1)',
      transition: 'transform 0.2s',
      cursor: 'pointer'
    }}
    onMouseEnter={e => e.target.style.transform = 'translateY(-2px)'}
    onMouseLeave={e => e.target.style.transform = 'translateY(0)'}
    >
      {product.image_url && (
        <img 
          src={product.image_url} 
          alt={product.name}
          style={{
            width: '100%',
            height: '200px',
            objectFit: 'cover',
            borderRadius: '4px',
            marginBottom: '1rem'
          }}
        />
      )}
      
      <h3 style={{ marginBottom: '0.5rem', color: '#333' }}>{product.name}</h3>
      <p style={{ color: '#666', marginBottom: '1rem', fontSize: '0.9rem' }}>
        {product.description}
      </p>
      
      <div style={{ 
        display: 'flex', 
        justifyContent: 'space-between', 
        alignItems: 'center' 
      }}>
        <span style={{ 
          fontSize: '1.2rem', 
          fontWeight: 'bold', 
          color: '#e74c3c' 
        }}>
          ‚ÇΩ{product.price}
        </span>
        
        <button
          onClick={addToCart}
          disabled={addingToCart}
          style={{
            backgroundColor: '#3498db',
            color: 'white',
            border: 'none',
            padding: '0.5rem 1rem',
            borderRadius: '4px',
            cursor: addingToCart ? 'not-allowed' : 'pointer',
            opacity: addingToCart ? 0.6 : 1
          }}
        >
          {addingToCart ? '–î–æ–±–∞–≤–ª—è—é...' : '–í –∫–æ—Ä–∑–∏–Ω—É'}
        </button>
      </div>
    </div>
  )
}'''

    def _generate_header_component(self) -> str:
        return '''import { useState, useEffect } from 'react'
import Link from 'next/link'

export default function Header() {
  const [cartCount, setCartCount] = useState(0)

  useEffect(() => {
    updateCartCount()
    window.addEventListener('storage', updateCartCount)
    return () => window.removeEventListener('storage', updateCartCount)
  }, [])

  const updateCartCount = () => {
    const cart = JSON.parse(localStorage.getItem('cart') || '[]')
    const count = cart.reduce((total, item) => total + item.quantity, 0)
    setCartCount(count)
  }

  return (
    <header style={{
      backgroundColor: '#2c3e50',
      color: 'white',
      padding: '1rem 2rem',
      boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
    }}>
      <nav style={{
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center',
        maxWidth: '1200px',
        margin: '0 auto'
      }}>
        <Link href="/" style={{ 
          fontSize: '1.5rem', 
          fontWeight: 'bold', 
          textDecoration: 'none', 
          color: 'white' 
        }}>
          üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω
        </Link>
        
        <div style={{ display: 'flex', gap: '2rem', alignItems: 'center' }}>
          <Link href="/" style={{ textDecoration: 'none', color: 'white' }}>
            –ì–ª–∞–≤–Ω–∞—è
          </Link>
          <Link href="/cart" style={{ 
            textDecoration: 'none', 
            color: 'white',
            position: 'relative'
          }}>
            üõí –ö–æ—Ä–∑–∏–Ω–∞
            {cartCount > 0 && (
              <span style={{
                position: 'absolute',
                top: '-8px',
                right: '-8px',
                backgroundColor: '#e74c3c',
                color: 'white',
                borderRadius: '50%',
                width: '20px',
                height: '20px',
                fontSize: '0.7rem',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center'
              }}>
                {cartCount}
              </span>
            )}
          </Link>
        </div>
      </nav>
    </header>
  )
}'''

    def _generate_products_api(self) -> str:
        return '''// pages/api/products.js
import { createClient } from '@supabase/supabase-js'

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_KEY
)

export default async function handler(req, res) {
  if (req.method === 'GET') {
    try {
      const { data: products, error } = await supabase
        .from('products')
        .select('*')
        .order('created_at', { ascending: false })

      if (error) throw error

      res.status(200).json(products)
    } catch (error) {
      console.error('Error fetching products:', error)
      res.status(500).json({ error: 'Internal server error' })
    }
  } else if (req.method === 'POST') {
    try {
      const { name, description, price, image_url, category, stock } = req.body

      const { data: product, error } = await supabase
        .from('products')
        .insert([
          { name, description, price, image_url, category, stock }
        ])
        .select()

      if (error) throw error

      res.status(201).json(product[0])
    } catch (error) {
      console.error('Error creating product:', error)
      res.status(500).json({ error: 'Internal server error' })
    }
  } else {
    res.setHeader('Allow', ['GET', 'POST'])
    res.status(405).end(`Method ${req.method} Not Allowed`)
  }
}'''

    def _generate_readme(self, name: str, description: str, project_type: str) -> str:
        return f'''# {name}

{description}

## üöÄ Full-Stack –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —Å–æ–∑–¥–∞–Ω–Ω–æ–µ —Å –ø–æ–º–æ—â—å—é Vibecode AI

### –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:
- **Frontend**: Next.js + React
- **Backend**: Next.js API Routes
- **–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö**: Supabase (PostgreSQL)
- **–°—Ç–∏–ª–∏–∑–∞—Ü–∏—è**: CSS Modules
- **–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ**: Vercel

### –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- ‚úÖ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω
- ‚úÖ Real-time –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
- ‚úÖ API endpoints
- ‚úÖ –ì–æ—Ç–æ–≤–æ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É
- ‚úÖ SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è

## –£—Å—Ç–∞–Ω–æ–≤–∫–∞

```bash
# –ö–ª–æ–Ω–∏—Ä—É–π—Ç–µ –ø—Ä–æ–µ–∫—Ç
git clone <repo-url>

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
npm install

# –ù–∞—Å—Ç—Ä–æ–π—Ç–µ environment variables
cp .env.example .env.local

# –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
npm run dev
```

## Environment Variables

–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª `.env.local` –∏ –¥–æ–±–∞–≤—å—Ç–µ:

```env
NEXT_PUBLIC_SUPABASE_URL=your-supabase-url
NEXT_PUBLIC_SUPABASE_ANON_KEY=your-supabase-anon-key
SUPABASE_SERVICE_KEY=your-supabase-service-key
```

## –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ

–ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é –Ω–∞ Vercel:

[![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/new)

## üì± –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞

- –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π {project_type}
- –ò–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
- –ú–æ–±–∏–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è
- –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
- SEO –¥—Ä—É–∂–µ–ª—é–±–Ω–æ—Å—Ç—å

---

üí° **–°–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é [Vibecode AI](https://vibecode.ai)** - –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è full-stack –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫.
'''

    def _generate_global_styles(self) -> str:
        return '''html,
body {
  padding: 0;
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen,
    Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;
  background-color: #f8f9fa;
}

a {
  color: inherit;
  text-decoration: none;
}

* {
  box-sizing: border-box;
}

button {
  font-family: inherit;
}

.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 1rem;
}

.loading {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 200px;
}

.error {
  color: #e74c3c;
  text-align: center;
  padding: 2rem;
  background: #fdf2f2;
  border: 1px solid #fecaca;
  border-radius: 8px;
  margin: 1rem 0;
}

.success {
  color: #27ae60;
  text-align: center;
  padding: 2rem;
  background: #f0fff4;
  border: 1px solid #9ae6b4;
  border-radius: 8px;
  margin: 1rem 0;
}'''

    def _generate_nextjs_config(self) -> str:
        return '''/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  images: {
    domains: [],
  },
  env: {
    CUSTOM_KEY: process.env.CUSTOM_KEY,
  },
}

module.exports = nextConfig'''

    def _generate_universal_home_page(self, name: str, description: str) -> str:
        return f'''import Head from 'next/head'

export default function Home() {{
  return (
    <div>
      <Head>
        <title>{name}</title>
        <meta name="description" content="{description}" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main style={{{{
        minHeight: '100vh',
        padding: '4rem 2rem',
        background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
        color: 'white',
        textAlign: 'center'
      }}}}>
        <h1 style={{{{
          fontSize: '3rem',
          marginBottom: '2rem',
          textShadow: '0 2px 4px rgba(0,0,0,0.3)'
        }}}}>
          üöÄ {name}
        </h1>
        
        <p style={{{{
          fontSize: '1.3rem',
          marginBottom: '3rem',
          maxWidth: '800px',
          margin: '0 auto 3rem auto',
          lineHeight: '1.6',
          opacity: '0.9'
        }}}}>
          {description}
        </p>

        <div style={{{{
          display: 'grid',
          gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',
          gap: '2rem',
          maxWidth: '1000px',
          margin: '0 auto'
        }}}}>
          <div style={{{{
            background: 'rgba(255,255,255,0.1)',
            padding: '2rem',
            borderRadius: '12px',
            backdropFilter: 'blur(10px)'
          }}}}>
            <h3 style={{{{ marginBottom: '1rem' }}}}>‚ö° –ë—ã—Å—Ç—Ä–æ</h3>
            <p>–ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–∑—ã–≤—á–∏–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å</p>
          </div>
          
          <div style={{{{
            background: 'rgba(255,255,255,0.1)',
            padding: '2rem',
            borderRadius: '12px',
            backdropFilter: 'blur(10px)'
          }}}}>
            <h3 style={{{{ marginBottom: '1rem' }}}}>üé® –ö—Ä–∞—Å–∏–≤–æ</h3>
            <p>–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å—Ç–∫–∞</p>
          </div>
          
          <div style={{{{
            background: 'rgba(255,255,255,0.1)',
            padding: '2rem',
            borderRadius: '12px',
            backdropFilter: 'blur(10px)'
          }}}}>
            <h3 style={{{{ marginBottom: '1rem' }}}}>üîß –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ</h3>
            <p>–ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∏–∑ –∫–æ—Ä–æ–±–∫–∏</p>
          </div>
        </div>

        <button style={{{{
          marginTop: '3rem',
          padding: '1rem 2rem',
          fontSize: '1.1rem',
          backgroundColor: '#ff6b6b',
          color: 'white',
          border: 'none',
          borderRadius: '50px',
          cursor: 'pointer',
          transition: 'transform 0.2s'
        }}}}
        onMouseEnter={{e => e.target.style.transform = 'translateY(-2px)'}}
        onMouseLeave={{e => e.target.style.transform = 'translateY(0)'}}
        onClick={{() => alert('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∞—à–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!')}}
        >
          üöÄ –ù–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
        </button>

        <footer style={{{{ marginTop: '4rem', opacity: '0.7' }}}}>
          <p>üí° –°–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é Vibecode AI</p>
        </footer>
      </main>
    </div>
  )
}}'''

# –ú–µ—Ç–æ–¥—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ...

def test_fullstack_generator():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ full-stack –ø—Ä–æ–µ–∫—Ç–æ–≤"""
    generator = FullStackGenerator()
    
    # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞
    project = generator.generate_fullstack_project(
        description="–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω –æ–¥–µ–∂–¥—ã —Å –∫–æ—Ä–∑–∏–Ω–æ–π, –∫–∞—Ç–∞–ª–æ–≥–æ–º —Ç–æ–≤–∞—Ä–æ–≤ –∏ —Å–∏—Å—Ç–µ–º–æ–π –æ–ø–ª–∞—Ç—ã",
        project_name="–ú–æ–¥–Ω—ã–π –°—Ç–∏–ª—å",
        project_type="ecommerce"
    )
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ–µ–∫—Ç: {project.project_id}")
    print(f"üìÅ –§–∞–π–ª–æ–≤: {len(project.frontend_files)}")
    print(f"üóÑÔ∏è –¢–∞–±–ª–∏—Ü –≤ –ë–î: {len(project.database_schema)}")

if __name__ == "__main__":
    test_fullstack_generator()