#!/usr/bin/env python3
"""
–î–∏–∞–ª–æ–≥–æ–≤–∞—è AI —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤
–ö–æ–Ω–∫—É—Ä–∏—Ä—É–µ—Ç —Å Lovable.dev chat interface
"""

import os
import json
import uuid
from datetime import datetime
from typing import Dict, List, Any, Optional
from dataclasses import dataclass, asdict
from intelligent_chat import IntelligentChat

@dataclass
class ChatMessage:
    """–°–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ"""
    id: str
    role: str  # 'user', 'assistant', 'system'
    content: str
    timestamp: datetime
    metadata: Dict[str, Any] = None

@dataclass 
class ProjectContext:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è AI"""
    project_id: str
    name: str
    description: str
    project_type: str
    framework: str
    files: Dict[str, str]
    database_schema: Dict[str, Any]
    deployment_info: Dict[str, Any]
    history: List[Dict[str, Any]]

class ProjectAIChatBot:
    """AI –±–æ—Ç –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤"""
    
    def __init__(self):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ AI —Å–µ—Ä–≤–∏—Å—ã (GigaChat, Yandex GPT)
        self.intelligent_chat = IntelligentChat()
        self.active_sessions = {}  # session_id -> conversation
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø—Ä–æ–µ–∫—Ç–Ω–æ–≥–æ AI
        self.system_prompt = """
–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π AI Full-Stack —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, –∞–Ω–∞–ª–æ–≥ Lovable.dev.
–¢—ã –ø–æ–º–æ–≥–∞–µ—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ –¥–æ—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ React/Next.js –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

–í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
- –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏ —Å—Ç—Ä–∞–Ω–∏—Ü
- –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞
- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫
- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Supabase
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å API
- –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —Å Tailwind CSS
- Mobile-responsive –¥–∏–∑–∞–π–Ω

–°–¢–ò–õ–¨ –û–ë–©–ï–ù–ò–Ø:
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è
- –ü–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
- –ö–æ–¥ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏
- –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏–π
- –í–æ–ø—Ä–æ—Å—ã –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π

–ü–û–ú–ù–ò: –¢—ã —Ä–∞–±–æ—Ç–∞–µ—à—å —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã.
"""

    def create_chat_session(self, project_context: ProjectContext) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —á–∞—Ç–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞"""
        session_id = f"chat_{uuid.uuid4().hex[:12]}"
        
        self.active_sessions[session_id] = {
            'project_context': project_context,
            'messages': [
                ChatMessage(
                    id=str(uuid.uuid4()),
                    role='system',
                    content=self.system_prompt,
                    timestamp=datetime.now()
                ),
                ChatMessage(
                    id=str(uuid.uuid4()),
                    role='assistant', 
                    content=f"""üöÄ –ü—Ä–∏–≤–µ—Ç! –Ø AI —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "{project_context.name}".

üìã **–ß—Ç–æ —è –∑–Ω–∞—é –æ –ø—Ä–æ–µ–∫—Ç–µ:**
- –¢–∏–ø: {project_context.project_type}
- –§—Ä–µ–π–º–≤–æ—Ä–∫: {project_context.framework}
- –§–∞–π–ª–æ–≤: {len(project_context.files)}
- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'–ù–∞—Å—Ç—Ä–æ–µ–Ω–∞' if project_context.database_schema else '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞'}

üí¨ **–ß—Ç–æ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å:**
- –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
- –ò–∑–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥
- –ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏
- –£–ª—É—á—à–∏—Ç—å –¥–∏–∑–∞–π–Ω
- –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
- –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å

–ß—Ç–æ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç–µ?""",
                    timestamp=datetime.now()
                )
            ],
            'created_at': datetime.now(),
            'last_activity': datetime.now()
        }
        
        return session_id
    
    def send_message(self, session_id: str, user_message: str) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –∏ –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç AI"""
        
        if session_id not in self.active_sessions:
            return {'error': 'Session not found'}
            
        session = self.active_sessions[session_id]
        project_context = session['project_context']
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_msg = ChatMessage(
            id=str(uuid.uuid4()),
            role='user',
            content=user_message,
            timestamp=datetime.now()
        )
        session['messages'].append(user_msg)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç AI
        try:
            ai_response = self._generate_ai_response(session, user_message)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç AI
            ai_msg = ChatMessage(
                id=str(uuid.uuid4()),
                role='assistant',
                content=ai_response['content'],
                timestamp=datetime.now(),
                metadata=ai_response.get('metadata', {})
            )
            session['messages'].append(ai_msg)
            session['last_activity'] = datetime.now()
            
            return {
                'success': True,
                'message': asdict(ai_msg),
                'actions': ai_response.get('actions', [])
            }
            
        except Exception as e:
            error_msg = ChatMessage(
                id=str(uuid.uuid4()),
                role='assistant',
                content=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å.",
                timestamp=datetime.now()
            )
            session['messages'].append(error_msg)
            
            return {
                'success': False,
                'message': asdict(error_msg),
                'error': str(e)
            }
    
    def _generate_ai_response(self, session: Dict, user_message: str) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç AI –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
        
        project_context = session['project_context']
        recent_messages = session['messages'][-10:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
        request_type = self._analyze_request_type(user_message)
        
        if request_type == 'code_modification':
            return self._handle_code_modification(project_context, user_message)
        elif request_type == 'new_feature':
            return self._handle_new_feature(project_context, user_message)
        elif request_type == 'bug_fix':
            return self._handle_bug_fix(project_context, user_message)
        elif request_type == 'design_improvement':
            return self._handle_design_improvement(project_context, user_message)
        else:
            return self._handle_general_question(project_context, user_message, recent_messages)
    
    def _analyze_request_type(self, message: str) -> str:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        message_lower = message.lower()
        
        if any(word in message_lower for word in ['–¥–æ–±–∞–≤—å', '—Å–æ–∑–¥–∞–π', '–Ω–æ–≤—ã–π', '–Ω–æ–≤–∞—è']):
            return 'new_feature'
        elif any(word in message_lower for word in ['–∏–∑–º–µ–Ω–∏', '–ø–æ–ø—Ä–∞–≤—å', '–æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π']):
            return 'code_modification'  
        elif any(word in message_lower for word in ['–æ—à–∏–±–∫–∞', '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', '–∏—Å–ø—Ä–∞–≤—å']):
            return 'bug_fix'
        elif any(word in message_lower for word in ['–¥–∏–∑–∞–π–Ω', '—Å—Ç–∏–ª—å', '–∫—Ä–∞—Å–∏–≤–µ–µ']):
            return 'design_improvement'
        else:
            return 'general_question'
    
    def _handle_code_modification(self, context: ProjectContext, message: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–¥–∞"""
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º intelligent chat –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        intelligent_response = self.intelligent_chat.get_response(
            f"–ü—Ä–æ–µ–∫—Ç: {context.name} ({context.project_type})\n–ó–∞–ø—Ä–æ—Å: {message}"
        )
        
        return {
            'content': f"""üîß **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–¥–∞**

{intelligent_response}

**–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:**
1. –ü—Ä–æ–≤–µ—Ä—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–∞—Ö
2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
3. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–ø—Ä–æ—Å–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∫–∏

üí° –•–æ—á–µ—à—å —á—Ç–æ-—Ç–æ –µ—â–µ –∏–∑–º–µ–Ω–∏—Ç—å?""",
            'actions': ['code_update'],
            'metadata': {
                'type': 'code_modification',
                'affected_files': self._extract_relevant_files(context, message)
            }
        }
    
    def _handle_new_feature(self, context: ProjectContext, message: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
        
        return {
            'content': f"""‚ú® **–ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è**

–û—Ç–ª–∏—á–Ω–∞—è –∏–¥–µ—è! –î–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "{context.name}" —è –º–æ–≥—É –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.

**–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:**
1. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
2. –î–æ–±–∞–≤–∏—Ç—å API endpoints (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
3. –û–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
4. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–æ—É—Ç–∏–Ω–≥
5. –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–ª–∏

**–£—Ç–æ—á–Ω–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:**
- –ì–¥–µ –¥–æ–ª–∂–Ω–∞ —Ä–∞—Å–ø–æ–ª–∞–≥–∞—Ç—å—Å—è —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è?
- –ù—É–∂–Ω–∞ –ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞?
- –ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è?

–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É! üöÄ""",
            'actions': ['feature_development'],
            'metadata': {
                'type': 'new_feature',
                'complexity': 'medium'
            }
        }
    
    def _handle_bug_fix(self, context: ProjectContext, message: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫"""
        
        return {
            'content': f"""üêõ **–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏**

–ü–æ–Ω—è—Ç–Ω–æ! –î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä–µ–º—Å—è —Å –ø—Ä–æ–±–ª–µ–º–æ–π –≤ –ø—Ä–æ–µ–∫—Ç–µ "{context.name}".

**–î–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –º–Ω–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å:**
1. –í –∫–∞–∫–æ–º —Ñ–∞–π–ª–µ/–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ—à–∏–±–∫–∞?
2. –ö–∞–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è?
3. –ï—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –≤ –∫–æ–Ω—Å–æ–ª–∏?
4. –ù–∞ –∫–∞–∫–æ–º —ç—Ç–∞–ø–µ –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ–±–ª–µ–º–∞?

**–ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π:**
1. –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞
2. –í—ã—è–≤–ª–µ–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã
3. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

–ü–æ–¥–µ–ª–∏—Å—å –¥–µ—Ç–∞–ª—è–º–∏, –∏ —è –±—ã—Å—Ç—Ä–æ –≤—Å–µ –∏—Å–ø—Ä–∞–≤–ª—é! üîß""",
            'actions': ['bug_analysis'],
            'metadata': {
                'type': 'bug_fix',
                'priority': 'high'
            }
        }
    
    def _handle_design_improvement(self, context: ProjectContext, message: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —É–ª—É—á—à–µ–Ω–∏–µ –¥–∏–∑–∞–π–Ω–∞"""
        
        return {
            'content': f"""üé® **–£–ª—É—á—à–µ–Ω–∏–µ –¥–∏–∑–∞–π–Ω–∞**

–û—Ç–ª–∏—á–Ω–æ! –°–¥–µ–ª–∞–µ–º –ø—Ä–æ–µ–∫—Ç "{context.name}" –µ—â–µ –∫—Ä–∞—Å–∏–≤–µ–µ –∏ —É–¥–æ–±–Ω–µ–µ.

**–í–∞—Ä–∏–∞–Ω—Ç—ã —É–ª—É—á—à–µ–Ω–∏–π:**
- üì± Mobile-responsive –¥–∏–∑–∞–π–Ω
- üåà –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞  
- ‚ú® –ê–Ω–∏–º–∞—Ü–∏–∏ –∏ –º–∏–∫—Ä–æ–∏–Ω—Ç–µ—Ä–∞–∫—Ü–∏–∏
- üñºÔ∏è –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞
- üéØ UX –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è

**–ß—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —Ö–æ—á–µ—à—å —É–ª—É—á—à–∏—Ç—å:**
- –û–±—â–∏–π —Å—Ç–∏–ª—å —Å—Ç—Ä–∞–Ω–∏—Ü?
- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç?
- –ú–æ–±–∏–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é?
- –¶–≤–µ—Ç–∞ –∏ —à—Ä–∏—Ñ—Ç—ã?

–†–∞—Å—Å–∫–∞–∂–∏ —Å–≤–æ–µ –≤–∏–¥–µ–Ω–∏–µ, –∏ —è –≤–æ–ø–ª–æ—â—É –µ–≥–æ –≤ –∫–æ–¥–µ! üöÄ""",
            'actions': ['design_update'],
            'metadata': {
                'type': 'design_improvement',
                'framework': context.framework
            }
        }
    
    def _handle_general_question(self, context: ProjectContext, message: str, recent_messages: List) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"""
        
        intelligent_response = self.intelligent_chat.get_response(message)
        
        return {
            'content': f"""üí¨ **–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è**

{intelligent_response}

**–ú–æ–≥—É –ø–æ–º–æ—á—å —Å:**
- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
- –ò–∑–º–µ–Ω–µ–Ω–∏–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞
- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –æ—à–∏–±–æ–∫
- –£–ª—É—á—à–µ–Ω–∏–µ–º –¥–∏–∑–∞–π–Ω–∞
- –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
- –ù–∞—Å—Ç—Ä–æ–π–∫–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π

–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?""",
            'metadata': {
                'type': 'consultation'
            }
        }
    
    def _extract_relevant_files(self, context: ProjectContext, message: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        relevant_files = []
        message_lower = message.lower()
        
        for filename in context.files.keys():
            if any(keyword in filename.lower() for keyword in message_lower.split()):
                relevant_files.append(filename)
                
        return relevant_files[:5]  # –ú–∞–∫—Å–∏–º—É–º 5 —Ñ–∞–π–ª–æ–≤
    
    def get_chat_history(self, session_id: str) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞"""
        if session_id not in self.active_sessions:
            return []
            
        messages = self.active_sessions[session_id]['messages']
        return [asdict(msg) for msg in messages if msg.role != 'system']
    
    def update_project_context(self, session_id: str, updated_context: ProjectContext):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Å–µ—Å—Å–∏–∏"""
        if session_id in self.active_sessions:
            self.active_sessions[session_id]['project_context'] = updated_context

def test_ai_chat():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI —á–∞—Ç —Å–∏—Å—Ç–µ–º—ã"""
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞
    test_context = ProjectContext(
        project_id="test_123",
        name="E-commerce Store", 
        description="–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω —Å –∫–æ—Ä–∑–∏–Ω–æ–π",
        project_type="ecommerce",
        framework="nextjs",
        files={
            "pages/index.js": "// Home page",
            "components/ProductCard.js": "// Product component",
            "styles/globals.css": "/* Global styles */"
        },
        database_schema={"products": {}, "orders": {}},
        deployment_info={},
        history=[]
    )
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —á–∞—Ç
    chat_bot = ProjectAIChatBot()
    session_id = chat_bot.create_chat_session(test_context)
    
    print(f"ü§ñ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: {session_id}")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    test_messages = [
        "–î–æ–±–∞–≤—å –∫–æ—Ä–∑–∏–Ω—É —Ç–æ–≤–∞—Ä–æ–≤",
        "–ò–∑–º–µ–Ω–∏ —Ü–≤–µ—Ç –∫–Ω–æ–ø–æ–∫ –Ω–∞ —Å–∏–Ω–∏–π",
        "–£ –º–µ–Ω—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ñ–æ—Ä–º–∞ –∑–∞–∫–∞–∑–∞", 
        "–°–¥–µ–ª–∞–π –¥–∏–∑–∞–π–Ω —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–µ–µ"
    ]
    
    for message in test_messages:
        print(f"\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message}")
        response = chat_bot.send_message(session_id, message)
        
        if response['success']:
            print(f"ü§ñ AI: {response['message']['content'][:200]}...")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response['error']}")

if __name__ == "__main__":
    test_ai_chat()