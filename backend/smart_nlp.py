
import re
import difflib
from fuzzywuzzy import fuzz
from textdistance import levenshtein
import spacy
from collections import defaultdict
import json
import time

class SmartNLP:
    def __init__(self):
        self.intent_patterns = {
            'create_game': [
                '–∏–≥—Ä–∞', '–∏–≥—Ä—É', '–≥–µ–π–º—Å', 'game', '–∑–º–µ–π–∫–∞', '–∑–º–µ—ë–∫–∞', '–∑–º–µ–π–∫—É', '—Å–Ω–µ–π–∫', 'snake',
                '—Ç–µ—Ç—Ä–∏—Å', 'tetris', '–∞—Ä–∫–∞–¥–∞', '–∞—Ä–∫–∞–¥—É', '–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ—Ä', '—à—É—Ç–µ—Ä', '—Ä–∞–Ω–Ω–µ—Ä',
                '–≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∞', '–ø–∞–∑–ª', 'puzzle', '–∫–≤–µ—Å—Ç', '—Ä–ø–≥', 'rpg', '—Å—Ç—Ä–∞—Ç–µ–≥–∏—è'
            ],
            'create_app': [
                '–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', '–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', 'app', '–∞–ø–ø', '–º–æ–±–∏–ª—å–Ω–æ–µ', 'todo', '—Ç—É–¥–æ', '—Ç—É–¥—É',
                '–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫', '–æ—Ä–≥–∞–Ω–∞–π–∑–µ—Ä', '—Ç—Ä–µ–∫–µ—Ä', 'tracker', '–∫–∞–ª–µ–Ω–¥–∞—Ä—å', '–∑–∞–º–µ—Ç–∫–∏',
                '—á–∞—Ç', '—Å–æ—Ü–∏–∞–ª—å–Ω–æ–µ', '—Ñ–∏—Ç–Ω–µ—Å', '–∑–¥–æ—Ä–æ–≤—å–µ', '—Ñ–∏–Ω–∞–Ω—Å—ã', '–±–∞–Ω–∫–∏–Ω–≥'
            ],
            'create_website': [
                '—Å–∞–π—Ç', '—Å–∞–π—Ç—ã', 'website', '–≤–µ–±', 'web', '–ª–µ–Ω–¥–∏–Ω–≥', 'landing', '–ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ',
                '–±–ª–æ–≥', '–º–∞–≥–∞–∑–∏–Ω', '–∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω', 'ecommerce', '–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π'
            ],
            'create_complex': [
                '—Å–ª–æ–∂–Ω–æ–µ', 'enterprise', 'crm', 'erp', '—Å–∏—Å—Ç–µ–º–∞', '–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞', 'dashboard',
                '–¥–∞—à–±–æ—Ä–¥', '–∞–¥–º–∏–Ω–∫–∞', '–ø–∞–Ω–µ–ª—å', '—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è', '–∞–Ω–∞–ª–∏—Ç–∏–∫–∞', 'bi'
            ],
            'show_trends': [
                '—Ç—Ä–µ–Ω–¥', '—Ç—Ä–µ–Ω–¥—ã', 'trends', '–ø–æ–ø—É–ª—è—Ä–Ω–æ', '–≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–æ', '—Ä—ã–Ω–æ–∫', 'market',
                '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '–∞–Ω–∞–ª–∏—Ç–∏–∫–∞', '–¥–∞–Ω–Ω—ã–µ', '–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ'
            ],
            'monetization': [
                '–∑–∞—Ä–∞–±–æ—Ç–æ–∫', '–¥–µ–Ω—å–≥–∏', '–¥–æ—Ö–æ–¥', '–º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è', '–ø—Ä–∏–±—ã–ª—å', '–±–∏–∑–Ω–µ—Å',
                '–ø—Ä–æ–¥–∞–∂–∏', '—Ä–µ–∫–ª–∞–º–∞', '–ø–æ–¥–ø–∏—Å–∫–∞', 'freemium'
            ]
        }
        
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–ø–µ—á–∞—Ç–æ–∫
        self.correction_dict = {
            '–∑–∏–µ–π–∫–∞': '–∑–º–µ–π–∫–∞',
            '–∑–º–µ—ë–∫–∞': '–∑–º–µ–π–∫–∞', 
            '—Å–Ω–µ–π–∫': '–∑–º–µ–π–∫–∞',
            '—Ç–µ—Ç—Ä—Å': '—Ç–µ—Ç—Ä–∏—Å',
            '—Ç–µ—Ç—Ä–∏–∑': '—Ç–µ—Ç—Ä–∏—Å',
            '—Ç—É–¥–æ': 'todo',
            '—Ç—É–¥—É': 'todo',
            '–ø—Ä–∏–ª–æ–∂–µ–Ω–∏': '–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
            '—Å–∞–π—Ç—ã': '—Å–∞–π—Ç',
            '–≤–µ–±—Å–∞–π—Ç': '—Å–∞–π—Ç',
            '—Ç—Ä–µ–Ω–¥—Å': '—Ç—Ä–µ–Ω–¥—ã',
            '–ø–æ–ø—É–ª—è—Ä–Ω': '–ø–æ–ø—É–ª—è—Ä–Ω–æ'
        }

    def correct_spelling(self, text):
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—á–∞—Ç–æ–∫ –≤ —Ç–µ–∫—Å—Ç–µ"""
        words = text.lower().split()
        corrected_words = []
        
        for word in words:
            # –£–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
            clean_word = re.sub(r'[^\w]', '', word)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä–µ
            if clean_word in self.correction_dict:
                corrected_words.append(self.correction_dict[clean_word])
                continue
            
            # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ —Å–ª–æ–≤–∞
            best_match = None
            best_score = 0
            
            for intent_words in self.intent_patterns.values():
                for correct_word in intent_words:
                    if len(clean_word) > 2 and len(correct_word) > 2:
                        score = fuzz.ratio(clean_word, correct_word)
                        if score > 75 and score > best_score:
                            best_score = score
                            best_match = correct_word
            
            if best_match:
                corrected_words.append(best_match)
            else:
                corrected_words.append(word)
        
        return ' '.join(corrected_words)

    def classify_intent_advanced(self, text):
        """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ–ø–µ—á–∞—Ç–æ–∫"""
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–µ—á–∞—Ç–∫–∏
        corrected_text = self.correct_spelling(text)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏—è
        intent_scores = defaultdict(float)
        
        for intent, keywords in self.intent_patterns.items():
            for keyword in keywords:
                # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                if keyword in corrected_text.lower():
                    intent_scores[intent] += 1.0
                
                # –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                for word in corrected_text.lower().split():
                    similarity = fuzz.ratio(word, keyword)
                    if similarity > 80:
                        intent_scores[intent] += similarity / 100.0
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        if any(word in corrected_text.lower() for word in ['–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö', 'api', 'backend', '—Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞']):
            intent_scores['create_complex'] += 0.5
        
        if any(word in corrected_text.lower() for word in ['landing', '–ª–µ–Ω–¥–∏–Ω–≥', '–ø—Ä–æ–º–æ', '–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è']):
            intent_scores['create_website'] += 0.5
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω–æ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ
        if intent_scores:
            best_intent = max(intent_scores, key=intent_scores.get)
            confidence = intent_scores[best_intent]
            return {
                'intent': best_intent,
                'confidence': confidence,
                'corrected_text': corrected_text,
                'suggestions': self.generate_suggestions(best_intent, corrected_text)
            }
        
        return {
            'intent': 'general',
            'confidence': 0.0,
            'corrected_text': corrected_text,
            'suggestions': []
        }

    def generate_suggestions(self, intent, text):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–º–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è"""
        suggestions = {
            'create_game': [
                "üéÆ –°–æ–∑–¥–∞—Ç—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–º–µ–π–∫—É —Å AI-—Å–æ–ø–µ—Ä–Ω–∏–∫–æ–º",
                "üß© –†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å 3D —Ç–µ—Ç—Ä–∏—Å —Å –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–æ–º", 
                "üèÉ –°–¥–µ–ª–∞—Ç—å endless runner —Å –ø—Ä–æ—Ü–µ–¥—É—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π",
                "üéØ –ò–≥—Ä–∞-–≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"
            ],
            'create_app': [
                "üì± TODO —Å AI-–ø–æ–º–æ—â–Ω–∏–∫–æ–º –∏ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Ä–∞–±–æ—Ç–æ–π",
                "üí™ –§–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–∫–µ—Ä —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–ª–∞–Ω–∞–º–∏",
                "üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π",
                "üìä CRM-—Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –º–∞–ª–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞"
            ],
            'create_website': [
                "üåê –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ª–µ–Ω–¥–∏–Ω–≥ —Å A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º",
                "üõí –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω —Å —Å–∏—Å—Ç–µ–º–æ–π –ø–ª–∞—Ç–µ–∂–µ–π",
                "üìù –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å–∞–π—Ç —Å CMS",
                "üé® –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ —Å –∞–Ω–∏–º–∞—Ü–∏—è–º–∏ –∏ –≥–∞–ª–µ—Ä–µ–µ–π"
            ],
            'create_complex': [
                "‚ö° Enterprise CRM —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º–∏",
                "üìä BI-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Å real-time –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π",
                "üîê –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏",
                "üåç –ú–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞"
            ],
            'show_trends': [
                "üìà –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã 2024",
                "üíé –¢–û–ü-10 –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö –Ω–∏—à",
                "üöÄ –ë—ã—Å—Ç—Ä–æ—Ä–∞—Å—Ç—É—â–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
                "üí∞ –ê–Ω–∞–ª–∏–∑ ROI –ø–æ —Å—Ñ–µ—Ä–∞–º"
            ]
        }
        
        return suggestions.get(intent, [
            "üí° –ü–æ–º–æ—á—å —Å –≤—ã–±–æ—Ä–æ–º –ø—Ä–æ–µ–∫—Ç–∞",
            "üéØ –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã —É—Å–ø–µ—à–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π",
            "üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä—ã–Ω–æ–∫",
            "üöÄ –ù–∞—á–∞—Ç—å —Å MVP"
        ])
