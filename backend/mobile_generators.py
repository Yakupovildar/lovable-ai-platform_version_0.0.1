#!/usr/bin/env python3
"""
MOBILE PROJECT GENERATORS
–°–∏—Å—Ç–µ–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞—Ç–∏–≤–Ω—ã—Ö –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è iOS –∏ Android
"""

import json
import uuid
from typing import Dict, List, Optional, Any
from datetime import datetime
from pathlib import Path
import base64

class MobileProjectGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π iOS –∏ Android"""
    
    def __init__(self):
        self.platforms = {
            'ios': {
                'language': 'swift',
                'framework': 'swiftui',
                'build_system': 'xcode',
                'dependencies': 'spm',  # Swift Package Manager
                'min_version': '15.0'
            },
            'android': {
                'language': 'kotlin',
                'framework': 'jetpack_compose',
                'build_system': 'gradle',
                'dependencies': 'gradle',
                'min_version': '24'
            },
            'react_native': {
                'framework': 'react_native',
                'language': 'typescript',
                'build_system': 'metro',
                'dependencies': 'npm'
            }
        }
        
    def generate_ios_mentor_app(self, app_name: str, features: List[str]) -> Dict[str, str]:
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—ã–π iOS –ø—Ä–æ–µ–∫—Ç AI –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ —Å 3D –∏ –≥–æ–ª–æ—Å–æ–º"""
        
        project_id = str(uuid.uuid4())
        bundle_id = f"com.aimentor.{app_name.lower().replace(' ', '')}"
        
        return {
            # –û–°–ù–û–í–ù–û–ô –ü–†–û–ï–ö–¢
            f'{app_name}.xcodeproj/project.pbxproj': self._generate_xcode_project(app_name, bundle_id),
            
            # SWIFT UI –ò–ù–¢–ï–†–§–ï–ô–°
            f'{app_name}/ContentView.swift': self._generate_main_content_view(app_name, features),
            f'{app_name}/MentorSelectionView.swift': self._generate_mentor_selection_view(),
            f'{app_name}/ChatView.swift': self._generate_chat_view(),
            f'{app_name}/Avatar3DView.swift': self._generate_3d_avatar_view(),
            
            # AI –ò –ì–û–õ–û–°–û–í–´–ï –ú–û–î–£–õ–ò
            f'{app_name}/MentorViewModel.swift': self._generate_ai_mentor_viewmodel(),
            f'{app_name}/VoiceRecognizer.swift': self._generate_voice_recognition(),
            f'{app_name}/SpeechSynthesizer.swift': self._generate_text_to_speech(),
            f'{app_name}/AudioManager.swift': self._generate_audio_manager(),
            
            # –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–•
            f'{app_name}/Models/MentorModel.swift': self._generate_mentor_model(),
            f'{app_name}/Models/MessageModel.swift': self._generate_message_model(),
            f'{app_name}/Models/VoiceSettings.swift': self._generate_voice_settings(),
            
            # 3D –ò –ê–ù–ò–ú–ê–¶–ò–ò
            f'{app_name}/3D/Avatar3DRenderer.swift': self._generate_3d_renderer(),
            f'{app_name}/3D/FaceAnimator.swift': self._generate_face_animator(),
            f'{app_name}/3D/EmotionEngine.swift': self._generate_emotion_engine(),
            
            # –°–ï–¢–ï–í–´–ï –ú–û–î–£–õ–ò
            f'{app_name}/Network/AIService.swift': self._generate_ai_service(),
            f'{app_name}/Network/VoiceService.swift': self._generate_voice_service(),
            f'{app_name}/Network/MentorDataLoader.swift': self._generate_mentor_data_loader(),
            
            # –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò –ú–ï–¢–ê–î–ê–ù–ù–´–ï
            f'{app_name}/Info.plist': self._generate_info_plist(app_name, bundle_id),
            'Package.swift': self._generate_spm_dependencies(features),
            'README.md': self._generate_ios_readme(app_name, features),
            
            # –†–ï–°–£–†–°–´
            f'{app_name}/Assets.xcassets/AppIcon.appiconset/Contents.json': self._generate_app_icon_config(),
            f'{app_name}/Localizable.strings': self._generate_russian_localization(),
        }
    
    def _generate_main_content_view(self, app_name: str, features: List[str]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω SwiftUI —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º"""
        return f'''import SwiftUI
import RealityKit
import Speech
import AVFoundation

struct ContentView: View {{
    @StateObject private var mentorViewModel = MentorViewModel()
    @StateObject private var voiceRecognizer = VoiceRecognizer()
    @StateObject private var speechSynthesizer = SpeechSynthesizer()
    @State private var selectedMentor: MentorModel? = nil
    @State private var showMentorSelection = false
    
    var body: some View {{
        NavigationView {{
            ZStack {{
                // –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
                LinearGradient(
                    gradient: Gradient(colors: [.purple.opacity(0.8), .blue.opacity(0.6)]),
                    startPoint: .topLeading,
                    endPoint: .bottomTrailing
                )
                .ignoresSafeArea()
                
                VStack(spacing: 30) {{
                    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
                    VStack {{
                        Text("üß† {app_name}")
                            .font(.largeTitle)
                            .fontWeight(.bold)
                            .foregroundColor(.white)
                        
                        Text("–ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –æ—Ç –º–∏–ª–ª–∏–∞—Ä–¥–µ—Ä–æ–≤")
                            .font(.headline)
                            .foregroundColor(.white.opacity(0.8))
                            .multilineTextAlignment(.center)
                    }}
                    .padding(.top, 50)
                    
                    // 3D –ü—Ä–µ–≤—å—é –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞
                    if let mentor = selectedMentor {{
                        Avatar3DView(mentor: mentor)
                            .frame(width: 200, height: 200)
                            .clipShape(Circle())
                            .shadow(radius: 20)
                    }} else {{
                        Circle()
                            .fill(.white.opacity(0.2))
                            .frame(width: 200, height: 200)
                            .overlay(
                                Image(systemName: "person.3.sequence.fill")
                                    .font(.system(size: 60))
                                    .foregroundColor(.white.opacity(0.7))
                            )
                    }}
                    
                    // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                    VStack(spacing: 20) {{
                        Button(action: {{
                            showMentorSelection = true
                        }}) {{
                            HStack {{
                                Image(systemName: "person.crop.square.filled.and.at.rectangle")
                                Text("–í—ã–±—Ä–∞—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞")
                            }}
                            .font(.headline)
                            .foregroundColor(.white)
                            .frame(maxWidth: .infinity)
                            .frame(height: 55)
                            .background(.ultraThinMaterial)
                            .clipShape(RoundedRectangle(cornerRadius: 15))
                        }}
                        
                        if selectedMentor != nil {{
                            NavigationLink(destination: ChatView(mentor: selectedMentor!, 
                                                                voiceRecognizer: voiceRecognizer,
                                                                speechSynthesizer: speechSynthesizer)) {{
                                HStack {{
                                    Image(systemName: "message.circle.fill")
                                    Text("–ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ")
                                }}
                                .font(.headline)
                                .foregroundColor(.white)
                                .frame(maxWidth: .infinity)
                                .frame(height: 55)
                                .background(.green.opacity(0.7))
                                .clipShape(RoundedRectangle(cornerRadius: 15))
                            }}
                        }}
                    }}
                    .padding(.horizontal, 30)
                    
                    Spacer()
                    
                    // –°—Ç–∞—Ç—É—Å –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                    HStack {{
                        VStack {{
                            Image(systemName: voiceRecognizer.isAvailable ? "checkmark.circle.fill" : "xmark.circle.fill")
                                .foregroundColor(voiceRecognizer.isAvailable ? .green : .red)
                            Text("–ì–æ–ª–æ—Å")
                                .font(.caption)
                                .foregroundColor(.white.opacity(0.7))
                        }}
                        
                        Spacer()
                        
                        VStack {{
                            Image(systemName: mentorViewModel.isAIReady ? "brain.head.profile" : "brain.head.profile.fill")
                                .foregroundColor(mentorViewModel.isAIReady ? .green : .orange)
                            Text("–ò–ò")
                                .font(.caption)
                                .foregroundColor(.white.opacity(0.7))
                        }}
                        
                        Spacer()
                        
                        VStack {{
                            Image(systemName: "cube.transparent")
                                .foregroundColor(.blue)
                            Text("3D")
                                .font(.caption)
                                .foregroundColor(.white.opacity(0.7))
                        }}
                    }}
                    .padding(.horizontal, 40)
                    .padding(.bottom, 30)
                }}
            }}
        }}
        .sheet(isPresented: $showMentorSelection) {{
            MentorSelectionView(selectedMentor: $selectedMentor)
        }}
        .onAppear {{
            requestPermissions()
            mentorViewModel.initialize()
        }}
    }}
    
    private func requestPermissions() {{
        SFSpeechRecognizer.requestAuthorization {{ status in
            DispatchQueue.main.async {{
                voiceRecognizer.authorizationStatus = status
            }}
        }}
        
        AVAudioSession.sharedInstance().requestRecordPermission {{ granted in
            DispatchQueue.main.async {{
                voiceRecognizer.hasAudioPermission = granted
            }}
        }}
    }}
}}

#Preview {{
    ContentView()
}}
'''
    
    def _generate_voice_recognition(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏"""
        return '''import Speech
import AVFoundation
import Combine

@MainActor
class VoiceRecognizer: ObservableObject {
    private let speechRecognizer = SFSpeechRecognizer(locale: Locale(identifier: "ru-RU"))!
    private var recognitionRequest: SFSpeechAudioBufferRecognitionRequest?
    private var recognitionTask: SFSpeechRecognitionTask?
    private let audioEngine = AVAudioEngine()
    
    @Published var recognizedText = ""
    @Published var isRecording = false
    @Published var isAvailable = false
    @Published var authorizationStatus: SFSpeechRecognizerAuthorizationStatus = .notDetermined
    @Published var hasAudioPermission = false
    
    private var audioSession: AVAudioSession {
        AVAudioSession.sharedInstance()
    }
    
    init() {
        setupSpeechRecognizer()
    }
    
    private func setupSpeechRecognizer() {
        speechRecognizer.delegate = self
        isAvailable = speechRecognizer.isAvailable && hasAudioPermission
    }
    
    func startRecording() async throws {
        guard !isRecording else { return }
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞—É–¥–∏–æ—Å–µ—Å—Å–∏—é
        try audioSession.setCategory(.record, mode: .measurement, options: .duckOthers)
        try audioSession.setActive(true, options: .notifyOthersOnDeactivation)
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É
        recognitionTask?.cancel()
        recognitionTask = nil
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        recognitionRequest = SFSpeechAudioBufferRecognitionRequest()
        guard let recognitionRequest = recognitionRequest else {
            throw VoiceRecognitionError.requestCreationFailed
        }
        
        recognitionRequest.shouldReportPartialResults = true
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞—É–¥–∏–æ–¥–≤–∏–∂–æ–∫
        let inputNode = audioEngine.inputNode
        let recordingFormat = inputNode.outputFormat(forBus: 0)
        
        inputNode.installTap(onBus: 0, bufferSize: 1024, format: recordingFormat) { buffer, _ in
            recognitionRequest.append(buffer)
        }
        
        audioEngine.prepare()
        try audioEngine.start()
        
        isRecording = true
        recognizedText = ""
        
        // –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
        recognitionTask = speechRecognizer.recognitionTask(with: recognitionRequest) { [weak self] result, error in
            guard let self = self else { return }
            
            if let result = result {
                DispatchQueue.main.async {
                    self.recognizedText = result.bestTranscription.formattedString
                }
            }
            
            if error != nil || (result?.isFinal ?? false) {
                DispatchQueue.main.async {
                    self.stopRecording()
                }
            }
        }
    }
    
    func stopRecording() {
        guard isRecording else { return }
        
        audioEngine.stop()
        audioEngine.inputNode.removeTap(onBus: 0)
        recognitionRequest?.endAudio()
        recognitionTask?.cancel()
        
        recognitionRequest = nil
        recognitionTask = nil
        isRecording = false
        
        try? audioSession.setActive(false)
    }
    
    func toggleRecording() async {
        if isRecording {
            stopRecording()
        } else {
            do {
                try await startRecording()
            } catch {
                print("–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏: \\(error.localizedDescription)")
            }
        }
    }
}

extension VoiceRecognizer: SFSpeechRecognizerDelegate {
    func speechRecognizer(_ speechRecognizer: SFSpeechRecognizer, availabilityDidChange available: Bool) {
        isAvailable = available && hasAudioPermission
    }
}

enum VoiceRecognitionError: Error, LocalizedError {
    case requestCreationFailed
    case audioEngineError
    case permissionDenied
    
    var errorDescription: String? {
        switch self {
        case .requestCreationFailed:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏"
        case .audioEngineError:
            return "–û—à–∏–±–∫–∞ –∞—É–¥–∏–æ–¥–≤–∏–∂–∫–∞"
        case .permissionDenied:
            return "–ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞"
        }
    }
}
'''

    def _generate_text_to_speech(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–æ–¥—É–ª—å —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –≥–æ–ª–æ—Å–∞–º–∏"""
        return '''import AVFoundation
import Combine

@MainActor
class SpeechSynthesizer: ObservableObject {
    private let synthesizer = AVSpeechSynthesizer()
    
    @Published var isSpeaking = false
    @Published var currentText = ""
    @Published var speechRate: Float = 0.5
    @Published var speechPitch: Float = 1.0
    @Published var speechVolume: Float = 1.0
    
    // –ì–æ–ª–æ—Å–∞ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤ (—ç–º—É–ª—è—Ü–∏—è)
    private let mentorVoices: [String: String] = [
        "elon_musk": "ru-RU",
        "bill_gates": "ru-RU", 
        "jeff_bezos": "ru-RU",
        "warren_buffett": "ru-RU"
    ]
    
    init() {
        synthesizer.delegate = self
    }
    
    func speak(_ text: String, mentor: String = "elon_musk") {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Ä–µ—á—å
        if synthesizer.isSpeaking {
            synthesizer.stopSpeaking(at: .immediate)
        }
        
        let utterance = AVSpeechUtterance(string: text)
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥–æ–ª–æ—Å –¥–ª—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞
        let voiceLanguage = mentorVoices[mentor] ?? "ru-RU"
        utterance.voice = AVSpeechSynthesisVoice(language: voiceLanguage)
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–æ–ª–æ—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞
        switch mentor {
        case "elon_musk":
            utterance.rate = 0.55
            utterance.pitchMultiplier = 1.1
            utterance.volume = 0.9
        case "bill_gates":
            utterance.rate = 0.45
            utterance.pitchMultiplier = 0.95
            utterance.volume = 0.85
        case "jeff_bezos":
            utterance.rate = 0.5
            utterance.pitchMultiplier = 0.9
            utterance.volume = 0.9
        case "warren_buffett":
            utterance.rate = 0.4
            utterance.pitchMultiplier = 0.85
            utterance.volume = 0.8
        default:
            utterance.rate = speechRate
            utterance.pitchMultiplier = speechPitch
            utterance.volume = speechVolume
        }
        
        currentText = text
        synthesizer.speak(utterance)
    }
    
    func stop() {
        synthesizer.stopSpeaking(at: .immediate)
        isSpeaking = false
        currentText = ""
    }
    
    func pause() {
        synthesizer.pauseSpeaking(at: .immediate)
    }
    
    func resume() {
        synthesizer.continueSpeaking()
    }
}

extension SpeechSynthesizer: AVSpeechSynthesizerDelegate {
    func speechSynthesizer(_ synthesizer: AVSpeechSynthesizer, didStart utterance: AVSpeechUtterance) {
        isSpeaking = true
    }
    
    func speechSynthesizer(_ synthesizer: AVSpeechSynthesizer, didFinish utterance: AVSpeechUtterance) {
        isSpeaking = false
        currentText = ""
    }
    
    func speechSynthesizer(_ synthesizer: AVSpeechSynthesizer, didCancel utterance: AVSpeechUtterance) {
        isSpeaking = false
        currentText = ""
    }
}
'''

    def _generate_3d_avatar_view(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç 3D –∞–≤–∞—Ç–∞—Ä —Å –∞–Ω–∏–º–∞—Ü–∏—è–º–∏"""
        return '''import SwiftUI
import RealityKit
import Combine

struct Avatar3DView: UIViewRepresentable {
    let mentor: MentorModel
    @State private var arView: ARView?
    @StateObject private var emotionEngine = EmotionEngine()
    
    func makeUIView(context: Context) -> ARView {
        let arView = ARView(frame: .zero)
        self.arView = arView
        
        // –°–æ–∑–¥–∞–µ–º 3D —Å—Ü–µ–Ω—É
        setupScene(arView)
        
        return arView
    }
    
    func updateUIView(_ uiView: ARView, context: Context) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —ç–º–æ—Ü–∏–π
        updateAvatarEmotion(uiView)
    }
    
    private func setupScene(_ arView: ARView) {
        // –°–æ–∑–¥–∞–µ–º —è–∫–æ—Ä—å –¥–ª—è 3D –º–æ–¥–µ–ª–∏
        let anchor = AnchorEntity()
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º 3D –º–æ–¥–µ–ª—å –≥–æ–ª–æ–≤—ã –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞
        let avatarEntity = createAvatarEntity(for: mentor)
        anchor.addChild(avatarEntity)
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–µ
        let lightEntity = DirectionalLight()
        lightEntity.light.intensity = 2000
        lightEntity.position = [0, 1, 1]
        anchor.addChild(lightEntity)
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ü–µ–Ω—É
        arView.scene.addAnchor(anchor)
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–∞–º–µ—Ä—É
        arView.cameraMode = .nonAR
    }
    
    private func createAvatarEntity(for mentor: MentorModel) -> Entity {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã –∑–∞–≥—Ä—É–∂–∞–ª–∞—Å—å 3D –º–æ–¥–µ–ª—å
        let entity = Entity()
        
        // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –≥–µ–æ–º–µ—Ç—Ä–∏—é –≥–æ–ª–æ–≤—ã
        let headMesh = MeshResource.generateSphere(radius: 0.15)
        let headMaterial = createMentorMaterial(for: mentor)
        let headEntity = ModelEntity(mesh: headMesh, materials: [headMaterial])
        
        // –°–æ–∑–¥–∞–µ–º –≥–ª–∞–∑–∞
        let eyeMesh = MeshResource.generateSphere(radius: 0.02)
        let eyeMaterial = SimpleMaterial(color: .white, isMetallic: false)
        
        let leftEye = ModelEntity(mesh: eyeMesh, materials: [eyeMaterial])
        leftEye.position = [-0.05, 0.05, 0.12]
        
        let rightEye = ModelEntity(mesh: eyeMesh, materials: [eyeMaterial])
        rightEye.position = [0.05, 0.05, 0.12]
        
        // –°–æ–∑–¥–∞–µ–º —Ä–æ—Ç
        let mouthMesh = MeshResource.generateBox(width: 0.06, height: 0.02, depth: 0.01)
        let mouthMaterial = SimpleMaterial(color: .red, isMetallic: false)
        let mouth = ModelEntity(mesh: mouthMesh, materials: [mouthMaterial])
        mouth.position = [0, -0.05, 0.12]
        
        entity.addChild(headEntity)
        entity.addChild(leftEye)
        entity.addChild(rightEye)
        entity.addChild(mouth)
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∞–Ω–∏–º–∞—Ü–∏–∏
        let animationComponent = AvatarAnimationComponent()
        entity.components.set(animationComponent)
        
        return entity
    }
    
    private func createMentorMaterial(for mentor: MentorModel) -> Material {
        var material = SimpleMaterial()
        
        switch mentor.id {
        case "elon_musk":
            material.color = .init(tint: .init(red: 0.9, green: 0.8, blue: 0.7, alpha: 1.0))
        case "bill_gates":
            material.color = .init(tint: .init(red: 0.95, green: 0.85, blue: 0.75, alpha: 1.0))
        case "jeff_bezos":
            material.color = .init(tint: .init(red: 0.85, green: 0.75, blue: 0.65, alpha: 1.0))
        case "warren_buffett":
            material.color = .init(tint: .init(red: 0.95, green: 0.9, blue: 0.8, alpha: 1.0))
        default:
            material.color = .init(tint: .gray)
        }
        
        return material
    }
    
    private func updateAvatarEmotion(_ arView: ARView) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –ª–∏—Ü–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π —ç–º–æ—Ü–∏–∏
        guard let anchor = arView.scene.anchors.first else { return }
        
        let currentEmotion = emotionEngine.currentEmotion
        applyEmotionAnimation(to: anchor, emotion: currentEmotion)
    }
    
    private func applyEmotionAnimation(to anchor: AnchorEntity, emotion: EmotionType) {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —ç–º–æ—Ü–∏–∏
        let duration: Float = 0.5
        
        switch emotion {
        case .happy:
            // –ê–Ω–∏–º–∞—Ü–∏—è —É–ª—ã–±–∫–∏
            animateMouth(anchor: anchor, scaleY: 1.2, duration: duration)
        case .thinking:
            // –ê–Ω–∏–º–∞—Ü–∏—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π
            animateHead(anchor: anchor, rotation: [0, 0.1, 0], duration: duration)
        case .explaining:
            // –ê–Ω–∏–º–∞—Ü–∏—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
            animateHead(anchor: anchor, position: [0, 0.02, 0], duration: duration)
        case .surprised:
            // –ê–Ω–∏–º–∞—Ü–∏—è —É–¥–∏–≤–ª–µ–Ω–∏—è
            animateEyes(anchor: anchor, scale: 1.5, duration: duration)
        case .neutral:
            // –í–æ–∑–≤—Ä–∞—Ç –≤ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            resetAnimations(anchor: anchor, duration: duration)
        }
    }
    
    private func animateMouth(anchor: AnchorEntity, scaleY: Float, duration: Float) {
        // –ù–∞—Ö–æ–¥–∏–º —Ä–æ—Ç –∏ –∞–Ω–∏–º–∏—Ä—É–µ–º –µ–≥–æ
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
    }
    
    private func animateHead(anchor: AnchorEntity, rotation: SIMD3<Float>? = nil, position: SIMD3<Float>? = nil, duration: Float) {
        // –ê–Ω–∏–º–∏—Ä—É–µ–º –≥–æ–ª–æ–≤—É
    }
    
    private func animateEyes(anchor: AnchorEntity, scale: Float, duration: Float) {
        // –ê–Ω–∏–º–∏—Ä—É–µ–º –≥–ª–∞–∑–∞
    }
    
    private func resetAnimations(anchor: AnchorEntity, duration: Float) {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –∫ –±–∞–∑–æ–≤–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    }
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞
struct AvatarAnimationComponent: Component {
    var isAnimating = false
    var currentAnimation: String = "idle"
}

// –¢–∏–ø—ã —ç–º–æ—Ü–∏–π –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞
enum EmotionType {
    case neutral
    case happy
    case thinking
    case explaining
    case surprised
}

// –î–≤–∏–∂–æ–∫ —ç–º–æ—Ü–∏–π
class EmotionEngine: ObservableObject {
    @Published var currentEmotion: EmotionType = .neutral
    
    func setEmotion(_ emotion: EmotionType) {
        withAnimation(.easeInOut(duration: 0.3)) {
            currentEmotion = emotion
        }
    }
    
    func analyzeTextForEmotion(_ text: String) -> EmotionType {
        let lowercased = text.lowercased()
        
        if lowercased.contains("?") {
            return .thinking
        } else if lowercased.contains("!") {
            return .surprised
        } else if lowercased.contains("—Ö–æ—Ä–æ—à–æ") || lowercased.contains("–æ—Ç–ª–∏—á–Ω–æ") {
            return .happy
        } else if lowercased.contains("—Ä–µ–∫–æ–º–µ–Ω–¥—É—é") || lowercased.contains("—Å–æ–≤–µ—Ç—É—é") {
            return .explaining
        } else {
            return .neutral
        }
    }
}
'''

    def _generate_info_plist(self, app_name: str, bundle_id: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Info.plist —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è–º–∏"""
        return f'''<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>CFBundleDevelopmentRegion</key>
    <string>ru</string>
    <key>CFBundleDisplayName</key>
    <string>{app_name}</string>
    <key>CFBundleExecutable</key>
    <string>$(EXECUTABLE_NAME)</string>
    <key>CFBundleIdentifier</key>
    <string>{bundle_id}</string>
    <key>CFBundleInfoDictionaryVersion</key>
    <string>6.0</string>
    <key>CFBundleName</key>
    <string>$(PRODUCT_NAME)</string>
    <key>CFBundlePackageType</key>
    <string>APPL</string>
    <key>CFBundleShortVersionString</key>
    <string>1.0</string>
    <key>CFBundleVersion</key>
    <string>1</string>
    <key>LSRequiresIPhoneOS</key>
    <true/>
    
    <!-- –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –≥–æ–ª–æ—Å–∞ –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ -->
    <key>NSMicrophoneUsageDescription</key>
    <string>–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≤–∞—à–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É</string>
    <key>NSSpeechRecognitionUsageDescription</key>
    <string>–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –≤–∞—à–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤</string>
    
    <!-- –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –∫–∞–º–µ—Ä—ã (–¥–ª—è –±—É–¥—É—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π AR) -->
    <key>NSCameraUsageDescription</key>
    <string>–ö–∞–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å 3D –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–º</string>
    
    <!-- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã -->
    <key>UISupportedInterfaceOrientations</key>
    <array>
        <string>UIInterfaceOrientationPortrait</string>
        <string>UIInterfaceOrientationLandscapeLeft</string>
        <string>UIInterfaceOrientationLandscapeRight</string>
    </array>
    
    <!-- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ iPad -->
    <key>UISupportedInterfaceOrientations~ipad</key>
    <array>
        <string>UIInterfaceOrientationPortrait</string>
        <string>UIInterfaceOrientationPortraitUpsideDown</string>
        <string>UIInterfaceOrientationLandscapeLeft</string>
        <string>UIInterfaceOrientationLandscapeRight</string>
    </array>
    
    <!-- –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è iOS -->
    <key>LSMinimumSystemVersion</key>
    <string>15.0</string>
    
    <!-- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–µ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ -->
    <key>UIUserInterfaceStyle</key>
    <string>Automatic</string>
    
    <!-- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ü–µ–Ω—ã -->
    <key>UIApplicationSceneManifest</key>
    <dict>
        <key>UIApplicationSupportsMultipleScenes</key>
        <true/>
        <key>UISceneConfigurations</key>
        <dict>
            <key>UIWindowSceneSessionRoleApplication</key>
            <array>
                <dict>
                    <key>UISceneConfigurationName</key>
                    <string>Default Configuration</string>
                    <key>UISceneDelegateClassName</key>
                    <string>$(PRODUCT_MODULE_NAME).SceneDelegate</string>
                </dict>
            </array>
        </dict>
    </dict>
</dict>
</plist>
'''

    def _generate_spm_dependencies(self, features: List[str]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Package.swift —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏"""
        return '''// swift-tools-version: 5.9
import PackageDescription

let package = Package(
    name: "AIMentorApp",
    platforms: [
        .iOS(.v15)
    ],
    products: [
        .library(
            name: "AIMentorApp",
            targets: ["AIMentorApp"]),
    ],
    dependencies: [
        // OpenAI –¥–ª—è AI —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        .package(url: "https://github.com/MacPaw/OpenAI", from: "0.6.0"),
        
        // Alamofire –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        .package(url: "https://github.com/Alamofire/Alamofire.git", from: "5.8.0"),
        
        // SwiftUI –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        .package(url: "https://github.com/siteline/SwiftUI-Introspect", from: "0.12.0"),
        
        // –ê–Ω–∏–º–∞—Ü–∏–∏
        .package(url: "https://github.com/airbnb/lottie-ios.git", from: "4.3.0"),
        
        // –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        .package(url: "https://github.com/stephencelis/SQLite.swift.git", from: "0.14.1"),
        
        // JSON –æ–±—Ä–∞–±–æ—Ç–∫–∞
        .package(url: "https://github.com/SwiftyJSON/SwiftyJSON.git", from: "5.0.1"),
        
        // Keychain –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        .package(url: "https://github.com/evgenyneu/keychain-swift.git", from: "20.0.0"),
    ],
    targets: [
        .target(
            name: "AIMentorApp",
            dependencies: [
                "OpenAI",
                "Alamofire",
                .product(name: "SwiftUIIntrospect", package: "SwiftUI-Introspect"),
                .product(name: "Lottie", package: "lottie-ios"),
                .product(name: "SQLite", package: "SQLite.swift"),
                "SwiftyJSON",
                .product(name: "KeychainSwift", package: "keychain-swift")
            ]),
        .testTarget(
            name: "AIMentorAppTests",
            dependencies: ["AIMentorApp"]),
    ]
)
'''

    def generate_android_mentor_app(self, app_name: str, features: List[str]) -> Dict[str, str]:
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—ã–π Android –ø—Ä–æ–µ–∫—Ç AI –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞"""
        
        package_name = f"com.aimentor.{app_name.lower().replace(' ', '').replace('-', '')}"
        
        return {
            # GRADLE –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
            'build.gradle': self._generate_android_build_gradle(app_name, package_name),
            'app/build.gradle': self._generate_app_build_gradle(package_name),
            'gradle.properties': self._generate_gradle_properties(),
            'settings.gradle': self._generate_settings_gradle(app_name),
            
            # MANIFEST –ò –†–ï–°–£–†–°–´
            'app/src/main/AndroidManifest.xml': self._generate_android_manifest(package_name, app_name),
            'app/src/main/res/values/strings.xml': self._generate_android_strings(app_name),
            'app/src/main/res/values/colors.xml': self._generate_android_colors(),
            'app/src/main/res/values/themes.xml': self._generate_android_themes(),
            
            # KOTLIN –ê–ö–¢–ò–í–ù–û–°–¢–ò
            f'app/src/main/java/{package_name.replace(".", "/")}/MainActivity.kt': self._generate_main_activity(package_name),
            f'app/src/main/java/{package_name.replace(".", "/")}/ui/screens/MentorSelectionScreen.kt': self._generate_mentor_selection_screen(package_name),
            f'app/src/main/java/{package_name.replace(".", "/")}/ui/screens/ChatScreen.kt': self._generate_chat_screen(package_name),
            
            # –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–•
            f'app/src/main/java/{package_name.replace(".", "/")}/models/MentorModel.kt': self._generate_android_mentor_model(package_name),
            f'app/src/main/java/{package_name.replace(".", "/")}/models/MessageModel.kt': self._generate_android_message_model(package_name),
            
            # –°–ï–†–í–ò–°–´
            f'app/src/main/java/{package_name.replace(".", "/")}/services/VoiceService.kt': self._generate_android_voice_service(package_name),
            f'app/src/main/java/{package_name.replace(".", "/")}/services/AIService.kt': self._generate_android_ai_service(package_name),
            f'app/src/main/java/{package_name.replace(".", "/")}/services/TTSService.kt': self._generate_android_tts_service(package_name),
            
            # 3D –ú–û–î–£–õ–¨
            f'app/src/main/java/{package_name.replace(".", "/")}/graphics/Avatar3DRenderer.kt': self._generate_android_3d_renderer(package_name),
            
            # –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø
            'README.md': self._generate_android_readme(app_name, features)
        }

# –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç...