from flask import Flask, request, jsonify, send_file
from flask_cors import CORS
from flask_socketio import SocketIO, emit
import os
import json
import zipfile
import tempfile
import shutil
from datetime import datetime
import uuid
from pathlib import Path
import subprocess
import threading
import queue
import time
import random
# Placeholder imports for missing modules
class SuperSmartAI:
    def generate_response(self, message):
        return {"type": "ai_response", "message": f"AI –ø–æ–ª—É—á–∏–ª: {message}"}

class SmartNLP:
    def correct_and_normalize(self, text):
        return text.lower().strip()

class ProjectVersionControl:
    def get_next_version(self, project_type):
        return "1.0"
    def save_project_version(self, project_id, version, files, message):
        pass
    def get_project_versions(self, project_id):
        return []

class UserInteractionLogger:
    def log_event(self, event, data, session_id=None):
        print(f"LOG: {event} - {data}")
    def log_interaction(self, session_id, message, processed, msg_type):
        print(f"INTERACTION: {session_id} - {message}")
    def log_incoming_message(self, session_id, message):
        print(f"INCOMING: {session_id} - {message}")
    def log_ai_response(self, session_id, response):
        print(f"AI_RESPONSE: {session_id}")
    def log_error(self, event, data):
        print(f"ERROR: {event} - {data}")

class AdvancedProjectGenerator:
    def generate_project(self, project_type, description, project_name, user_preferences=None):
        return generator.generate_project(project_type, description, project_name)
    def add_feature(self, project_id, feature):
        return True

app = Flask(__name__)
CORS(app)
socketio = SocketIO(app, cors_allowed_origins="*")

@app.route('/')
def serve_frontend():
    """Serve main frontend page"""
    return send_file('../index.html')

@app.route('/api/health')
def health_check():
    """Health check endpoint"""
    return jsonify({"status": "ok", "message": "Backend is running"})

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
PROJECTS_DIR = "projects"
TEMP_DIR = "temp"
LOGS_DIR = "logs"
USER_DATA_DIR = "user_data"
MAX_PROJECTS_PER_USER = 10

# –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
os.makedirs(PROJECTS_DIR, exist_ok=True)
os.makedirs(TEMP_DIR, exist_ok=True)
os.makedirs(LOGS_DIR, exist_ok=True)
os.makedirs(USER_DATA_DIR, exist_ok=True)

# –û—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤
project_queue = queue.Queue()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
ai_agent = SuperSmartAI()
nlp_processor = SmartNLP()
version_control = ProjectVersionControl()
interaction_logger = UserInteractionLogger()
advanced_generator = AdvancedProjectGenerator()

class ProjectGenerator:
    def __init__(self):
        self.templates = {
            "snake_game": {
                "files": {
                    "index.html": self.get_snake_html,
                    "styles.css": self.get_snake_css,
                    "script.js": self.get_snake_js,
                    "README.md": self.get_snake_readme
                }
            },
            "tetris_game": {
                "files": {
                    "index.html": self.get_tetris_html,
                    "styles.css": self.get_tetris_css,
                    "script.js": self.get_tetris_js,
                    "README.md": self.get_tetris_readme
                }
            },
            "todo_app": {
                "files": {
                    "index.html": self.get_todo_html,
                    "styles.css": self.get_todo_css,
                    "script.js": self.get_todo_js,
                    "README.md": self.get_todo_readme
                }
            },
            "weather_app": {
                "files": {
                    "index.html": self.get_weather_html,
                    "styles.css": self.get_weather_css,
                    "script.js": self.get_weather_js,
                    "README.md": self.get_weather_readme
                }
            }
        }

    def generate_project(self, project_type, description, project_name, style="modern"):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–µ–∫—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è"""
        try:
            project_id = str(uuid.uuid4())
            project_path = os.path.join(PROJECTS_DIR, project_id)
            os.makedirs(project_path, exist_ok=True)

            template = self.templates.get(project_type, self.templates["snake_game"])

            for file_path, generator_func in template["files"].items():
                full_path = os.path.join(project_path, file_path)
                os.makedirs(os.path.dirname(full_path), exist_ok=True)

                content = generator_func(project_name, description, style)
                with open(full_path, 'w', encoding='utf-8') as f:
                    f.write(content)
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
            interaction_logger.log_event("project_creation", {
                "project_id": project_id,
                "project_type": project_type,
                "project_name": project_name,
                "description": description,
                "style": style
            })

            return {
                "success": True,
                "project_id": project_id,
                "project_name": project_name,
                "project_type": project_type,
                "files": list(template["files"].keys())
            }
        except Exception as e:
            interaction_logger.log_error("project_creation_failed", {"error": str(e)})
            return {
                "success": False,
                "error": str(e)
            }

    def get_snake_html(self, project_name, description, style):
        return f"""<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{project_name}</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body class="{style}-theme">
    <div class="game-container">
        <div class="game-header">
            <h1>{project_name}</h1>
            <div class="game-info">
                <div class="score">–°—á—ë—Ç: <span id="score">0</span></div>
                <div class="high-score">–†–µ–∫–æ—Ä–¥: <span id="highScore">0</span></div>
            </div>
        </div>

        <div class="game-area">
            <canvas id="gameCanvas" width="400" height="400"></canvas>
            <div class="game-overlay" id="gameOverlay">
                <div class="start-screen">
                    <h2>üêç –ó–º–µ–π–∫–∞</h2>
                    <p>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: —Å—Ç—Ä–µ–ª–∫–∏ –∏–ª–∏ WASD</p>
                    <button id="startBtn" class="game-btn">–ù–∞—á–∞—Ç—å –∏–≥—Ä—É</button>
                </div>
            </div>
        </div>

        <div class="game-controls">
            <div class="mobile-controls">
                <button class="control-btn" data-direction="up">‚Üë</button>
                <div class="control-row">
                    <button class="control-btn" data-direction="left">‚Üê</button>
                    <button class="control-btn" data-direction="down">‚Üì</button>
                    <button class="control-btn" data-direction="right">‚Üí</button>
                </div>
            </div>
        </div>

        <div class="game-footer">
            <p>{description}</p>
            <p>–°–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é Lovable AI</p>
        </div>
    </div>

    <script src="script.js"></script>
</body>
</html>"""

    def get_snake_css(self, project_name, description, style):
        themes = {
            "modern": """
                --primary-color: #667eea;
                --secondary-color: #764ba2;
                --accent-color: #f093fb;
                --bg-color: #0f0f23;
                --text-color: #ffffff;
                --snake-color: #00ff88;
                --food-color: #ff6b6b;
            """,
            "retro": """
                --primary-color: #ff6b35;
                --secondary-color: #f7931e;
                --accent-color: #ffd23f;
                --bg-color: #1a1a1a;
                --text-color: #00ff00;
                --snake-color: #00ff00;
                --food-color: #ff0040;
            """,
            "neon": """
                --primary-color: #ff0080;
                --secondary-color: #8000ff;
                --accent-color: #00ff80;
                --bg-color: #000015;
                --text-color: #ffffff;
                --snake-color: #00ffff;
                --food-color: #ff0080;
            """
        }

        theme = themes.get(style, themes["modern"])

        return f"""* {{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}}

:root {{
    {theme}
}}

body {{
    font-family: 'Arial', sans-serif;
    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--text-color);
}}

.game-container {{
    background: rgba(255, 255, 255, 0.1);
    border-radius: 20px;
    padding: 2rem;
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
    text-align: center;
    max-width: 500px;
    width: 100%;
}}

.game-header h1 {{
    font-size: 2.5rem;
    margin-bottom: 1rem;
    background: linear-gradient(45deg, var(--accent-color), var(--primary-color));
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
}}

.game-info {{
    display: flex;
    justify-content: space-between;
    margin-bottom: 2rem;
    font-size: 1.2rem;
    font-weight: 600;
}}

.game-area {{
    position: relative;
    margin: 2rem 0;
}}

#gameCanvas {{
    border: 3px solid var(--accent-color);
    border-radius: 15px;
    background: var(--bg-color);
    box-shadow: inset 0 0 20px rgba(0, 0, 0, 0.5);
}}

.game-overlay {{
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.8);
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 15px;
}}

.start-screen {{
    text-align: center;
    color: white;
}}

.start-screen h2 {{
    font-size: 2rem;
    margin-bottom: 1rem;
}}

.game-btn {{
    background: linear-gradient(45deg, var(--primary-color), var(--accent-color));
    border: none;
    color: white;
    padding: 1rem 2rem;
    border-radius: 25px;
    font-size: 1.1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
}}

.game-btn:hover {{
    transform: translateY(-2px);
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.4);
}}

.mobile-controls {{
    margin-top: 2rem;
}}

.control-btn {{
    background: rgba(255, 255, 255, 0.2);
    border: 1px solid rgba(255, 255, 255, 0.3);
    color: white;
    width: 50px;
    height: 50px;
    border-radius: 10px;
    font-size: 1.5rem;
    margin: 5px;
    cursor: pointer;
    transition: all 0.3s ease;
}}

.control-btn:hover {{
    background: rgba(255, 255, 255, 0.3);
    transform: scale(1.1);
}}

.control-row {{
    display: flex;
    justify-content: center;
    align-items: center;
}}

.game-footer {{
    margin-top: 2rem;
    font-size: 0.9rem;
    opacity: 0.8;
}}

.hidden {{
    display: none !important;
}}

@media (max-width: 600px) {{
    .game-container {{
        padding: 1rem;
        margin: 1rem;
    }}

    #gameCanvas {{
        width: 100%;
        height: auto;
        max-width: 350px;
    }}

    .game-header h1 {{
        font-size: 2rem;
    }}

    .game-info {{
        font-size: 1rem;
    }}
}}"""

    def get_snake_js(self, project_name, description, style):
        return """class SnakeGame {
    constructor() {
        this.canvas = document.getElementById('gameCanvas');
        this.ctx = this.canvas.getContext('2d');
        this.scoreElement = document.getElementById('score');
        this.highScoreElement = document.getElementById('highScore');
        this.overlay = document.getElementById('gameOverlay');
        this.startBtn = document.getElementById('startBtn');

        this.gridSize = 20;
        this.tileCount = this.canvas.width / this.gridSize;

        this.reset();
        this.setupControls();
        this.loadHighScore();
    }

    reset() {
        this.snake = [
            {x: 10, y: 10}
        ];
        this.food = this.generateFood();
        this.dx = 0;
        this.dy = 0;
        this.score = 0;
        this.gameRunning = false;
        this.updateScore();
    }

    generateFood() {
        return {
            x: Math.floor(Math.random() * this.tileCount),
            y: Math.floor(Math.random() * this.tileCount)
        };
    }

    setupControls() {
        this.startBtn.addEventListener('click', () => this.startGame());

        document.addEventListener('keydown', (e) => {
            if (!this.gameRunning) return;

            switch(e.key) {
                case 'ArrowUp':
                case 'w':
                case 'W':
                    if (this.dy !== 1) {
                        this.dx = 0;
                        this.dy = -1;
                    }
                    break;
                case 'ArrowDown':
                case 's':
                case 'S':
                    if (this.dy !== -1) {
                        this.dx = 0;
                        this.dy = 1;
                    }
                    break;
                case 'ArrowLeft':
                case 'a':
                case 'A':
                    if (this.dx !== 1) {
                        this.dx = -1;
                        this.dy = 0;
                    }
                    break;
                case 'ArrowRight':
                case 'd':
                case 'D':
                    if (this.dx !== -1) {
                        this.dx = 1;
                        this.dy = 0;
                    }
                    break;
            }
        });

        document.querySelectorAll('.control-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                if (!this.gameRunning) return;

                const direction = btn.dataset.direction;
                switch(direction) {
                    case 'up':
                        if (this.dy !== 1) {
                            this.dx = 0;
                            this.dy = -1;
                        }
                        break;
                    case 'down':
                        if (this.dy !== -1) {
                            this.dx = 0;
                            this.dy = 1;
                        }
                        break;
                    case 'left':
                        if (this.dx !== 1) {
                            this.dx = -1;
                            this.dy = 0;
                        }
                        break;
                    case 'right':
                        if (this.dx !== -1) {
                            this.dx = 1;
                            this.dy = 0;
                        }
                        break;
                }
            });
        });
    }

    startGame() {
        this.reset();
        this.gameRunning = true;
        this.overlay.classList.add('hidden');
        this.dx = 1;
        this.dy = 0;
        this.gameLoop();
    }

    gameLoop() {
        if (!this.gameRunning) return;

        setTimeout(() => {
            this.clearCanvas();
            this.moveSnake();
            this.drawFood();
            this.drawSnake();

            if (this.checkGameOver()) {
                this.endGame();
                return;
            }

            this.gameLoop();
        }, 150);
    }

    clearCanvas() {
        this.ctx.fillStyle = 'rgba(15, 15, 35, 0.9)';
        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
    }

    moveSnake() {
        const head = {x: this.snake[0].x + this.dx, y: this.snake[0].y + this.dy};

        if (head.x === this.food.x && head.y === this.food.y) {
            this.score += 10;
            this.updateScore();
            this.food = this.generateFood();
        } else {
            this.snake.pop();
        }

        this.snake.unshift(head);
    }

    drawSnake() {
        this.ctx.fillStyle = '#00ff88';
        this.ctx.shadowColor = '#00ff88';
        this.ctx.shadowBlur = 10;

        this.snake.forEach((segment, index) => {
            if (index === 0) {
                this.ctx.fillStyle = '#00ffaa';
            } else {
                this.ctx.fillStyle = '#00ff88';
            }

            this.ctx.fillRect(
                segment.x * this.gridSize + 2,
                segment.y * this.gridSize + 2,
                this.gridSize - 4,
                this.gridSize - 4
            );
        });

        this.ctx.shadowBlur = 0;
    }

    drawFood() {
        this.ctx.fillStyle = '#ff6b6b';
        this.ctx.shadowColor = '#ff6b6b';
        this.ctx.shadowBlur = 15;

        this.ctx.beginPath();
        this.ctx.arc(
            this.food.x * this.gridSize + this.gridSize / 2,
            this.food.y * this.gridSize + this.gridSize / 2,
            this.gridSize / 2 - 2,
            0,
            2 * Math.PI
        );
        this.ctx.fill();

        this.ctx.shadowBlur = 0;
    }

    checkGameOver() {
        const head = this.snake[0];

        if (head.x < 0 || head.x >= this.tileCount || head.y < 0 || head.y >= this.tileCount) {
            return true;
        }

        for (let i = 1; i < this.snake.length; i++) {
            if (head.x === this.snake[i].x && head.y === this.snake[i].y) {
                return true;
            }
        }

        return false;
    }

    endGame() {
        this.gameRunning = false;
        this.updateHighScore();

        this.overlay.innerHTML = `
            <div class="start-screen">
                <h2>üéÆ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!</h2>
                <p>–í–∞—à —Å—á—ë—Ç: ${this.score}</p>
                <p>–†–µ–∫–æ—Ä–¥: ${this.getHighScore()}</p>
                <button id="restartBtn" class="game-btn">–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞</button>
            </div>
        `;

        this.overlay.classList.remove('hidden');

        document.getElementById('restartBtn').addEventListener('click', () => {
            this.startGame();
        });
    }

    updateScore() {
        this.scoreElement.textContent = this.score;
    }

    loadHighScore() {
        const highScore = localStorage.getItem('snakeHighScore') || 0;
        this.highScoreElement.textContent = highScore;
    }

    getHighScore() {
        return localStorage.getItem('snakeHighScore') || 0;
    }

    updateHighScore() {
        const currentHigh = parseInt(this.getHighScore());
        if (this.score > currentHigh) {
            localStorage.setItem('snakeHighScore', this.score);
            this.highScoreElement.textContent = this.score;
        }
    }
}

document.addEventListener('DOMContentLoaded', () => {
    new SnakeGame();
});"""

    def get_snake_readme(self, project_name, description, style):
        return f"""# {project_name}

{description}

## üéÆ –ò–≥—Ä–∞ "–ó–º–µ–π–∫–∞"

–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∏–≥—Ä–∞ –∑–º–µ–π–∫–∞ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º.

### –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
- üé® –ö—Ä–∞—Å–∏–≤—ã–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω
- üì± –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
- üéØ –°–∏—Å—Ç–µ–º–∞ –æ—á–∫–æ–≤ –∏ —Ä–µ–∫–æ—Ä–¥–æ–≤
- ‚å®Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏—à–∞–º–∏ –∏ —Å–µ–Ω—Å–æ—Ä–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
- üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

### –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:
- **–ö–ª–∞–≤–∏—à–∏:** –°—Ç—Ä–µ–ª–∫–∏ –∏–ª–∏ WASD
- **–ú–æ–±–∏–ª—å–Ω—ã–µ:** –°–µ–Ω—Å–æ—Ä–Ω—ã–µ –∫–Ω–æ–ø–∫–∏

### –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:
- HTML5 Canvas
- CSS3 —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞–º–∏ –∏ –∞–Ω–∏–º–∞—Ü–∏—è–º–∏
- Vanilla JavaScript ES6+

–°–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é Lovable AI"""

    def get_tetris_html(self, project_name, description, style):
        return f"""<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{project_name}</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body class="{style}-theme">
    <div class="game-container">
        <div class="game-header">
            <h1>{project_name}</h1>
            <div class="game-info">
                <div class="score">–°—á—ë—Ç: <span id="score">0</span></div>
                <div class="level">–£—Ä–æ–≤–µ–Ω—å: <span id="level">1</span></div>
                <div class="lines">–õ–∏–Ω–∏–∏: <span id="lines">0</span></div>
            </div>
        </div>

        <div class="game-area">
            <div class="next-piece">
                <h3>–°–ª–µ–¥—É—é—â–∞—è —Ñ–∏–≥—É—Ä–∞</h3>
                <canvas id="nextCanvas" width="120" height="120"></canvas>
            </div>
            <canvas id="gameCanvas" width="300" height="600"></canvas>
            <div class="game-overlay" id="gameOverlay">
                <div class="start-screen">
                    <h2>üß© –¢–µ—Ç—Ä–∏—Å</h2>
                    <p>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: —Å—Ç—Ä–µ–ª–∫–∏, –ø—Ä–æ–±–µ–ª –¥–ª—è –ø–æ–≤–æ—Ä–æ—Ç–∞</p>
                    <button id="startBtn" class="game-btn">–ù–∞—á–∞—Ç—å –∏–≥—Ä—É</button>
                </div>
            </div>
        </div>

        <div class="game-controls">
            <div class="mobile-controls">
                <button class="control-btn" data-action="rotate">‚Üª</button>
                <div class="control-row">
                    <button class="control-btn" data-action="left">‚Üê</button>
                    <button class="control-btn" data-action="down">‚Üì</button>
                    <button class="control-btn" data-action="right">‚Üí</button>
                </div>
            </div>
        </div>

        <div class="game-footer">
            <p>{description}</p>
            <p>–°–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é Lovable AI</p>
        </div>
    </div>

    <script src="script.js"></script>
</body>
</html>"""

    def get_tetris_css(self, project_name, description, style):
        return f"""/* CSS –¥–ª—è –¢–µ—Ç—Ä–∏—Å–∞ */
* {{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}}

:root {{
    --primary-color: #4a148c; /* Purple */
    --secondary-color: #00bcd4; /* Cyan */
    --accent-color: #ffeb3b; /* Yellow */
    --bg-color: #121212; /* Dark background */
    --text-color: #ffffff;
    --block-colors: #FF0D72, #0DC2FF, #0DFF72, #F538FF, #FFFB0D, #FF8E0D, #AD1457; /* Random colors for blocks */
}}

body {{
    font-family: 'Arial', sans-serif;
    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--text-color);
}}

.game-container {{
    background: rgba(255, 255, 255, 0.1);
    border-radius: 20px;
    padding: 2rem;
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
    text-align: center;
    max-width: 600px;
    width: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
}}

.game-header h1 {{
    font-size: 2.5rem;
    margin-bottom: 1rem;
    background: linear-gradient(45deg, var(--accent-color), var(--primary-color));
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
}}

.game-info {{
    display: flex;
    justify-content: space-around;
    width: 100%;
    margin-bottom: 2rem;
    font-size: 1.1rem;
    font-weight: 600;
}}

.game-area {{
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 20px;
    margin-bottom: 2rem;
}}

#gameCanvas {{
    border: 3px solid var(--accent-color);
    border-radius: 15px;
    background: var(--bg-color);
    box-shadow: inset 0 0 20px rgba(0, 0, 0, 0.5);
}}

.next-piece {{
    text-align: center;
}}

#nextCanvas {{
    border: 2px solid var(--accent-color);
    background: var(--bg-color);
    border-radius: 10px;
    margin-top: 10px;
}}

.game-overlay {{
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.8);
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 15px;
}}

.start-screen {{
    text-align: center;
    color: white;
}}

.start-screen h2 {{
    font-size: 2rem;
    margin-bottom: 1rem;
}}

.game-btn {{
    background: linear-gradient(45deg, var(--primary-color), var(--accent-color));
    border: none;
    color: white;
    padding: 1rem 2rem;
    border-radius: 25px;
    font-size: 1.1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
}}

.game-btn:hover {{
    transform: translateY(-2px);
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.4);
}}

.mobile-controls {{
    margin-top: 2rem;
}}

.control-btn {{
    background: rgba(255, 255, 255, 0.2);
    border: 1px solid rgba(255, 255, 255, 0.3);
    color: white;
    width: 50px;
    height: 50px;
    border-radius: 10px;
    font-size: 1.5rem;
    margin: 5px;
    cursor: pointer;
    transition: all 0.3s ease;
}}

.control-btn:hover {{
    background: rgba(255, 255, 255, 0.3);
    transform: scale(1.1);
}}

.control-row {{
    display: flex;
    justify-content: center;
    align-items: center;
}}

.game-footer {{
    margin-top: 2rem;
    font-size: 0.9rem;
    opacity: 0.8;
}}

.hidden {{
    display: none !important;
}}

@media (max-width: 600px) {{
    .game-container {{
        padding: 1rem;
        margin: 1rem;
    }}

    .game-area {{
        flex-direction: column;
        gap: 10px;
    }}

    #gameCanvas {{
        width: 100%;
        max-width: 350px;
        height: auto;
    }}

    .game-header h1 {{
        font-size: 2rem;
    }}

    .game-info {{
        font-size: 1rem;
        flex-wrap: wrap;
        justify-content: center;
    }}
}}"""

    def get_tetris_js(self, project_name, description, style):
        return """
let board = [];
let score = 0;
let level = 1;
let lines = 0;
let currentPiece = null;
let nextPiece = null;
let animationId = null;
let isGameOver = false;
let gameInterval = 1000; // ms

const COLS = 10;
const ROWS = 20;
const BLOCK_SIZE = 30; // px

const canvas = document.getElementById('gameCanvas');
const context = canvas.getContext('2d');
const nextCanvas = document.getElementById('nextCanvas');
const nextContext = nextCanvas.getContext('2d');
const scoreElement = document.getElementById('score');
const levelElement = document.getElementById('level');
const linesElement = document.getElementById('lines');
const overlay = document.getElementById('gameOverlay');
const startBtn = document.getElementById('startBtn');

// –¢–µ–º–∞ –∏ —Ü–≤–µ—Ç–∞ –±–ª–æ–∫–æ–≤
const themes = {
    "modern": {
        "--primary-color": "#4a148c", "--secondary-color": "#00bcd4", "--accent-color": "#ffeb3b", "--bg-color": "#121212", "--text-color": "#ffffff",
        "--block-colors": ["#FF0D72", "#0DC2FF", "#0DFF72", "#F538FF", "#FFFB0D", "#FF8E0D", "#AD1457"]
    },
    "retro": {
        "--primary-color": "#ff6b35", "--secondary-color": "#f7931e", "--accent-color": "#ffd23f", "--bg-color": "#1a1a1a", "--text-color": "#00ff00",
        "--block-colors": ["#00FF00", "#FFFF00", "#FFA500", "#FF4500", "#8A2BE2", "#FF1493", "#00CED1"]
    },
    "neon": {
        "--primary-color": "#ff0080", "--secondary-color": "#8000ff", "--accent-color": "#00ff80", "--bg-color": "#000015", "--text-color": "#ffffff",
        "--block-colors": ["#00FFFF", "#FFFF00", "#FF00FF", "#00FF00", "#FFFFFF", "#FF0000", "#0000FF"]
    }
};

// –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞)
const themeName = document.body.className.replace('-theme', '') || 'modern';
const selectedTheme = themes[themeName] || themes['modern'];
Object.keys(selectedTheme).forEach(key => {
    document.documentElement.style.setProperty(key, selectedTheme[key]);
});
const BLOCK_COLORS = selectedTheme['--block-colors'];

// –§–æ—Ä–º—ã —Ñ–∏–≥—É—Ä (tetrominoes)
const TETROMINOES = [
    { shape: [[1, 1, 1, 1]], color: BLOCK_COLORS[0] }, // I
    { shape: [[1, 1], [1, 1]], color: BLOCK_COLORS[1] }, // O
    { shape: [[1, 1, 0], [0, 1, 1]], color: BLOCK_COLORS[2] }, // S
    { shape: [[0, 1, 1], [1, 1, 0]], color: BLOCK_COLORS[3] }, // Z
    { shape: [[1, 1, 1], [0, 1, 0]], color: BLOCK_COLORS[4] }, // T
    { shape: [[1, 1, 1], [1, 0, 0]], color: BLOCK_COLORS[5] }, // L
    { shape: [[1, 1, 1], [0, 0, 1]], color: BLOCK_COLORS[6] }  // J
];

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π
function createPiece() {
    const rand = Math.floor(Math.random() * TETROMINOES.length);
    const piece = TETROMINOES[rand];
    return {
        x: Math.floor(COLS / 2) - Math.floor(piece.shape[0].length / 2),
        y: 0,
        shape: piece.shape,
        color: piece.color
    };
}

function isValidMove(piece, board) {
    for (let y = 0; y < piece.shape.length; y++) {
        for (let x = 0; x < piece.shape[y].length; x++) {
            if (piece.shape[y][x]) {
                const boardX = piece.x + x;
                const boardY = piece.y + y;

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Ö–æ–¥–∞ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª—è
                if (boardY < 0 || boardY >= ROWS || boardX < 0 || boardX >= COLS) {
                    return false;
                }
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å —É–∂–µ –∑–∞–Ω—è—Ç—ã–º–∏ —è—á–µ–π–∫–∞–º–∏
                if (board[boardY] && board[boardY][boardX]) {
                    return false;
                }
            }
        }
    }
    return true;
}

function drawBlock(x, y, color, context) {
    context.fillStyle = color;
    context.fillRect(x * BLOCK_SIZE, y * BLOCK_SIZE, BLOCK_SIZE - 1, BLOCK_SIZE - 1);
    context.fillStyle = 'rgba(255, 255, 255, 0.3)';
    context.fillRect(x * BLOCK_SIZE + 2, y * BLOCK_SIZE + 2, BLOCK_SIZE - 4, BLOCK_SIZE - 4);
}

function drawPiece(piece, context) {
    context.fillStyle = piece.color;
    for (let y = 0; y < piece.shape.length; y++) {
        for (let x = 0; x < piece.shape[y].length; x++) {
            if (piece.shape[y][x]) {
                drawBlock(piece.x + x, piece.y + y, piece.color, context);
            }
        }
    }
}

function drawBoard() {
    context.clearRect(0, 0, canvas.width, canvas.height);
    for (let y = 0; y < ROWS; y++) {
        for (let x = 0; x < COLS; x++) {
            if (board[y] && board[y][x]) {
                drawBlock(x, y, board[y][x], context);
            }
        }
    }
}

function drawNextPiece() {
    nextContext.clearRect(0, 0, nextCanvas.width, nextCanvas.height);
    if (nextPiece) {
        drawPiece(nextPiece, nextContext);
    }
}

function clearLines() {
    let linesCleared = 0;
    for (let y = ROWS - 1; y >= 0; ) {
        if (board[y].every(cell => cell)) {
            for (let i = y; i > 0; i--) {
                board[i] = board[i - 1];
            }
            board[0] = Array(COLS).fill(null);
            linesCleared++;
        } else {
            y--;
        }
    }

    if (linesCleared > 0) {
        lines += linesCleared;
        score += calculateScore(linesCleared, level);
        updateScoreboard();
        updateLevelAndInterval();
    }
}

function calculateScore(linesCleared, level) {
    const points = [0, 40, 100, 300, 1200]; // –û—á–∫–∏ –∑–∞ 1, 2, 3, 4 –ª–∏–Ω–∏–∏
    return points[linesCleared] * level;
}

function updateLevelAndInterval() {
    const newLevel = Math.floor(lines / 10) + 1;
    if (newLevel > level) {
        level = newLevel;
        gameInterval = Math.max(100, 1000 - (level - 1) * 50); // –£–º–µ–Ω—å—à–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
    }
}

function updateScoreboard() {
    scoreElement.textContent = score;
    levelElement.textContent = level;
    linesElement.textContent = lines;
}

function freezePiece() {
    for (let y = 0; y < currentPiece.shape.length; y++) {
        for (let x = 0; x < currentPiece.shape[y].length; x++) {
            if (currentPiece.shape[y][x]) {
                const boardX = currentPiece.x + x;
                const boardY = currentPiece.y + y;
                if (boardY >= 0) { // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —á–∞—Å—Ç—å —Ñ–∏–≥—É—Ä—ã –Ω–∞ –ø–æ–ª–µ
                    if (!board[boardY]) board[boardY] = Array(COLS).fill(null);
                    board[boardY][boardX] = currentPiece.color;
                }
            }
        }
    }
    clearLines();
    currentPiece = nextPiece;
    nextPiece = createPiece();
    if (!isValidMove(currentPiece, board)) {
        gameOver();
        return;
    }
    drawNextPiece();
}

function move(deltaX) {
    currentPiece.x += deltaX;
    if (!isValidMove(currentPiece, board)) {
        currentPiece.x -= deltaX; // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ö–æ–¥
    }
}

function rotate() {
    const rotatedShape = currentPiece.shape[0].map((_, index) => currentPiece.shape.map(row => row[index])).reverse();
    const rotatedPiece = { ...currentPiece, shape: [rotatedShape] }; // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    if (isValidMove(rotatedPiece, board)) {
        currentPiece = rotatedPiece;
    } else {
        // –ü–æ–ø—ã—Ç–∫–∞ "–ø–æ–¥–ø—Ä—ã–≥–Ω—É—Ç—å" —Ñ–∏–≥—É—Ä—É, –µ—Å–ª–∏ –æ–Ω–∞ —É–ø–∏—Ä–∞–µ—Ç—Å—è –≤ —Å—Ç–µ–Ω—É
        const wallkickOffset = currentPiece.x < COLS / 2 ? 1 : -1;
        const kickedPiece = { ...currentPiece, x: currentPiece.x + wallkickOffset };
        if (isValidMove(kickedPiece, board)) {
            currentPiece = kickedPiece;
        }
    }
}


function drop() {
    currentPiece.y++;
    if (!isValidMove(currentPiece, board)) {
        currentPiece.y--; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ –ø—Ä–µ–∂–Ω—é—é –ø–æ–∑–∏—Ü–∏—é
        freezePiece();
        return true; // –§–∏–≥—É—Ä–∞ —É–ø–∞–ª–∞
    }
    return false;
}

function gameLoop() {
    if (isGameOver) return;

    const didDrop = drop();
    if (!didDrop) {
        drawBoard();
        drawPiece(currentPiece, context);
    }
    animationId = setTimeout(gameLoop, gameInterval);
}

function gameOver() {
    isGameOver = true;
    cancelAnimationFrame(animationId);
    overlay.innerHTML = `
        <div class="start-screen">
            <h2>üéÆ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!</h2>
            <p>–í–∞—à —Å—á—ë—Ç: ${score}</p>
            <p>–†–µ–∫–æ—Ä–¥: ${localStorage.getItem('tetrisHighScore') || 0}</p>
            <button id="restartBtn" class="game-btn">–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞</button>
        </div>
    `;
    overlay.classList.remove('hidden');
    document.getElementById('restartBtn').addEventListener('click', startGame);
}

function startGame() {
    isGameOver = false;
    score = 0;
    level = 1;
    lines = 0;
    gameInterval = 1000;
    board = Array(ROWS).fill(null).map(() => Array(COLS).fill(null));
    currentPiece = createPiece();
    nextPiece = createPiece();
    updateScoreboard();
    drawBoard();
    drawNextPiece();
    if (animationId) clearTimeout(animationId);
    animationId = setTimeout(gameLoop, gameInterval);
    overlay.classList.add('hidden');

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∫–æ—Ä–¥–∞
    const highScore = localStorage.getItem('tetrisHighScore') || 0;
    if (score > highScore) {
        localStorage.setItem('tetrisHighScore', score);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞
document.addEventListener('keydown', (e) => {
    if (isGameOver || !currentPiece) return;

    switch (e.key) {
        case 'ArrowLeft':
        case 'a':
        case 'A':
            move(-1);
            break;
        case 'ArrowRight':
        case 'd':
        case 'D':
            move(1);
            break;
        case 'ArrowDown':
        case 's':
        case 'S':
            drop(); // –ë—ã—Å—Ç—Ä–æ–µ –ø–∞–¥–µ–Ω–∏–µ
            break;
        case ' ': // –ü—Ä–æ–±–µ–ª –¥–ª—è –ø–æ–≤–æ—Ä–æ—Ç–∞
            rotate();
            break;
    }
    drawBoard();
    drawPiece(currentPiece, context);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
document.querySelectorAll('.control-btn').forEach(btn => {
    btn.addEventListener('click', () => {
        if (isGameOver || !currentPiece) return;

        const action = btn.dataset.action;
        switch (action) {
            case 'left':
                move(-1);
                break;
            case 'right':
                move(1);
                break;
            case 'down':
                drop();
                break;
            case 'rotate':
                rotate();
                break;
        }
        drawBoard();
        drawPiece(currentPiece, context);
    });
});

startBtn.addEventListener('click', startGame);

// –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
document.addEventListener('DOMContentLoaded', () => {
    canvas.width = COLS * BLOCK_SIZE;
    canvas.height = ROWS * BLOCK_SIZE;
    nextCanvas.width = 4 * BLOCK_SIZE;
    nextCanvas.height = 4 * BLOCK_SIZE;
    context.scale(BLOCK_SIZE, BLOCK_SIZE);
    nextContext.scale(BLOCK_SIZE, BLOCK_SIZE);
});
"""

    def get_tetris_readme(self, project_name, description, style):
        return f"""# {project_name} - –¢–µ—Ç—Ä–∏—Å

{description}

–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∞ –¢–µ—Ç—Ä–∏—Å —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º."""

    def get_todo_html(self, project_name, description, style):
        return f"""<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{project_name}</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body class="{style}-theme">
    <div class="app-container">
        <div class="app-header">
            <h1>{project_name}</h1>
            <p class="app-description">{description}</p>
        </div>

        <div class="todo-input-section">
            <div class="input-group">
                <input type="text" id="todoInput" placeholder="–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É..." maxlength="100">
                <button id="addBtn" class="add-btn">+</button>
            </div>
        </div>

        <div class="todo-filters">
            <button class="filter-btn active" data-filter="all">–í—Å–µ</button>
            <button class="filter-btn" data-filter="active">–ê–∫—Ç–∏–≤–Ω—ã–µ</button>
            <button class="filter-btn" data-filter="completed">–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ</button>
        </div>

        <div class="todo-list" id="todoList">
            <!-- –ó–∞–¥–∞—á–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
        </div>

        <div class="todo-stats">
            <span id="totalTasks">0 –∑–∞–¥–∞—á</span>
            <button id="clearCompleted" class="clear-btn">–û—á–∏—Å—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ</button>
        </div>

        <div class="app-footer">
            <p>–°–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é Lovable AI</p>
        </div>
    </div>

    <script src="script.js"></script>
</body>
</html>"""

    def get_todo_css(self, project_name, description, style):
        return f"""/* CSS –¥–ª—è TODO –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è */
:root {{
    --primary-color: #3f51b5; /* Indigo */
    --secondary-color: #009688; /* Teal */
    --accent-color: #ff5722; /* Deep Orange */
    --bg-color: #f5f5f5; /* Light Gray */
    --text-color: #333333; /* Dark Gray */
    --input-bg: #ffffff;
    --border-color: #e0e0e0;
    --completed-color: #bdbdbd; /* Light Gray for completed */
}}

body {{
    font-family: 'Arial', sans-serif;
    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--text-color);
}}

.app-container {{
    background: rgba(255, 255, 255, 0.95);
    border-radius: 20px;
    padding: 2rem;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
    text-align: center;
    max-width: 500px;
    width: 100%;
    backdrop-filter: blur(5px);
}}

.app-header {{
    margin-bottom: 2rem;
}}

.app-header h1 {{
    font-size: 2.5rem;
    color: var(--primary-color);
    margin-bottom: 0.5rem;
}}

.app-description {{
    font-size: 1.1rem;
    color: #616161;
}}

.todo-input-section {{
    margin-bottom: 1.5rem;
}}

.input-group {{
    display: flex;
    gap: 10px;
}}

#todoInput {{
    flex-grow: 1;
    padding: 1rem;
    border: 1px solid var(--border-color);
    border-radius: 25px;
    font-size: 1rem;
    background-color: var(--input-bg);
    box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.05);
}}

#todoInput:focus {{
    outline: none;
    border-color: var(--accent-color);
    box-shadow: 0 0 0 3px rgba(255, 87, 34, 0.2);
}}

.add-btn {{
    background: var(--accent-color);
    border: none;
    color: white;
    width: 50px;
    height: 50px;
    border-radius: 25px;
    font-size: 1.8rem;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 4px 10px rgba(255, 87, 34, 0.3);
}}

.add-btn:hover {{
    transform: scale(1.1);
}}

.todo-filters {{
    margin-bottom: 1.5rem;
    display: flex;
    justify-content: center;
    gap: 15px;
}}

.filter-btn {{
    background: none;
    border: none;
    color: var(--primary-color);
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    padding: 0.5rem 1rem;
    border-radius: 20px;
    transition: all 0.3s ease;
}}

.filter-btn.active {{
    background: var(--primary-color);
    color: white;
    box-shadow: 0 4px 10px rgba(63, 81, 181, 0.3);
}}

.filter-btn:hover {{
    background: rgba(63, 81, 181, 0.1);
}}

.todo-list {{
    max-height: 300px;
    overflow-y: auto;
    text-align: left;
    margin-bottom: 1.5rem;
    padding-right: 10px; /* –î–ª—è —Å–∫—Ä–æ–ª–ª–±–∞—Ä–∞ */
}}

.todo-item {{
    background: var(--input-bg);
    padding: 1rem;
    margin-bottom: 10px;
    border-radius: 10px;
    display: flex;
    align-items: center;
    justify-content: space-between;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    transition: background 0.3s ease;
}}

.todo-item.completed {{
    background: var(--completed-color);
    opacity: 0.7;
}}

.todo-item.completed .todo-text {{
    text-decoration: line-through;
    color: #757575;
}}

.todo-content {{
    display: flex;
    align-items: center;
    gap: 15px;
    flex-grow: 1;
    overflow: hidden; /* –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –≤—ã–ª–µ–∑–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ */
}}

.checkbox {{
    width: 20px;
    height: 20px;
    border: 2px solid var(--primary-color);
    border-radius: 5px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background 0.3s ease;
}}

.checkbox.checked {{
    background: var(--primary-color);
    border-color: var(--primary-color);
}}

.checkbox.checked::after {{
    content: '‚úî';
    color: white;
    font-size: 14px;
}}

.todo-text {{
    font-size: 1rem;
    word-break: break-word; /* –ü–µ—Ä–µ–Ω–æ—Å –¥–ª–∏–Ω–Ω—ã—Ö —Å–ª–æ–≤ */
}}

.todo-actions {{
    display: flex;
    gap: 5px;
}}

.action-btn {{
    background: none;
    border: none;
    font-size: 1.2rem;
    cursor: pointer;
    color: #9e9e9e;
    transition: color 0.3s ease;
}}

.action-btn.edit:hover {{
    color: var(--accent-color);
}}

.action-btn.delete:hover {{
    color: #f44336;
}}

.todo-stats {{
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: 1rem;
    font-size: 0.9rem;
    color: #757575;
}}

.clear-btn {{
    background: none;
    border: 1px solid var(--border-color);
    color: var(--secondary-color);
    padding: 0.5rem 1rem;
    border-radius: 20px;
    cursor: pointer;
    transition: all 0.3s ease;
}}

.clear-btn:hover {{
    background: var(--secondary-color);
    color: white;
    border-color: var(--secondary-color);
}}

.app-footer {{
    margin-top: 2rem;
    font-size: 0.9rem;
    opacity: 0.7;
    color: #616161;
}}

/* –°—Ç–∏–ª–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ */
@media (max-width: 500px) {{
    .app-container {{
        padding: 1.5rem;
    }}
    .app-header h1 {{
        font-size: 2rem;
    }}
    .input-group {{
        flex-direction: column;
    }}
    #todoInput {{
        margin-bottom: 10px;
    }}
}}
"""

    def get_todo_js(self, project_name, description, style):
        return """
const todoInput = document.getElementById('todoInput');
const addBtn = document.getElementById('addBtn');
const todoList = document.getElementById('todoList');
const totalTasksElement = document.getElementById('totalTasks');
const clearCompletedBtn = document.getElementById('clearCompleted');
const filterButtons = document.querySelectorAll('.filter-btn');

let todos = []; // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
let currentFilter = 'all'; // –¢–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä

// --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏ ---

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
function addTodo() {
    const taskText = todoInput.value.trim();
    if (!taskText) return;

    const newTodo = {
        id: Date.now(), // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
        text: taskText,
        completed: false
    };

    todos.push(newTodo);
    todoInput.value = ''; // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
    renderTodos();
    updateStats();
    saveTodos(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
function deleteTodo(id) {
    todos = todos.filter(todo => todo.id !== id);
    renderTodos();
    updateStats();
    saveTodos();
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ (–≤—ã–ø–æ–ª–Ω–µ–Ω–∞/–∞–∫—Ç–∏–≤–Ω–∞)
function toggleTodoComplete(id) {
    todos = todos.map(todo =>
        todo.id === id ? { ...todo, completed: !todo.completed } : todo
    );
    renderTodos();
    updateStats();
    saveTodos();
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–ø—Ä–æ—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞)
function editTodo(id, newText) {
    todos = todos.map(todo =>
        todo.id === id ? { ...todo, text: newText } : todo
    );
    renderTodos();
    saveTodos();
}

// –û—á–∏—Å—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
function clearCompletedTodos() {
    todos = todos.filter(todo => !todo.completed);
    renderTodos();
    updateStats();
    saveTodos();
}

// --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ ---

// –°–æ–∑–¥–∞–Ω–∏–µ HTML —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–¥–∞—á–∏
function createTodoElement(todo) {
    const listItem = document.createElement('div');
    listItem.className = `todo-item ${todo.completed ? 'completed' : ''}`;
    listItem.dataset.id = todo.id;

    listItem.innerHTML = `
        <div class="todo-content">
            <div class="checkbox ${todo.completed ? 'checked' : ''}" data-action="complete"></div>
            <span class="todo-text">${todo.text}</span>
        </div>
        <div class="todo-actions">
            <button class="action-btn edit" data-action="edit">‚úèÔ∏è</button>
            <button class="action-btn delete" data-action="delete">üóëÔ∏è</button>
        </div>
    `;

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–∞–¥–∞—á–∏
    const checkbox = listItem.querySelector('.checkbox');
    const deleteBtn = listItem.querySelector('.delete');
    const editBtn = listItem.querySelector('.edit');
    const todoTextSpan = listItem.querySelector('.todo-text');

    checkbox.addEventListener('click', () => toggleTodoComplete(todo.id));
    deleteBtn.addEventListener('click', () => deleteTodo(todo.id));
    editBtn.addEventListener('click', () => {
        const newText = prompt('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É:', todo.text);
        if (newText !== null && newText.trim()) {
            editTodo(todo.id, newText.trim());
        }
    });

    return listItem;
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞—á –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∏–ª—å—Ç—Ä–∞
function renderTodos() {
    todoList.innerHTML = ''; // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–¥ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–æ–º

    const filteredTodos = todos.filter(todo => {
        switch (currentFilter) {
            case 'active':
                return !todo.completed;
            case 'completed':
                return todo.completed;
            default: // 'all'
                return true;
        }
    });

    if (filteredTodos.length === 0) {
        todoList.innerHTML = '<p style="text-align: center; margin-top: 20px; color: #9e9e9e;">–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç!</p>';
    } else {
        filteredTodos.forEach(todo => {
            todoList.appendChild(createTodoElement(todo));
        });
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á)
function updateStats() {
    const activeCount = todos.filter(todo => !todo.completed).length;
    totalTasksElement.textContent = `${activeCount} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á`; // –ò–∑–º–µ–Ω–∏–ª –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö
    clearCompletedBtn.disabled = todos.every(todo => !todo.completed); // –î–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π, –µ—Å–ª–∏ –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö
}

// --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∏ ---

function saveTodos() {
    localStorage.setItem('todos', JSON.stringify(todos));
}

function loadTodos() {
    const savedTodos = localStorage.getItem('todos');
    if (savedTodos) {
        todos = JSON.parse(savedTodos);
    }
    renderTodos();
    updateStats();
}

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π ---

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ –∫–ª–∏–∫—É –∏–ª–∏ Enter
addBtn.addEventListener('click', addTodo);
todoInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
        addTodo();
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
filterButtons.forEach(button => {
    button.addEventListener('click', () => {
        currentFilter = button.dataset.filter;
        filterButtons.forEach(btn => btn.classList.remove('active'));
        button.classList.add('active');
        renderTodos();
    });
});

// –û—á–∏—Å—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö
clearCompletedBtn.addEventListener('click', clearCompletedTodos);

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
document.addEventListener('DOMContentLoaded', loadTodos);
"""

    def get_todo_readme(self, project_name, description, style):
        return f"""# {project_name} - TODO –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

{description}

–ü—Ä–æ—Å—Ç–æ–µ –∏ —Å—Ç–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º –¥–µ–ª.

## –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á
- –û—Ç–º–µ—Ç–∫–∞ –∑–∞–¥–∞—á –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö
- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á (–≤—Å–µ, –∞–∫—Ç–∏–≤–Ω—ã–µ, –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ)
- –û—á–∏—Å—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤ localStorage
- –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω
"""

    def get_weather_html(self, project_name, description, style):
        return f"""<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{project_name}</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body class="{style}-theme">
    <div class="weather-app">
        <div class="app-header">
            <h1>{project_name}</h1>
            <p>{description}</p>
        </div>

        <div class="search-section">
            <div class="search-group">
                <input type="text" id="cityInput" placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞..." />
                <button id="searchBtn" class="search-btn">üîç</button>
            </div>
        </div>

        <div class="weather-display" id="weatherDisplay">
            <div class="weather-card">
                <div class="current-weather">
                    <div class="weather-icon">‚òÄÔ∏è</div>
                    <div class="temperature">--¬∞C</div>
                    <div class="city-name">--</div>
                    <div class="weather-description">--</div>
                </div>

                <div class="weather-details">
                    <div class="detail-item">
                        <span class="detail-label">–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫</span>
                        <span class="detail-value">--¬∞C</span>
                    </div>
                    <div class="detail-item">
                        <span class="detail-label">–í–ª–∞–∂–Ω–æ—Å—Ç—å</span>
                        <span class="detail-value">--%</span>
                    </div>
                    <div class="detail-item">
                        <span class="detail-label">–í–µ—Ç–µ—Ä</span>
                        <span class="detail-value">-- –∫–º/—á</span>
                    </div>
                    <div class="detail-item">
                        <span class="detail-label">–î–∞–≤–ª–µ–Ω–∏–µ</span>
                        <span class="detail-value">-- –≥–ü–∞</span>
                    </div>
                </div>

                <div class="forecast">
                    <h3>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π</h3>
                    <div class="forecast-list" id="forecastList">
                        <p>–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞...</p>
                    </div>
                </div>
            </div>
        </div>

        <div class="app-footer">
            <p>–°–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é Lovable AI</p>
        </div>
    </div>

    <script src="script.js"></script>
</body>
</html>"""

    def get_weather_css(self, project_name, description, style):
        return f"""/* CSS –¥–ª—è Weather –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è */
:root {{
    --primary-color: #0077b6; /* Blue */
    --secondary-color: #90e0ef; /* Light Blue */
    --accent-color: #ffb703; /* Orange */
    --bg-color: #e0f2f7; /* Very Light Blue */
    --text-color: #1a1a1a; /* Dark Gray */
    --card-bg: #ffffff;
    --detail-bg: #f8f9fa;
    --forecast-bg: #f1f3f4;
}}

body {{
    font-family: 'Arial', sans-serif;
    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--text-color);
}}

.weather-app {{
    background: rgba(255, 255, 255, 0.95);
    border-radius: 20px;
    padding: 2rem;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
    text-align: center;
    max-width: 550px;
    width: 100%;
    backdrop-filter: blur(5px);
}}

.app-header {{
    margin-bottom: 2rem;
}}

.app-header h1 {{
    font-size: 2.5rem;
    color: var(--primary-color);
    margin-bottom: 0.5rem;
}}

.app-description {{
    font-size: 1rem;
    color: #616161;
}}

.search-section {{
    margin-bottom: 2rem;
}}

.search-group {{
    display: flex;
    gap: 10px;
}}

#cityInput {{
    flex-grow: 1;
    padding: 1rem;
    border: 1px solid var(--primary-color);
    border-radius: 25px;
    font-size: 1rem;
    background-color: var(--card-bg);
    box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.05);
}}

#cityInput:focus {{
    outline: none;
    border-color: var(--accent-color);
    box-shadow: 0 0 0 3px rgba(255, 183, 3, 0.2);
}}

.search-btn {{
    background: var(--accent-color);
    border: none;
    color: var(--text-color);
    width: 50px;
    height: 50px;
    border-radius: 25px;
    font-size: 1.4rem;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 4px 10px rgba(255, 183, 3, 0.3);
}}

.search-btn:hover {{
    transform: scale(1.1);
}}

.weather-card {{
    background: var(--card-bg);
    border-radius: 15px;
    padding: 1.5rem;
    box-shadow: 0 5px 20px rgba(0, 0, 0, 0.1);
}}

.current-weather {{
    display: flex;
    flex-direction: column;
    align-items: center;
    margin-bottom: 1.5rem;
    border-bottom: 1px solid var(--forecast-bg);
    padding-bottom: 1.5rem;
}}

.weather-icon {{
    font-size: 4rem;
    margin-bottom: 0.5rem;
}}

.temperature {{
    font-size: 3rem;
    font-weight: 700;
    color: var(--primary-color);
}}

.city-name {{
    font-size: 1.5rem;
    font-weight: 500;
    margin-bottom: 0.5rem;
}}

.weather-description {{
    font-size: 1.2rem;
    color: #757575;
}}

.weather-details {{
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 1rem;
    margin-bottom: 1.5rem;
}}

.detail-item {{
    background: var(--detail-bg);
    padding: 0.8rem;
    border-radius: 10px;
    text-align: center;
}}

.detail-label {{
    display: block;
    font-size: 0.9rem;
    color: #757575;
    margin-bottom: 0.3rem;
}}

.detail-value {{
    font-size: 1.1rem;
    font-weight: 600;
}}

.forecast h3 {{
    margin-bottom: 1rem;
    color: var(--primary-color);
}}

.forecast-list {{
    display: flex;
    overflow-x: auto;
    gap: 10px;
    padding-bottom: 10px; /* –û—Ç—Å—Ç—É–ø –¥–ª—è —Å–∫—Ä–æ–ª–ª–±–∞—Ä–∞ */
}}

.forecast-item {{
    background: var(--forecast-bg);
    padding: 1rem;
    border-radius: 10px;
    min-width: 100px;
    text-align: center;
    flex-shrink: 0;
}}

.forecast-item .date {{
    font-size: 0.9rem;
    color: #757575;
    margin-bottom: 0.5rem;
}}

.forecast-item .icon {{
    font-size: 2rem;
    margin-bottom: 0.5rem;
}}

.forecast-item .temp {{
    font-size: 1.1rem;
    font-weight: 600;
}}

.app-footer {{
    margin-top: 2rem;
    font-size: 0.9rem;
    opacity: 0.7;
    color: #616161;
}}

/* –°—Ç–∏–ª–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ */
@media (max-width: 550px) {{
    .weather-app {{
        padding: 1.5rem;
    }}
    .app-header h1 {{
        font-size: 2rem;
    }}
    .search-group {{
        flex-direction: column;
    }}
    #cityInput {{
        margin-bottom: 10px;
    }}
    .weather-details {{
        grid-template-columns: 1fr;
    }}
}}
"""

    def get_weather_js(self, project_name, description, style):
        return """
const cityInput = document.getElementById('cityInput');
const searchBtn = document.getElementById('searchBtn');
const weatherDisplay = document.getElementById('weatherDisplay');
const forecastList = document.getElementById('forecastList');

const API_KEY = 'YOUR_OPENWEATHERMAP_API_KEY'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API –∫–ª—é—á

// –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø–æ–∫–∞ –Ω–µ—Ç API)
let currentWeatherData = {
    icon: '‚òÄÔ∏è',
    temperature: '--',
    city: '--',
    description: '--',
    feels_like: '--',
    humidity: '--',
    wind_speed: '--',
    pressure: '--'
};

let forecastData = [];

const weatherIcons = {
    '01d': '‚òÄÔ∏è', '01n': 'üåô',
    '02d': '‚òÅÔ∏è', '02n': '‚òÅÔ∏è',
    '03d': '‚òÅÔ∏è', '03n': '‚òÅÔ∏è',
    '04d': '‚òÅÔ∏è', '04n': '‚òÅÔ∏è',
    '09d': 'üåßÔ∏è', '09n': 'üåßÔ∏è',
    '10d': 'üåßÔ∏è', '10n': 'üåßÔ∏è',
    '11d': '‚ö°', '11n': '‚ö°',
    '13d': '‚ùÑÔ∏è', '13n': '‚ùÑÔ∏è',
    '50d': 'üå´Ô∏è', '50n': 'üå´Ô∏è'
};

function getWeatherIcon(iconCode) {
    return weatherIcons[iconCode] || '‚ùì';
}

function formatPressure(hpa) {
    return Math.round(hpa); // –î–∞–≤–ª–µ–Ω–∏–µ –≤ –≥–ü–∞
}

function formatWindSpeed(mps) {
    return Math.round(mps * 3.6); // –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ –≤ –∫–º/—á
}

async function fetchWeather(city) {
    const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric&lang=ru`;
    try {
        const response = await fetch(url);
        if (!response.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${response.status}`);
        }
        const data = await response.json();
        return data;
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ:", error);
        displayError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–≥–æ–¥—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.");
        return null;
    }
}

async function fetchForecast(city) {
    const url = `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${API_KEY}&units=metric&lang=ru`;
    try {
        const response = await fetch(url);
        if (!response.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${response.status}`);
        }
        const data = await response.json();
        return data;
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–∞:", error);
        return null;
    }
}

function displayWeather(data) {
    if (!data) return;

    currentWeatherData = {
        icon: getWeatherIcon(data.weather[0].icon),
        temperature: Math.round(data.main.temp),
        city: data.name,
        description: data.weather[0].description,
        feels_like: Math.round(data.main.feels_like),
        humidity: data.main.humidity,
        wind_speed: formatWindSpeed(data.wind.speed),
        pressure: formatPressure(data.main.pressure)
    };

    renderCurrentWeather();
}

function renderCurrentWeather() {
    const html = `
        <div class="weather-card">
            <div class="current-weather">
                <div class="weather-icon">${currentWeatherData.icon}</div>
                <div class="temperature">${currentWeatherData.temperature}¬∞C</div>
                <div class="city-name">${currentWeatherData.city}</div>
                <div class="weather-description">${currentWeatherData.description}</div>
            </div>

            <div class="weather-details">
                <div class="detail-item">
                    <span class="detail-label">–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫</span>
                    <span class="detail-value">${currentWeatherData.feels_like}¬∞C</span>
                </div>
                <div class="detail-item">
                    <span class="detail-label">–í–ª–∞–∂–Ω–æ—Å—Ç—å</span>
                    <span class="detail-value">${currentWeatherData.humidity}%</span>
                </div>
                <div class="detail-item">
                    <span class="detail-label">–í–µ—Ç–µ—Ä</span>
                    <span class="detail-value">${currentWeatherData.wind_speed} –∫–º/—á</span>
                </div>
                <div class="detail-item">
                    <span class="detail-label">–î–∞–≤–ª–µ–Ω–∏–µ</span>
                    <span class="detail-value">${currentWeatherData.pressure} –≥–ü–∞</span>
                </div>
            </div>

            <div class="forecast">
                <h3>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π</h3>
                <div class="forecast-list" id="forecastList">
                    ${renderForecast(forecastData)}
                </div>
            </div>
        </div>
    `;
    weatherDisplay.innerHTML = html;
}

function renderForecast(forecastItems) {
    if (!forecastItems || forecastItems.length === 0) {
        return '<p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–∞.</p>';
    }

    let html = '';
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π, –±–µ—Ä—è –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–∑ –≤ 8 –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ (24 —á–∞—Å–∞)
    for (let i = 0; i < forecastItems.length; i += 8) {
        const day = forecastItems[i];
        const date = new Date(day.dt * 1000);
        const dayOfWeek = date.toLocaleDateString('ru-RU', { weekday: 'short' });
        const temp = Math.round(day.main.temp);
        const icon = getWeatherIcon(day.weather[0].icon);

        html += `
            <div class="forecast-item">
                <div class="date">${dayOfWeek}</div>
                <div class="icon">${icon}</div>
                <div class="temp">${temp}¬∞C</div>
            </div>
        `;
    }
    return html;
}

function displayError(message) {
    weatherDisplay.innerHTML = `<p class="error-message">${message}</p>`;
}

async function handleSearch() {
    const city = cityInput.value.trim();
    if (!city) {
        displayError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.");
        return;
    }

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    weatherDisplay.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>';

    const weatherData = await fetchWeather(city);
    if (weatherData) {
        const forecastWeatherData = await fetchForecast(city);
        forecastData = forecastWeatherData ? forecastWeatherData.list : [];
        displayWeather(weatherData);
    } else {
        displayError("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.");
    }
}

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π ---
searchBtn.addEventListener('click', handleSearch);
cityInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
        handleSearch();
    }
});

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
// –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –ø–æ–≥–æ–¥—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
// handleSearch(); // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –ø–æ–≥–æ–¥—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
"""

    def get_weather_readme(self, project_name, description, style):
        return f"""# {project_name} - –ü–æ–≥–æ–¥–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

{description}

–ü—Ä–æ—Å—Ç–æ–µ –ø–æ–≥–æ–¥–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–µ–µ —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –∏ –ø—Ä–æ–≥–Ω–æ–∑.
–¢—Ä–µ–±—É–µ—Ç—Å—è API –∫–ª—é—á OpenWeatherMap.
"""

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤
generator = ProjectGenerator()

# –£–ª—É—á—à–µ–Ω–Ω—ã–π AI-–∞–≥–µ–Ω—Ç —Å –¥–∏–∞–ª–æ–≥–æ–≤—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º
class SmartAI:
    def __init__(self):
        self.conversation_history = {} # –•—Ä–∞–Ω–∏–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ session_id
        self.user_preferences = {}
        self.project_context = {}
        self.user_session = {} # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        # –¢—Ä–µ–Ω–¥—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
        self.market_trends = {
            "mobile_games": {
                "popularity": 95,
                "description": "–ú–æ–±–∏–ª—å–Ω—ã–µ –∏–≥—Ä—ã - —Å–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç. –û—Å–æ–±–µ–Ω–Ω–æ –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω—ã –∫–∞–∑—É–∞–ª—å–Ω—ã–µ –∏–≥—Ä—ã.",
                "examples": ["–ó–º–µ–π–∫–∞", "–¢–µ—Ç—Ä–∏—Å", "–ì–æ–ª–æ–≤–æ–ª–æ–º–∫–∏", "–ê—Ä–∫–∞–¥—ã"]
            },
            "productivity_apps": {
                "popularity": 85,
                "description": "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ—á–µ–Ω—å –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω—ã –ø–æ—Å–ª–µ –ø–∞–Ω–¥–µ–º–∏–∏.",
                "examples": ["TODO —Å–ø–∏—Å–∫–∏", "–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏", "–¢—Ä–µ–∫–µ—Ä—ã –ø—Ä–∏–≤—ã—á–µ–∫", "–ó–∞–º–µ—Ç–∫–∏"]
            },
            "health_fitness": {
                "popularity": 80,
                "description": "–ó–¥–æ—Ä–æ–≤—å–µ –∏ —Ñ–∏—Ç–Ω–µ—Å - —Ä–∞—Å—Ç—É—â–∏–π —Ç—Ä–µ–Ω–¥ —Å –≤—ã—Å–æ–∫–æ–π –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–µ–π.",
                "examples": ["–°—á–µ—Ç—á–∏–∫–∏ –∫–∞–ª–æ—Ä–∏–π", "–¢—Ä–µ–∫–µ—Ä—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫", "–ú–µ–¥–∏—Ç–∞—Ü–∏—è", "–°–æ–Ω"]
            },
            "social_apps": {
                "popularity": 75,
                "description": "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–º–µ—é—Ç –≤—ã—Å–æ–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –≤–∏—Ä—É—Å–Ω–æ—Å—Ç–∏.",
                "examples": ["–ß–∞—Ç—ã", "–§–æ—Ç–æ-–æ–±–º–µ–Ω", "–ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞", "–°–æ–æ–±—â–µ—Å—Ç–≤–∞"]
            },
            "utility_apps": {
                "popularity": 70,
                "description": "–£—Ç–∏–ª–∏—Ç—ã —Ä–µ—à–∞—é—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
                "examples": ["–ü–æ–≥–æ–¥–∞", "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã", "QR-—Å–∫–∞–Ω–µ—Ä—ã", "–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä—ã"]
            }
        }

    def generate_personalized_response(self, message, session_id="default"):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ —Å–µ—Å—Å–∏–∏"""
        if session_id not in self.user_session:
            self.user_session[session_id] = {
                "stage": "initial",
                "project_type": None,
                "preferences": {},
                "questions_asked": [],
                "conversation": [],
                "current_project_id": None,
                "project_creation_in_progress": False
            }

        session = self.user_session[session_id]
        session["conversation"].append({"user": message, "timestamp": time.time()})
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ–ø–µ—á–∞—Ç–∫–∞–º–∏ –∏ —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏
        processed_message = nlp_processor.correct_and_normalize(message)
        message_type = self.analyze_message(processed_message)

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        interaction_logger.log_interaction(session_id, message, processed_message, message_type)

        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –¥–∏–∞–ª–æ–≥–∞
        if session["stage"] == "initial":
            return self.handle_initial_stage(processed_message, message_type, session_id)
        elif session["stage"] == "clarifying":
            return self.handle_clarifying_stage(processed_message, session_id)
        elif session["stage"] == "creating":
            return self.handle_creating_stage(processed_message, session_id)
        elif session["stage"] == "editing":
            return self.handle_editing_stage(processed_message, session_id)
        else: # –û–±—â–∏–π —Å–ª—É—á–∞–π –∏–ª–∏ –µ—Å–ª–∏ —ç—Ç–∞–ø –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
            return self.handle_general_stage(processed_message, session_id)

    def analyze_message(self, message):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        message_lower = message.lower()

        # –ò–≥—Ä—ã
        if any(word in message_lower for word in ["–∏–≥—Ä–∞", "–∏–≥—Ä—É", "game", "–∑–º–µ–π–∫–∞", "—Ç–µ—Ç—Ä–∏—Å", "–∞—Ä–∫–∞–¥", "–≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∞", "—Å—Ç—Ä–µ–ª—è–ª–∫–∞", "—Ä–∞–Ω–Ω–µ—Ä"]):
            return "game_request"

        # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if any(word in message_lower for word in ["todo", "–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫", "–∑–∞–º–µ—Ç–∫–∏", "–æ—Ä–≥–∞–Ω–∞–π–∑–µ—Ä", "–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "—Å–ø–∏—Å–æ–∫ –¥–µ–ª", "–∫–∞–ª–µ–Ω–¥–∞—Ä—å", "—Ç—Ä–µ–∫–µ—Ä"]):
            return "productivity_request"

        # –£—Ç–∏–ª–∏—Ç—ã
        if any(word in message_lower for word in ["–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", "–ø–æ–≥–æ–¥–∞", "–∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä", "—É—Ç–∏–ª–∏—Ç–∞", "–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç", "–ø–æ–º–æ—â–Ω–∏–∫"]):
            return "utility_request"
        
        # –†—ã–Ω–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        if any(word in message_lower for word in ["—Ç—Ä–µ–Ω–¥", "—Ä—ã–Ω–æ–∫", "–ø–æ–ø—É–ª—è—Ä–Ω–æ", "–≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–æ", "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]):
            return "market_analysis"

        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        if any(word in message_lower for word in ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "–¥–æ–±—Ä—ã–π", "hi", "hello", "–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ", "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å"]):
            return "greeting"

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        if any(word in message_lower for word in ["–¥–∞", "yes", "—Å–æ–≥–ª–∞—Å–µ–Ω", "–ø–æ–¥—Ö–æ–¥–∏—Ç", "—Å–æ–∑–¥–∞–≤–∞–π", "–¥–∞–≤–∞–π", "–æ–∫", "—Ö–æ—Ä–æ—à–æ", "—É—Ä–∞", "–æ—Ç–ª–∏—á–Ω–æ"]):
            return "confirmation"

        # –û—Ç—Ä–∏—Ü–∞–Ω–∏—è / –û—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
        if any(word in message_lower for word in ["–Ω–µ—Ç", "no", "–Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç", "–¥—Ä—É–≥–æ–µ", "–∏–Ω–∞—á–µ", "–æ—Ç–º–µ–Ω–∞", "–ø–ª–æ—Ö–æ"]):
            return "rejection"
            
        # –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
        if any(word in message_lower for word in ["—Å–∫–∞—á–∞—Ç—å", "—Å–∫–∞—á–∞–π", "–∞—Ä—Ö–∏–≤", "zip", "–∑–∞–≥—Ä—É–∑–∏—Ç—å"]):
            return "download_request"
            
        # –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ / –¥–æ—Ä–∞–±–æ—Ç–∫—É
        if any(word in message_lower for word in ["–¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å", "—É–ª—É—á—à–∏—Ç—å", "–∏–∑–º–µ–Ω–∏—Ç—å", "–¥–æ–±–∞–≤–∏—Ç—å", "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "—Ñ–∏—á–∞", "—Ñ—É–Ω–∫—Ü–∏—è"]):
            return "edit_request"

        return "general"

    def handle_initial_stage(self, message, message_type, session_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç–∞–¥–∏–∏ –¥–∏–∞–ª–æ–≥–∞"""
        session = self.user_session[session_id]

        if message_type == "greeting":
            return {
                "type": "ai_response",
                "message": "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é no-code –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π!\n\nüöÄ **–ß—Ç–æ –º—ã –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å:**\n‚Ä¢ üéÆ –ò–≥—Ä—ã (–∞—Ä–∫–∞–¥—ã, –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏)\n‚Ä¢ üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (TODO, –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏)\n‚Ä¢ üõ† –ü–æ–ª–µ–∑–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã (–ø–æ–≥–æ–¥–∞, –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä)\n‚Ä¢ üåê –õ–µ–Ω–¥–∏–Ω–≥–∏ –¥–ª—è –≤–∞—à–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π\n\nüí° –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —Å–æ–∑–¥–∞—Ç—å? –Ø –ø–æ–º–æ–≥—É –≤—ã–±—Ä–∞—Ç—å –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑–æ–≤—É—é –≤–µ—Ä—Å–∏—é!",
                "suggestions": [
                    "–•–æ—á—É —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É",
                    "–ù—É–∂–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã",
                    "–ü–æ–∫–∞–∂–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã",
                    "–ü–æ–º–æ–≥–∏ —Å –∏–¥–µ–µ–π"
                ]
            }

        elif message_type == "game_request":
            session["stage"] = "clarifying"
            session["project_type"] = "game"
            return self.ask_clarification("game", session_id)

        elif message_type == "productivity_request":
            session["stage"] = "clarifying"
            session["project_type"] = "productivity"
            return self.ask_clarification("productivity", session_id)

        elif message_type == "utility_request":
            session["stage"] = "clarifying"
            session["project_type"] = "utility"
            return self.ask_clarification("utility", session_id)
            
        elif message_type == "market_analysis":
            return self.show_market_analysis()
            
        elif message_type == "edit_request":
             return {
                "type": "ai_response",
                "message": "üí° –û—Ç–ª–∏—á–Ω–∞—è –∏–¥–µ—è! –î–æ—Ä–∞–±–æ—Ç–∫–∞ –∏ —É–ª—É—á—à–µ–Ω–∏–µ - —ç—Ç–æ –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É. –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –≤ –≤–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ?",
                "suggestions": [
                    "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏",
                    "–ò–∑–º–µ–Ω–∏—Ç—å –¥–∏–∑–∞–π–Ω",
                    "–£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
                    "–ü–æ–∫–∞–∂–∏ –ø—Ä–∏–º–µ—Ä—ã –¥–æ—Ä–∞–±–æ—Ç–æ–∫"
                ]
            }

        else:
            return {
                "type": "ai_response",
                "message": "üìä **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:**\n‚Ä¢ üéÆ **–ò–≥—Ä—ã** - –≤—Å–µ–≥–¥–∞ –≤ —Ç—Ä–µ–Ω–¥–µ!\n‚Ä¢ üì± **–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å** - —Ä–µ—à–∞—é—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏.\n\n–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—à–µ–π –∏–¥–µ–µ, –∏ —è –ø–æ–º–æ–≥—É –≤–æ–ø–ª–æ—Ç–∏—Ç—å –µ—ë –≤ –∂–∏–∑–Ω—å!",
                "suggestions": [
                    "–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É",
                    "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞",
                    "–ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–µ–Ω–¥—ã –ø–æ–¥—Ä–æ–±–Ω–µ–µ",
                    "–ü–æ–º–æ–≥–∏ –≤—ã–±—Ä–∞—Ç—å –∏–¥–µ—é"
                ]
            }

    def ask_clarification(self, project_type, session_id):
        """–ó–∞–¥–∞–µ—Ç —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–∏–ø—É –ø—Ä–æ–µ–∫—Ç–∞"""
        session = self.user_session[session_id]
        questions = []
        
        if project_type == "game":
            questions = [
                "–ö–∞–∫–æ–π –∂–∞–Ω—Ä –∏–≥—Ä—ã –≤–∞—Å –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? (–∞—Ä–∫–∞–¥–∞, –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∞, —Å—Ç—Ä–∞—Ç–µ–≥–∏—è, —Ä–∞–Ω–Ω–µ—Ä)",
                "–ö–∞–∫—É—é —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é –≤—ã –≤–∏–¥–∏—Ç–µ? (–¥–µ—Ç–∏, –ø–æ–¥—Ä–æ—Å—Ç–∫–∏, –≤–∑—Ä–æ—Å–ª—ã–µ)",
                "–ö–∞–∫–æ–π —Å—Ç–∏–ª—å –¥–∏–∑–∞–π–Ω–∞ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ? (–º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π, —è—Ä–∫–∏–π, —Ä–µ—Ç—Ä–æ, –Ω–µ–æ–Ω–æ–≤—ã–π)",
                "–ù—É–∂–Ω–∞ –ª–∏ —Å–∏—Å—Ç–µ–º–∞ –æ—á–∫–æ–≤, —Ä–µ–∫–æ—Ä–¥–æ–≤ –∏–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π?",
                "–ü–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ª–∏ –≤ –±—É–¥—É—â–µ–º –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º?"
            ]
            intro_message = "–û—Ç–ª–∏—á–Ω–æ! üéÆ –ò–≥—Ä—ã - —Å–∞–º–æ–µ –ø–æ–ø—É–ª—è—Ä–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ. –ß—Ç–æ –Ω–∞—Å—á–µ—Ç —Å—Ç–∏–ª—è? –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π, —Ä–µ—Ç—Ä–æ –∏–ª–∏ –Ω–µ–æ–Ω–æ–≤—ã–π?"
        elif project_type == "productivity":
            questions = [
                "–ö–∞–∫—É—é –æ—Å–Ω–æ–≤–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É –¥–æ–ª–∂–Ω–æ —Ä–µ—à–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ? (–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á, —É—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏)",
                "–ö—Ç–æ –≤–∞—à–∞ —Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è? (—Å—Ç—É–¥–µ–Ω—Ç—ã, –æ—Ñ–∏—Å–Ω—ã–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–∏, —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä—ã)",
                "–ù—É–∂–Ω–∞ –ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–µ–∂–¥—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏ –∏–ª–∏ –æ–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ?",
                "–ö–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å—á–∏—Ç–∞–µ—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω—ã–º–∏? (–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)",
                "–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–ª–∏ –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π?"
            ]
            intro_message = "–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ! üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ—á–µ–Ω—å –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω—ã. –î–ª—è –Ω–∞—á–∞–ª–∞, –∫–∞–∫–æ–µ –æ—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è?"
        elif project_type == "utility":
            questions = [
                "–ö–∞–∫—É—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–¥–∞—á—É –¥–æ–ª–∂–Ω–æ —Ä–µ—à–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ? (—Ä–∞—Å—á–µ—Ç—ã, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ)",
                "–ö—Ç–æ –±—É–¥–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º?",
                "–ù—É–∂–Ω—ã –ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –æ—Å–æ–±—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –¥—Ä—É–≥–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏)?",
                "–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω (–ø—Ä–æ—Å—Ç–æ–π, –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π, —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è–º–∏)?"
            ]
            intro_message = "–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! üõ† –£—Ç–∏–ª–∏—Ç—ã —Ä–µ—à–∞—é—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã. –ù–∞—á–Ω–µ–º —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏: –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä, –ø–æ–≥–æ–¥–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ?"
        else: # –û–±—â–∏–π —Å–ª—É—á–∞–π
            questions = [
                "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—à–µ–π –∏–¥–µ–µ",
                "–ö—Ç–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ?",
                "–ö–∞–∫—É—é –≥–ª–∞–≤–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É –æ–Ω–æ –¥–æ–ª–∂–Ω–æ —Ä–µ—à–∞—Ç—å?",
                "–ï—Å—Ç—å –ª–∏ –ø—Ä–∏–º–µ—Ä—ã –ø–æ—Ö–æ–∂–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –Ω—Ä–∞–≤—è—Ç—Å—è?",
                "–ö–∞–∫–æ–π –±—é–¥–∂–µ—Ç –∏ —Å—Ä–æ–∫–∏ –≤—ã —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ?"
            ]
            intro_message = "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –ß—Ç–æ–±—ã —è –º–æ–≥ –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –≤–∞—à—É –∏–¥–µ—é, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å?"

        session["questions_asked"] = questions
        session["stage"] = "clarifying"
        
        return {
            "type": "ai_response",
            "message": f"{intro_message}\n\n{questions[0]}",
            "suggestions": self.get_suggestions_for_question(questions[0])
        }

    def get_suggestions_for_question(self, question):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"""
        if "–∂–∞–Ω—Ä –∏–≥—Ä—ã" in question:
            return ["–ê—Ä–∫–∞–¥–∞", "–ì–æ–ª–æ–≤–æ–ª–æ–º–∫–∞", "–†–∞–Ω–Ω–µ—Ä", "–°—Ç—Ä–∞—Ç–µ–≥–∏—è", "–î—Ä—É–≥–æ–µ"]
        elif "—Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é" in question:
            return ["–î–µ—Ç–∏", "–ü–æ–¥—Ä–æ—Å—Ç–∫–∏", "–í–∑—Ä–æ—Å–ª—ã–µ", "–í—Å–µ"]
        elif "—Å—Ç–∏–ª—å –¥–∏–∑–∞–π–Ω–∞" in question:
            return ["–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π", "–†–µ—Ç—Ä–æ", "–ù–µ–æ–Ω–æ–≤—ã–π", "–ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π"]
        elif "–æ—Å–Ω–æ–≤–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É" in question:
            return ["–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á", "–£—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏", "–ë—ã—Å—Ç—Ä—ã–µ —Ä–∞—Å—á–µ—Ç—ã", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–≥–æ–¥–µ"]
        elif "–æ—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ" in question:
            return ["TODO —Å–ø–∏—Å–æ–∫", "–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫", "–¢—Ä–µ–∫–µ—Ä –ø—Ä–∏–≤—ã—á–µ–∫", "–ó–∞–º–µ—Ç–∫–∏"]
        elif "–∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–¥–∞—á—É" in question:
            return ["–£–º–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", "–ü–æ–≥–æ–¥–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç", "QR-—Å–∫–∞–Ω–µ—Ä"]
        else:
            return ["–î–∞", "–ù–µ—Ç", "–£—Ç–æ—á–Ω–∏—Ç–µ"]

    def handle_clarifying_stage(self, message, session_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–¥–∏–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–π"""
        session = self.user_session[session_id]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if session["questions_asked"]:
            current_question = session["questions_asked"][0]
            session["preferences"][current_question] = message
            session["questions_asked"].pop(0) # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å

        if not session["questions_asked"]: # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
            session["stage"] = "confirming"
            project_type = session["project_type"]
            project_name = f"{project_type.replace('_', ' ').title()} –æ—Ç AI"
            description = f"–ë–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è {project_type.replace('_', ' ')}."
            
            # –ü–æ–ø—ã—Ç–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
            if project_type == "game":
                game_type = session["preferences"].get("–ö–∞–∫–æ–π –∂–∞–Ω—Ä –∏–≥—Ä—ã –≤–∞—Å –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", "–∏–≥—Ä–∞")
                style = session["preferences"].get("–ö–∞–∫–æ–π —Å—Ç–∏–ª—å –¥–∏–∑–∞–π–Ω–∞ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?", "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π")
                project_name = f"{style.capitalize()} {game_type.capitalize()} –ò–≥—Ä–∞"
                description = f"–£–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–∞—è {game_type} –∏–≥—Ä–∞ –≤ {style} —Å—Ç–∏–ª–µ."
            elif project_type == "productivity":
                app_purpose = session["preferences"].get("–ö–∞–∫—É—é –æ—Å–Ω–æ–≤–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É –¥–æ–ª–∂–Ω–æ —Ä–µ—à–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ?", "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
                project_name = f"–£–¥–æ–±–Ω—ã–π {app_purpose}"
                description = f"–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è {app_purpose}."
            elif project_type == "utility":
                utility_type = session["preferences"].get("–ö–∞–∫—É—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–¥–∞—á—É –¥–æ–ª–∂–Ω–æ —Ä–µ—à–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ?", "—É—Ç–∏–ª–∏—Ç–∞")
                project_name = f"–£–º–Ω—ã–π {utility_type}"
                description = f"–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è {utility_type}."

            session["project_details"] = {
                "type": project_type,
                "name": project_name,
                "description": description
            }

            return {
                "type": "ai_response",
                "message": f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ú—ã —Å–æ–±—Ä–∞–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å '{project_name}'?\n\n*–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n\n–Ø –º–æ–≥—É —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑–æ–≤—É—é –≤–µ—Ä—Å–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.",
                "suggestions": ["–î–∞, —Å–æ–∑–¥–∞–≤–∞–π!", "–ù–µ—Ç, –¥–∞–≤–∞–π –∏–∑–º–µ–Ω–∏–º", "–ü–æ–∫–∞–∂–∏ –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã", "–î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π"],
                "project_details": session["project_details"] # –ü–µ—Ä–µ–¥–∞–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            }
        else:
            next_question = session["questions_asked"][0]
            return {
                "type": "ai_response",
                "message": next_question,
                "suggestions": self.get_suggestions_for_question(next_question)
            }

    def handle_confirming_stage(self, message, session_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""
        session = self.user_session[session_id]
        
        if self.analyze_message(message) == "confirmation":
            if session.get("project_details"):
                details = session["project_details"]
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º
                project_version = version_control.get_next_version(details["type"])
                log_message = f"–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: {details['name']} (v{project_version})"
                interaction_logger.log_event("project_creation_start", {**details, "version": project_version})

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
                result = advanced_generator.generate_project(
                    project_type=details["type"],
                    description=details["description"],
                    project_name=details["name"],
                    user_preferences=session["preferences"] # –ü–µ—Ä–µ–¥–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
                )

                if result['success']:
                    project_id = result['project_id']
                    session["current_project_id"] = project_id
                    session["stage"] = "created" # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "—Å–æ–∑–¥–∞–Ω–æ"
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏
                    version_control.save_project_version(project_id, project_version, result.get("files", []), log_message)
                    
                    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
                    interaction_logger.log_event("project_creation_success", {
                        "project_id": project_id,
                        "project_name": details["name"],
                        "version": project_version
                    })

                    archive_url = f"/api/download/{project_id}"
                    return {
                        "type": "project_created",
                        "message": f"üéâ **–í–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ '{details['name']}' –≥–æ—Ç–æ–≤–æ!**\n\n‚ú® –£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤–µ—Ä—Å–∏—è {project_version}.\n\nüöÄ **–ß—Ç–æ –¥–∞–ª—å—à–µ?**\n1. –°–∫–∞—á–∞–π—Ç–µ –∞—Ä—Ö–∏–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.\n2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –∫–∞–∫ –æ—Å–Ω–æ–≤—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.\n\nüí∞ **–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª:** –¢–∞–∫–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –º–æ–≥—É—Ç –ø—Ä–∏–Ω–æ—Å–∏—Ç—å –¥–æ—Ö–æ–¥ –æ—Ç $500 –¥–æ $2000/–º–µ—Å—è—Ü!\n\nüîß –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ?",
                        "project_id": project_id,
                        "download_url": archive_url,
                        "version": project_version,
                        "suggestions": [
                            "üì• –°–∫–∞—á–∞—Ç—å –ø—Ä–æ–µ–∫—Ç",
                            "üîß –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏",
                            "üîÑ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é",
                            "‚ú® –°–æ–∑–¥–∞—Ç—å –¥—Ä—É–≥–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                            "üìä –ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É"
                        ]
                    }
                else:
                    session["stage"] = "initial" # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É
                    interaction_logger.log_error("project_creation_failed", {
                        "project_name": details["name"],
                        "error": result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                    })
                    return {
                        "type": "error",
                        "message": f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}. –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑?",
                        "suggestions": ["–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", "–°–æ–∑–¥–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–∏–ø", "–û—Ç–º–µ–Ω–∞"]
                    }
            else:
                return self.handle_general_stage(message, session_id) # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
        
        elif self.analyze_message(message) == "rejection":
             session["stage"] = "clarifying" # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É—Ç–æ—á–Ω–µ–Ω–∏—è–º
             return self.ask_clarification(session["project_type"], session_id)
        
        else: # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ
             return {
                "type": "ai_response",
                "message": f"ü§î –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è '{session['project_details']['name']}' (–¥–∞/–Ω–µ—Ç) –∏–ª–∏ —Å–∫–∞–∂–∏—Ç–µ, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å.",
                "suggestions": ["–î–∞, —Å–æ–∑–¥–∞–≤–∞–π!", "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "–û—Ç–º–µ–Ω–∞"]
            }

    def handle_creating_stage(self, message, session_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–¥–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ (–∫–æ–≥–¥–∞ –ø—Ä–æ–µ–∫—Ç —É–∂–µ —Å–æ–∑–¥–∞–Ω)"""
        session = self.user_session[session_id]
        
        if self.analyze_message(message) == "download_request":
            if session.get("current_project_id"):
                return {
                    "type": "ai_response",
                    "message": "üì• –û—Ç–ª–∏—á–Ω–æ! –í—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –≤–∞—à –ø—Ä–æ–µ–∫—Ç –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ. –ü–æ—Å–ª–µ –∏–∑—É—á–µ–Ω–∏—è, —è –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –¥–æ—Ä–∞–±–æ—Ç–∫–∞–º–∏!",
                    "download_url": f"/api/download/{session['current_project_id']}",
                    "suggestions": [
                        "üîß –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏",
                        "üîÑ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é",
                        "‚ú® –°–æ–∑–¥–∞—Ç—å –¥—Ä—É–≥–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                        "üìä –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤–µ—Ä—Å–∏–π"
                    ]
                }
            else:
                return {
                    "type": "ai_response",
                    "message": "üôÅ –ü–æ—Ö–æ–∂–µ, —É –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å —Å–æ–∑–¥–∞–Ω–∏—è!",
                    "suggestions": ["–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É", "–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "–ü–æ–º–æ–≥–∏ —Å –∏–¥–µ–µ–π"]
                }
        
        elif self.analyze_message(message) == "edit_request":
            session["stage"] = "editing"
            return {
                "type": "ai_response",
                "message": "üîß –û—Ç–ª–∏—á–Ω–æ! –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –≤–∞—à–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏?",
                "suggestions": [
                    "–î–æ–±–∞–≤–∏—Ç—å –∑–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã",
                    "–°–æ–∑–¥–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π",
                    "–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å PWA-–≤–µ—Ä—Å–∏—é",
                    "–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É",
                    "–ò–∑–º–µ–Ω–∏—Ç—å –¥–∏–∑–∞–π–Ω"
                ]
            }

        elif "–≤–µ—Ä—Å–∏" in message.lower(): # –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–µ—Ä—Å–∏–æ–Ω–Ω–æ—Å—Ç—å
             if session.get("current_project_id"):
                 project_id = session["current_project_id"]
                 versions = version_control.get_project_versions(project_id)
                 if versions:
                     version_history = "\n".join([f"- v{v['version']}: {v['description']} ({v['timestamp']})" for v in versions])
                     return {
                         "type": "ai_response",
                         "message": f"üìú **–ò—Å—Ç–æ—Ä–∏—è –≤–µ—Ä—Å–∏–π –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ '{session['project_details']['name']}':**\n{version_history}\n\n–ö–∞–∫—É—é –≤–µ—Ä—Å–∏—é –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å?",
                         "project_id": project_id,
                         "versions": versions,
                         "suggestions": ["–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–¥ –≤–µ—Ä—Å–∏–∏ X", "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π", "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é"]
                     }
                 else:
                     return {
                         "type": "ai_response",
                         "message": "–£ —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –≤–µ—Ä—Å–∏–π.",
                         "suggestions": ["–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é", "–î–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏"]
                     }
             else:
                 return {
                     "type": "ai_response",
                     "message": "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç, —á—Ç–æ–±—ã –≤–µ—Å—Ç–∏ –µ–≥–æ –≤–µ—Ä—Å–∏–æ–Ω–Ω–æ—Å—Ç—å.",
                     "suggestions": ["–°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"]
                 }

        else:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω
            return self.handle_general_stage(message, session_id)

    def handle_editing_stage(self, message, session_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–¥–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/–¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π"""
        session = self.user_session[session_id]
        
        if session.get("current_project_id"):
            project_id = session["current_project_id"]
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏—á–∏
            if self.analyze_message(message) == "edit_request":
                # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –≤—ã–∑–æ–≤–∞ advanced_generator.add_feature()
                # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç–∏–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞
                feature_description = f"–ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è: '{message}'" # –£—Å–ª–æ–≤–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                
                # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ñ–∏—á—É
                interaction_logger.log_event("feature_request", {
                    "project_id": project_id,
                    "feature": message,
                    "user_request": message
                })

                # –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏—á—É (–∏–º–∏—Ç–∞—Ü–∏—è)
                success = advanced_generator.add_feature(project_id, message) # –†–µ–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –∑–¥–µ—Å—å

                if success:
                    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏
                    new_version = version_control.get_next_version(session["project_details"]["type"])
                    version_control.save_project_version(project_id, new_version, [], f"–î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è: {message}")
                    
                    session["stage"] = "created" # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "—Å–æ–∑–¥–∞–Ω–æ"
                    
                    return {
                        "type": "ai_response",
                        "message": f"‚ú® –§—É–Ω–∫—Ü–∏—è '{message}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞! –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è {new_version}.\n\n–•–æ—Ç–∏—Ç–µ —Å–∫–∞—á–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ?",
                        "project_id": project_id,
                        "version": new_version,
                        "download_url": f"/api/download/{project_id}",
                        "suggestions": ["üì• –°–∫–∞—á–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", "üîß –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", "‚ú® –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"]
                    }
                else:
                    return {
                        "type": "error",
                        "message": f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é '{message}'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.",
                        "suggestions": ["–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥—É—é —Ñ—É–Ω–∫—Ü–∏—é", "–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å", "–û—Ç–º–µ–Ω–∞"]
                    }
            else:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å—Ç–æ –æ–±—â–∞–µ—Ç—Å—è, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–±—â–µ–º—É –æ—Ç–≤–µ—Ç—É
                return self.handle_general_stage(message, session_id)

        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É
            return self.handle_initial_stage(message, "general", session_id)

    def handle_general_stage(self, message, session_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        session = self.user_session[session_id]

        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        try:
            ai_response = ai_agent.generate_response(message) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π AI
            if ai_response and ai_response.get("type") == "ai_response":
                 # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∞—Ç –æ—Ç–≤–µ—Ç—É AI
                default_suggestions = [
                    "–°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                    "–ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–µ–Ω–¥—ã",
                    "–ü–æ–º–æ—á—å —Å –∏–¥–µ–µ–π",
                    "–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã"
                ]
                
                if "suggestions" not in ai_response or not ai_response["suggestions"]:
                    ai_response["suggestions"] = default_suggestions
                else:
                    # –î–æ–±–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ –Ω–µ –¥—É–±–ª–∏—Ä—É—é—Ç—Å—è
                    for sug in default_suggestions:
                        if sug not in ai_response["suggestions"]:
                            ai_response["suggestions"].append(sug)
                            
                return ai_response
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –±–∞–∑–æ–≤–æ–º—É AI: {e}")

        # –ï—Å–ª–∏ –±–∞–∑–æ–≤—ã–π AI –Ω–µ –¥–∞–ª –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
        return {
            "type": "ai_response",
            "message": "ü§î –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º —Å–æ–∑–¥–∞—Ç—å –æ—Ç–ª–∏—á–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
            "suggestions": [
                "–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É",
                "–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                "–ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–µ–Ω–¥—ã",
                "–ü–æ–º–æ—á—å —Å –∏–¥–µ–µ–π",
                "–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã"
            ]
        }
        
    def show_market_analysis(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –∏ —Ç—Ä–µ–Ω–¥–æ–≤"""
        trends_text = "üìä **–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π 2024:**\n\n"
        sorted_trends = sorted(self.market_trends.items(), key=lambda item: item[1]['popularity'], reverse=True)
        
        for i, (key, trend) in enumerate(sorted_trends):
            trends_text += f"{i+1}. üìà **{trend['description']}**\n"
            if trend['examples']:
                trends_text += f"   ‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã: {', '.join(trend['examples'])}\n"
        
        trends_text += "\n**üí° –°–æ–≤–µ—Ç:** –ù–∞—á–Ω–∏—Ç–µ —Å –∏–≥—Ä—ã –∏–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ - –æ–Ω–∏ –∏–º–µ—é—Ç –≤—ã—Å–æ–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –∏ —Å–ø—Ä–æ—Å!"
        
        return {
            "type": "ai_response",
            "message": trends_text,
            "suggestions": [
                "–°–æ–∑–¥–∞—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—É—é –∏–≥—Ä—É",
                "–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å TODO-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", 
                "–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤",
                "–ü–æ–º–æ–≥–∏ –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥ –º–æ–π –±—é–¥–∂–µ—Ç"
            ]
        }

# --- API Routes ---

@app.route('/api/chat', methods=['POST'])
def chat():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞"""
    data = request.json
    message = data.get('message', '')
    session_id = data.get('session_id', str(uuid.uuid4())) # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º session_id, –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω

    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π AI
        interaction_logger.log_incoming_message(session_id, message)
        
        ai_response = ai_agent.generate_personalized_response(message, session_id)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç AI
        interaction_logger.log_ai_response(session_id, ai_response)
        
        return jsonify(ai_response)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ API /api/chat: {e}")
        interaction_logger.log_error("api_chat_exception", {"session_id": session_id, "error": str(e)})
        
        # Fallback –Ω–∞ –±–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        return jsonify({
            "type": "error",
            "message": "ü§ñ –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å.",
            "suggestions": ["–°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "–ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç", "–ò–∑—É—á–∏—Ç—å —Ä—ã–Ω–æ–∫", "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å"]
        })

@app.route('/api/generate-project', methods=['POST'])
def generate_project():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ (–∏–∑ UI)"""
    data = request.json
    description = data.get('description', '')
    project_name = data.get('project_name', '–ú–æ–π –ø—Ä–æ–µ–∫—Ç')
    project_type = data.get('project_type', 'snake_game')
    style = data.get('style', 'modern')
    user_preferences = data.get('preferences', {}) # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏–∑ UI

    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    user_id = data.get('user_id', 'anonymous') # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –µ—Å—Ç—å user_id
    if user_id not in ai_agent.user_session:
         ai_agent.user_session[user_id] = {
             "stage": "created", # –°—Ä–∞–∑—É –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "—Å–æ–∑–¥–∞–Ω–æ"
             "current_project_id": None,
             "project_details": {},
             "preferences": user_preferences # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
         }
    else:
        ai_agent.user_session[user_id]["preferences"].update(user_preferences)

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
    project_details = {
        "type": project_type,
        "name": project_name,
        "description": description
    }
    if project_type == "game":
        project_details["name"] = f"{style.capitalize()} {project_type.replace('_', ' ').title()} –ò–≥—Ä–∞"
        project_details["description"] = f"–£–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–∞—è {project_type.replace('_', ' ')} –∏–≥—Ä–∞ –≤ {style} —Å—Ç–∏–ª–µ."
    elif project_type == "productivity":
        project_details["name"] = f"–£–¥–æ–±–Ω—ã–π {project_type.replace('_', ' ').title()}"
        project_details["description"] = f"–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."
    elif project_type == "utility":
        project_details["name"] = f"–£–º–Ω—ã–π {project_type.replace('_', ' ').title()}"
        project_details["description"] = f"–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —É—Ç–∏–ª–∏—Ç–∞."
    
    ai_agent.user_session[user_id]["project_details"] = project_details

    # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ä—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    project_version = version_control.get_next_version(project_type)
    log_message = f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ (UI): {project_details['name']} (v{project_version})"
    interaction_logger.log_event("project_creation_start", {**project_details, "version": project_version, "user_id": user_id})

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç
    result = advanced_generator.generate_project(
        project_type=project_type,
        description=project_details["description"],
        project_name=project_details["name"],
        user_preferences=user_preferences
    )

    if result['success']:
        project_id = result['project_id']
        ai_agent.user_session[user_id]["current_project_id"] = project_id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Ä—Å–∏—é
        version_control.save_project_version(project_id, project_version, result.get("files", []), log_message)
        interaction_logger.log_event("project_creation_success", {
            "project_id": project_id,
            "project_name": project_details["name"],
            "version": project_version,
            "user_id": user_id
        })
        
        archive_url = f"/api/download/{project_id}"
        result['download_url'] = archive_url
        result['project_id'] = project_id
        result['version'] = project_version
        result['message'] = f"–ü—Ä–æ–µ–∫—Ç '{project_details['name']}' (v{project_version}) —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!"
    else:
        interaction_logger.log_error("api_generate_project_failed", {"error": result.get('error'), "user_id": user_id})
        result['message'] = f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"

    return jsonify(result)

@app.route('/api/download/<project_id>')
def download_project(project_id):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"""
    project_path = os.path.join(PROJECTS_DIR, project_id)
    archive_path = os.path.join(TEMP_DIR, f"{project_id}.zip")

    if not os.path.exists(project_path):
        interaction_logger.log_error("download_project_not_found", {"project_id": project_id})
        return jsonify({"error": "–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404

    # –°–æ–∑–¥–∞—ë–º –∞—Ä—Ö–∏–≤ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not os.path.exists(archive_path):
        try:
            create_project_archive(project_id)
            interaction_logger.log_event("archive_created_on_demand", {"project_id": project_id})
        except Exception as e:
            interaction_logger.log_error("archive_creation_failed_on_demand", {"project_id": project_id, "error": str(e)})
            return jsonify({"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞—Ä—Ö–∏–≤"}), 500

    interaction_logger.log_event("project_downloaded", {"project_id": project_id})
    return send_file(archive_path, as_attachment=True, download_name=f"project_{project_id}.zip")

@app.route('/api/projects')
def list_projects():
    """–°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = request.args.get('user_id', 'anonymous')
    projects = []
    
    user_projects_dir = os.path.join(USER_DATA_DIR, user_id, PROJECTS_DIR)
    os.makedirs(user_projects_dir, exist_ok=True)

    for project_id in os.listdir(user_projects_dir):
        project_path = os.path.join(user_projects_dir, project_id)
        if os.path.isdir(project_path):
            try:
                project_info_path = os.path.join(project_path, "project_info.json")
                if os.path.exists(project_info_path):
                    with open(project_info_path, 'r') as f:
                        info = json.load(f)
                        projects.append({
                            "id": project_id,
                            "name": info.get("name", f"–ü—Ä–æ–µ–∫—Ç {project_id[:8]}"),
                            "type": info.get("type", "unknown"),
                            "created_at": info.get("created_at", datetime.fromtimestamp(os.path.getctime(project_path)).isoformat())
                        })
                else: # Fallback, –µ—Å–ª–∏ info –Ω–µ—Ç
                    projects.append({
                        "id": project_id,
                        "name": f"–ü—Ä–æ–µ–∫—Ç {project_id[:8]}",
                        "type": "unknown",
                        "created_at": datetime.fromtimestamp(os.path.getctime(project_path)).isoformat()
                    })
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ {project_id}: {e}")
                interaction_logger.log_error("api_list_projects_read_error", {"project_id": project_id, "error": str(e)})

    interaction_logger.log_event("api_projects_list_requested", {"user_id": user_id, "count": len(projects)})
    return jsonify({"projects": projects})
    
@app.route('/api/project/versions/<project_id>')
def get_project_versions(project_id):
    """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤–µ—Ä—Å–∏–π –ø—Ä–æ–µ–∫—Ç–∞"""
    versions = version_control.get_project_versions(project_id)
    if versions is None:
        interaction_logger.log_error("api_get_versions_not_found", {"project_id": project_id})
        return jsonify({"error": "–ü—Ä–æ–µ–∫—Ç –∏–ª–∏ –µ–≥–æ –≤–µ—Ä—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"}), 404
    
    interaction_logger.log_event("api_get_project_versions", {"project_id": project_id, "count": len(versions)})
    return jsonify({"versions": versions})

@app.route('/api/project/revert/<project_id>', methods=['POST'])
def revert_project_version(project_id):
    """–û—Ç–∫–∞—Ç–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏"""
    data = request.json
    target_version = data.get('version') # –ù–æ–º–µ—Ä –≤–µ—Ä—Å–∏–∏ –¥–ª—è –æ—Ç–∫–∞—Ç–∞

    if not target_version:
        return jsonify({"error": "–ù–µ —É–∫–∞–∑–∞–Ω–∞ –≤–µ—Ä—Å–∏—è –¥–ª—è –æ—Ç–∫–∞—Ç–∞"}), 400

    # –õ–æ–≥–∏–∫–∞ –æ—Ç–∫–∞—Ç–∞ —á–µ—Ä–µ–∑ version_control
    success = version_control.revert_project(project_id, target_version)

    if success:
        interaction_logger.log_event("project_reverted", {"project_id": project_id, "version": target_version})
        return jsonify({"success": True, "message": f"–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–∞—á–µ–Ω –¥–æ –≤–µ—Ä—Å–∏–∏ {target_version}"})
    else:
        interaction_logger.log_error("api_revert_project_failed", {"project_id": project_id, "version": target_version})
        return jsonify({"success": False, "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–∞—Ç–∏—Ç—å –ø—Ä–æ–µ–∫—Ç"}), 500

@app.route('/api/ai/status')
def get_ai_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å AI —Å–µ—Ä–≤–∏—Å–æ–≤"""
    return jsonify({
        "available_services": [
            {
                "name": "SuperSmartAI",
                "enabled": True,
                "configured": True
            },
            {
                "name": "SmartNLP",
                "enabled": True,
                "configured": True
            },
            {
                "name": "ProjectVersionControl",
                "enabled": True,
                "configured": True
            },
            {
                "name": "UserInteractionLogger",
                "enabled": True,
                "configured": True
            },
            {
                "name": "AdvancedProjectGenerator",
                "enabled": True,
                "configured": True
            }
        ],
        "current_ai": "SuperSmartAI",
        "configured": True
    })
    
@app.route('/api/logs/interaction', methods=['POST'])
def log_interaction_api():
    """API –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π"""
    data = request.json
    session_id = data.get('session_id')
    event_type = data.get('event_type')
    payload = data.get('payload')
    
    if not session_id or not event_type:
        return jsonify({"error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: session_id, event_type"}), 400
        
    interaction_logger.log_event(event_type, payload, session_id)
    return jsonify({"success": True, "message": "–°–æ–±—ã—Ç–∏–µ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–æ"})

# --- WebSocket ---
@socketio.on('connect')
def handle_connect():
    print('–ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è')

@socketio.on('disconnect')
def handle_disconnect():
    print('–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è')

@socketio.on('generate_project_ws')
def handle_project_generation_ws(data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ WebSocket"""
    session_id = data.get('session_id', str(uuid.uuid4()))
    project_type = data.get('project_type', 'snake_game')
    description = data.get('description', '')
    project_name = data.get('project_name', '–ú–æ–π –ø—Ä–æ–µ–∫—Ç')
    preferences = data.get('preferences', {})

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º AI –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã
    if not description or not project_name:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –≤—ã–∑–≤–∞—Ç—å AI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–µ—Ç–∞–ª–µ–π, –Ω–æ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ
        project_name = f"{project_type.capitalize()} –æ—Ç AI"
        description = f"–ë–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è {project_type.replace('_', ' ')}."

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç —á–µ—Ä–µ–∑ AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞, –∏–º–∏—Ç–∏—Ä—É—è –∑–∞–ø—Ä–æ—Å
    ai_response = ai_agent.generate_personalized_response(f"–°–æ–∑–¥–∞–π {project_type}", session_id)
    
    if ai_response.get("type") == "project_created":
        emit('project_status', {
            'status': 'completed',
            'project_id': ai_response['project_id'],
            'download_url': ai_response['download_url'],
            'message': ai_response['message'],
            'version': ai_response.get('version', 1)
        }, room=request.sid) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ –∫–ª–∏–µ–Ω—Ç—É
    else:
        emit('project_status', {
            'status': 'error',
            'message': ai_response.get('message', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç')
        }, room=request.sid)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def create_project_archive(project_id):
    """–°–æ–∑–¥–∞—ë—Ç zip-–∞—Ä—Ö–∏–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
    project_path = os.path.join(PROJECTS_DIR, project_id)
    archive_path = os.path.join(TEMP_DIR, f"{project_id}.zip")

    if not os.path.exists(project_path):
        raise FileNotFoundError(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {project_path}")

    try:
        with zipfile.ZipFile(archive_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
            for root, dirs, files in os.walk(project_path):
                for file in files:
                    file_path = os.path.join(root, file)
                    arcname = os.path.relpath(file_path, project_path)
                    zipf.write(file_path, arcname)
        return archive_path
    except Exception as e:
        interaction_logger.log_error("create_project_archive_failed", {"project_id": project_id, "error": str(e)})
        raise

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫–∞—é Lovable AI Platform...")
    print("üìç Backend: http://0.0.0.0:5000")
    print("üîå WebSocket: ws://0.0.0.0:5000")
    print("üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    print("=" * 50)

    socketio.run(app, host='0.0.0.0', port=5000, debug=True)