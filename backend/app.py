from flask import Flask, request, jsonify, send_file, session, redirect, url_for
from flask_cors import CORS
from flask_socketio import SocketIO, emit, join_room, leave_room
from functools import wraps
import os
import json
import zipfile
import tempfile
import shutil
from datetime import datetime, timedelta
import uuid
from pathlib import Path
import subprocess
import threading
import queue
import time
import random
import hashlib
import sqlite3
import asyncio
from concurrent.futures import ThreadPoolExecutor
import pickle
import logging
from functools import wraps
# –ë–∞–∑–æ–≤—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
class SimplePerformanceMonitor:
    def __init__(self):
        self.stats = {}

    def get_stats(self):
        return self.stats

def monitor_performance(func):
    def wrapper(*args, **kwargs):
        start_time = time.time()
        result = func(*args, **kwargs)
        end_time = time.time()
        print(f"‚ö° {func.__name__} –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ {end_time - start_time:.2f}—Å")
        return result
    return wrapper

performance_monitor = SimplePerformanceMonitor()

# –ë–∞–∑–æ–≤—ã–π NLP –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
class SmartNLP:
    def correct_and_normalize(self, text):
        return text.lower().strip()

# –ë–∞–∑–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –≤–µ—Ä—Å–∏–π
class ProjectVersionControl:
    def get_next_version(self, project_type):
        return "1.0"
    def save_project_version(self, project_id, version, files, message):
        pass
    def get_project_versions(self, project_id):
        return []
    def revert_project(self, project_id, target_version):
        return False # Placeholder

# –ë–∞–∑–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
class UserInteractionLogger:
    def log_event(self, event, data, session_id=None):
        print(f"LOG: {event} - {data}")
    def log_interaction(self, session_id, message, processed, msg_type):
        print(f"INTERACTION: {session_id} - {message}")
    def log_user_request(self, user_id, session_id, request_data):
        print(f"USER_REQUEST: {user_id} - {session_id} - {request_data}")
        return f"req_{session_id}"
    def log_ai_response(self, user_id, session_id, request_id, response_data, processing_time):
        print(f"AI_RESPONSE: {user_id} - {session_id} - {request_id}")
    def log_project_creation(self, user_id, session_id, project_data):
        print(f"PROJECT: {user_id} - {project_data}")
    def log_error(self, user_id, session_id, error_data):
        print(f"ERROR: {user_id} - {session_id} - {error_data}")

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤
class AdvancedProjectGenerator:
    def generate_project(self, project_type, description, project_name, user_preferences=None):
        return generator.generate_project(project_type, description, project_name)
    def add_feature(self, project_id, feature):
        return True

app = Flask(__name__)
app.secret_key = 'vibecode_ai_secret_key_2024_super_secure'
CORS(app, supports_credentials=True)
socketio = SocketIO(app, cors_allowed_origins="*", manage_session=True, async_mode='threading')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü—É–ª –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
executor = ThreadPoolExecutor(max_workers=50)

# –ö—ç—à –≤ –ø–∞–º—è—Ç–∏ (fallback –µ—Å–ª–∏ Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
memory_cache = {}
cache_ttl = {}

# –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
try:
    import redis
    redis_client = redis.Redis(host='localhost', port=6379, db=0, decode_responses=True)
    redis_client.ping()
    print("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è")
    USE_REDIS = True
except Exception as e:
    print(f"‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    print("üí° –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–º—è—Ç—å –¥–ª—è –∫—ç—à–∞")
    USE_REDIS = False
    redis_client = None

def login_required(f):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'user_id' not in session:
            return jsonify({"error": "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", "redirect": "/auth"}), 401
        return f(*args, **kwargs)
    return decorated_function

@app.route('/')
def serve_frontend():
    """Serve main frontend page"""
    return send_file('../index.html')

@app.route('/dashboard')
def serve_dashboard():
    """Serve dashboard page"""
    return send_file('../dashboard.html')

@app.route('/auth')
def serve_auth():
    """Serve auth page"""
    return send_file('../auth.html')

# === API –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ ===

@app.route('/api/register', methods=['POST'])
def register():
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    data = request.json
    email = data.get('email', '').strip().lower()
    name = data.get('name', '').strip()
    password = data.get('password', '')

    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    if not email or not name or not password:
        return jsonify({"error": "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"}), 400

    if len(password) < 8:
        return jsonify({"error": "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤"}), 400

    if '@' not in email:
        return jsonify({"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email"}), 400

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    existing_user = get_user_by_email(email)
    if existing_user:
        return jsonify({"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"}), 400

    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = create_user(email, name, password)
    if user_id:
        session['user_id'] = user_id
        session['user_email'] = email
        session['user_name'] = name

        interaction_logger.log_event("user_registered", {
            "user_id": user_id,
            "email": email,
            "name": name
        })

        return jsonify({
            "success": True,
            "message": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!",
            "user": {
                "id": user_id,
                "email": email,
                "name": name,
                "plan": "free",
                "requests_left": 15
            }
        })
    else:
        return jsonify({"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"}), 500

@app.route('/api/login', methods=['POST'])
def login():
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    data = request.json
    email = data.get('email', '').strip().lower()
    password = data.get('password', '')

    if not email or not password:
        return jsonify({"error": "Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"}), 400

    user = get_user_by_email(email)
    if not user or not verify_password(password, user[3]):  # user[3] = password_hash
        return jsonify({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å"}), 401

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('UPDATE users SET last_login = CURRENT_TIMESTAMP WHERE id = ?', (user[0],))
    conn.commit()
    conn.close()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏–∏
    session['user_id'] = user[0]
    session['user_email'] = user[1]
    session['user_name'] = user[2]

    interaction_logger.log_event("user_logged_in", {
        "user_id": user[0],
        "email": user[1]
    })

    return jsonify({
        "success": True,
        "message": "–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!",
        "user": {
            "id": user[0],
            "email": user[1],
            "name": user[2],
            "plan": user[4],
            "requests_left": max(0, user[6] - user[5])  # requests_limit - requests_used
        }
    })

@app.route('/api/logout', methods=['POST'])
def logout():
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    session.clear()
    return jsonify({"success": True, "message": "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"})

@app.route('/api/user/profile')
@login_required
def get_user_profile():
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = get_user_by_id(session['user_id'])
    if not user:
        return jsonify({"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404

    return jsonify({
        "user": {
            "id": user[0],
            "email": user[1],
            "name": user[2],
            "plan": user[4],
            "requests_used": user[5],
            "requests_limit": user[6],
            "requests_left": max(0, user[6] - user[5]),
            "subscription_expires": user[7],
            "created_at": user[8]
        }
    })

@app.route('/api/user/update', methods=['POST'])
@login_required
def update_user_profile():
    """–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    data = request.json
    name = data.get('name', '').strip()

    if not name:
        return jsonify({"error": "–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"}), 400

    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('UPDATE users SET name = ? WHERE id = ?', (name, session['user_id']))
    conn.commit()
    conn.close()

    session['user_name'] = name

    return jsonify({"success": True, "message": "–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω"})

@app.route('/api/user/history')
@login_required
def get_chat_history():
    """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    history = get_user_chat_history(session['user_id'])

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–µ—Å—Å–∏—è–º
    sessions = {}
    for row in history:
        session_id, message, response, msg_type, created_at = row
        if session_id not in sessions:
            sessions[session_id] = {
                "session_id": session_id,
                "created_at": created_at,
                "messages": []
            }
        sessions[session_id]["messages"].append({
            "message": message,
            "response": response,
            "type": msg_type,
            "created_at": created_at
        })

    return jsonify({
        "sessions": list(sessions.values())
    })

@app.route('/api/user/projects')
@login_required
def get_user_projects_api():
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    projects = get_user_projects(session['user_id'])

    projects_list = []
    for project in projects:
        projects_list.append({
            "project_id": project[0],
            "name": project[1],
            "type": project[2],
            "description": project[3],
            "created_at": project[4],
            "updated_at": project[5]
        })

    return jsonify({"projects": projects_list})

@app.route('/<path:filename>')
def serve_static_files(filename):
    """Serve static files (CSS, JS, images)"""
    try:
        return send_file(f'../{filename}')
    except FileNotFoundError:
        return jsonify({"error": "File not found"}), 404

@app.route('/api/health')
def health_check():
    """Health check endpoint"""
    return jsonify({"status": "ok", "message": "Backend is running"})

@app.route('/api/status')
def status_check():
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞"""
    return jsonify({
        "status": "ok",
        "version": "2.0",
        "cache_enabled": USE_REDIS or len(memory_cache) > 0,
        "active_threads": threading.active_count(),
        "memory_cache_size": len(memory_cache),
        "redis_connected": USE_REDIS,
        "performance": "optimized"
    })

@app.route('/api/cache/clear', methods=['POST'])
@login_required
def clear_cache():
    """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = session.get('user_id')
    if user_id:
        clear_user_cache(user_id)
        return jsonify({"success": True, "message": "–ö—ç—à –æ—á–∏—â–µ–Ω"})
    return jsonify({"success": False, "message": "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"}), 401

@app.route('/api/performance')
def get_performance():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    stats = performance_monitor.get_stats()
    return jsonify(stats)

@app.route('/api/optimize', methods=['POST'])
def optimize_performance():
    """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫—ç—à–∏
    global memory_cache, cache_ttl
    current_time = time.time()

    # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∫—ç—à–∞
    expired_keys = [k for k, v in cache_ttl.items() if current_time - v > 600]
    for key in expired_keys:
        memory_cache.pop(key, None)
        cache_ttl.pop(key, None)

    # –û—á–∏—â–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ AI
    if hasattr(super_ai, 'cleanup_inactive_sessions'):
        super_ai.cleanup_inactive_sessions()

    return jsonify({
        "success": True,
        "message": "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞",
        "cleared_cache_entries": len(expired_keys),
        "active_cache_size": len(memory_cache)
    })

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
PROJECTS_DIR = "projects"
TEMP_DIR = "temp"
LOGS_DIR = "logs"
USER_DATA_DIR = "user_data"
MAX_PROJECTS_PER_USER = 10

# –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
os.makedirs(PROJECTS_DIR, exist_ok=True)
os.makedirs(TEMP_DIR, exist_ok=True)
os.makedirs(LOGS_DIR, exist_ok=True)
os.makedirs(USER_DATA_DIR, exist_ok=True)

# === –°–ò–°–¢–ï–ú–ê –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø ===
def get_cache_key(prefix: str, *args) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á –¥–ª—è –∫—ç—à–∞"""
    return f"{prefix}:{'_'.join(str(arg) for arg in args)}"

def get_from_cache(key: str):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞"""
    if USE_REDIS and redis_client:
        try:
            data = redis_client.get(key)
            return pickle.loads(data) if data else None
        except:
            pass

    # Fallback –Ω–∞ –ø–∞–º—è—Ç—å
    if key in memory_cache:
        if time.time() - cache_ttl.get(key, 0) < 300:  # 5 –º–∏–Ω—É—Ç
            return memory_cache[key]
        else:
            memory_cache.pop(key, None)
            cache_ttl.pop(key, None)
    return None

def set_cache(key: str, data, ttl: int = 300):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à"""
    if USE_REDIS and redis_client:
        try:
            redis_client.setex(key, ttl, pickle.dumps(data))
            return
        except:
            pass

    # Fallback –Ω–∞ –ø–∞–º—è—Ç—å
    memory_cache[key] = data
    cache_ttl[key] = time.time()

def clear_user_cache(user_id: int):
    """–û—á–∏—â–∞–µ—Ç –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    pattern = f"user_{user_id}:*"
    if USE_REDIS and redis_client:
        try:
            keys = redis_client.keys(pattern)
            if keys:
                redis_client.delete(*keys)
        except:
            pass

    # –û—á–∏—â–∞–µ–º –∏–∑ –ø–∞–º—è—Ç–∏
    keys_to_remove = [k for k in memory_cache.keys() if k.startswith(f"user_{user_id}:")]
    for key in keys_to_remove:
        memory_cache.pop(key, None)
        cache_ttl.pop(key, None)

# === –ê–°–ò–ù–•–†–û–ù–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
def async_ai_response(message: str, session_id: str, user_id: int):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ AI –æ—Ç–≤–µ—Ç–æ–≤"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à —Å–Ω–∞—á–∞–ª–∞
        cache_key = get_cache_key("ai_response", user_id, hash(message))
        cached_response = get_from_cache(cache_key)

        if cached_response:
            logger.info(f"–í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è user {user_id}")
            return cached_response

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        start_time = time.time()
        ai_response = ai_agent.generate_personalized_response(message, session_id)
        processing_time = int((time.time() - start_time) * 1000)

        # –ö—ç—à–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        set_cache(cache_key, ai_response, ttl=600)  # 10 –º–∏–Ω—É—Ç

        logger.info(f"AI –æ—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∑–∞ {processing_time}ms –¥–ª—è user {user_id}")
        return ai_response

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ async_ai_response: {e}")
        return {
            "type": "error",
            "message": "–í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            "suggestions": ["–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å", "–°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "–ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å"]
        }

def async_project_generation(project_type: str, description: str, project_name: str, user_id: int):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cache_key = get_cache_key("project", project_type, hash(description))
        cached_project = get_from_cache(cache_key)

        if cached_project:
            logger.info(f"–í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è user {user_id}")
            return cached_project

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
        start_time = time.time()
        result = generator.generate_project(project_type, description, project_name)
        processing_time = int((time.time() - start_time) * 1000)

        if result['success']:
            # –ö—ç—à–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
            set_cache(cache_key, result, ttl=1800)  # 30 –º–∏–Ω—É—Ç
            logger.info(f"–ü—Ä–æ–µ–∫—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∑–∞ {processing_time}ms –¥–ª—è user {user_id}")

        return result

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ async_project_generation: {e}")
        return {
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}"
        }

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()

    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            email TEXT UNIQUE NOT NULL,
            name TEXT NOT NULL,
            password_hash TEXT NOT NULL,
            plan TEXT DEFAULT 'free',
            requests_used INTEGER DEFAULT 0,
            requests_limit INTEGER DEFAULT 15,
            subscription_expires DATETIME DEFAULT NULL,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            last_login DATETIME DEFAULT NULL
        )
    ''')

    # –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS chat_history (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            session_id TEXT NOT NULL,
            message TEXT NOT NULL,
            response TEXT NOT NULL,
            message_type TEXT DEFAULT 'chat',
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')

    # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_projects (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            project_id TEXT NOT NULL,
            project_name TEXT NOT NULL,
            project_type TEXT NOT NULL,
            project_description TEXT,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')

    # –¢–∞–±–ª–∏—Ü–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π (–¥–ª—è WebSocket)
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS active_sessions (
            session_id TEXT PRIMARY KEY,
            user_id INTEGER NOT NULL,
            last_activity DATETIME DEFAULT CURRENT_TIMESTAMP,
            ip_address TEXT,
            user_agent TEXT,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')

    # –¢–∞–±–ª–∏—Ü–∞ –≤–µ—Ä—Å–∏–π –ø—Ä–æ–µ–∫—Ç–æ–≤ (–¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –≤–µ—Ä—Å–∏–π)
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS project_versions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            project_id TEXT NOT NULL,
            version TEXT NOT NULL,
            description TEXT,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
            files TEXT, -- JSON string of files and their content
            FOREIGN KEY (project_id) REFERENCES user_projects (project_id)
        )
    ''')

    conn.commit()
    conn.close()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
init_database()

# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
def hash_password(password):
    """–•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å"""
    return hashlib.sha256(password.encode()).hexdigest()

def verify_password(password, password_hash):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å"""
    return hash_password(password) == password_hash

def get_user_by_email(email):
    """–ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email"""
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users WHERE email = ?', (email,))
    user = cursor.fetchone()
    conn.close()
    return user

def get_user_by_id(user_id):
    """–ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID"""
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users WHERE id = ?', (user_id,))
    user = cursor.fetchone()
    conn.close()
    return user

def create_user(email, name, password):
    """–°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()

    password_hash = hash_password(password)

    try:
        cursor.execute('''
            INSERT INTO users (email, name, password_hash) 
            VALUES (?, ?, ?)
        ''', (email, name, password_hash))
        user_id = cursor.lastrowid
        conn.commit()
        conn.close()
        return user_id
    except sqlite3.IntegrityError:
        conn.close()
        return None

def update_user_requests(user_id, increment=1):
    """–û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('''
        UPDATE users SET requests_used = requests_used + ? 
        WHERE id = ?
    ''', (increment, user_id))
    conn.commit()
    conn.close()

def save_chat_message(user_id, session_id, message, response, message_type='chat'):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞"""
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO chat_history (user_id, session_id, message, response, message_type)
        VALUES (?, ?, ?, ?, ?)
    ''', (user_id, session_id, message, response, message_type))
    conn.commit()
    conn.close()

def get_user_chat_history(user_id, limit=50):
    """–ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('''
        SELECT session_id, message, response, message_type, created_at
        FROM chat_history 
        WHERE user_id = ? 
        ORDER BY created_at DESC 
        LIMIT ?
    ''', (user_id, limit))
    history = cursor.fetchall()
    conn.close()
    return history

def save_user_project(user_id, project_id, project_name, project_type, description=""):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO user_projects (user_id, project_id, project_name, project_type, project_description)
        VALUES (?, ?, ?, ?, ?)
    ''', (user_id, project_id, project_name, project_type, description))
    conn.commit()
    conn.close()

def get_user_projects(user_id):
    """–ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('''
        SELECT project_id, project_name, project_type, project_description, created_at, updated_at
        FROM user_projects 
        WHERE user_id = ? 
        ORDER BY updated_at DESC
    ''', (user_id,))
    projects = cursor.fetchall()
    conn.close()
    return projects

# –û—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤
project_queue = queue.Queue()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–´–• AI-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
try:
    from ultra_smart_ai import UltraSmartAI
    from genius_conversation import GeniusConversationAI  
    from project_genius import ProjectGenius

    ultra_ai = UltraSmartAI()
    genius_conversation = GeniusConversationAI()
    project_genius = ProjectGenius()

    print("üöÄ ‚úÖ UltraSmartAI - –ó–ê–ì–†–£–ñ–ï–ù!")
    print("üß† ‚úÖ GeniusConversation - –ì–û–¢–û–í!")
    print("‚ö° ‚úÖ ProjectGenius - –ê–ö–¢–ò–í–ò–†–û–í–ê–ù!")
    print("üåü –°–ò–°–¢–ï–ú–ê –í 100 –†–ê–ó –ú–û–©–ù–ï–ï!")

    # –û—Å–Ω–æ–≤–Ω–æ–π AI-–∞–≥–µ–Ω—Ç —Å —Å—É–ø–µ—Ä-–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
    class SuperRevolutionaryAI:
        def __init__(self):
            self.ultra_ai = ultra_ai
            self.genius_conv = genius_conversation
            self.project_genius = project_genius

        def generate_personalized_response(self, message, session_id="default"):
            """–†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–´–ô –æ—Ç–≤–µ—Ç —Å –ø–æ–ª–Ω—ã–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

            # –ì–µ–Ω–∏–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            genius_response = self.genius_conv.generate_intelligent_response(message)

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            if genius_response.get("understanding", {}).get("intent") == "—Å–æ–∑–¥–∞—Ç—å_–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ":
                # –ü–æ–ª—É—á–∞–µ–º —É–ª—å—Ç—Ä–∞-—É–º–Ω—ã–π –æ—Ç–≤–µ—Ç
                ultra_response = self.ultra_ai.get_ultra_smart_response(message)

                # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –ª—É—á—à–µ–µ –∏–∑ –æ–±–æ–∏—Ö
                combined_message = f"""{genius_response['message']}

{ultra_response['message']}

üéØ **–ì–û–¢–û–í –°–û–ó–î–ê–¢–¨ –î–õ–Ø –í–ê–°:**
‚Ä¢ üì± –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—á–µ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞ 15 –º–∏–Ω—É—Ç
‚Ä¢ ü§ñ AI-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ –∫–∞–∂–¥—É—é —Ñ—É–Ω–∫—Ü–∏—é  
‚Ä¢ üé® –î–∏–∑–∞–π–Ω —É—Ä–æ–≤–Ω—è Apple/Google
‚Ä¢ üí∞ –ì–æ—Ç–æ–≤—ã–µ —Å—Ö–µ–º—ã –∑–∞—Ä–∞–±–æ—Ç–∫–∞ $5,000-50,000/–º–µ—Å—è—Ü
‚Ä¢ üöÄ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Å—Ç–æ—Ä–∞—Ö
‚Ä¢ üìä –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è —Ä–æ—Å—Ç–∞ –±–∏–∑–Ω–µ—Å–∞

‚ö° **–≠–¢–û –ë–£–î–ï–¢ –ù–ï–í–ï–†–û–Ø–¢–ù–û!** ‚ö°"""

                return {
                    "type": "revolutionary_response",
                    "message": combined_message,
                    "suggestions": [
                        "üöÄ –°–û–ó–î–ê–í–ê–¢–¨ –ù–ï–ú–ï–î–õ–ï–ù–ù–û!",
                        "üé® –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∑–∞–π–Ω-–≤–∞—Ä–∏–∞–Ω—Ç—ã", 
                        "üí∞ –ü–ª–∞–Ω –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏",
                        "‚ö° –í—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å—Ä–∞–∑—É!"
                    ],
                    "features": ultra_response.get("features", []),
                    "app_type": genius_response.get("app_type", "—É—Ç–∏–ª–∏—Ç—ã")
                }

            # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–µ–Ω–∏–∞–ª—å–Ω—ã–π –¥–∏–∞–ª–æ–≥
            return genius_response

    ai_agent = SuperRevolutionaryAI()
    print("üéâ –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–´–ô AI-–ê–ì–ï–ù–¢ –ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï!")

except Exception as e:
    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: {e}")
    # Fallback –Ω–∞ —É–ª—É—á—à–µ–Ω–Ω—ã–π –±–∞–∑–æ–≤—ã–π AI
    class EnhancedFallbackAI:
        def generate_personalized_response(self, message, session_id="default"):
            message_lower = message.lower()

            if any(word in message_lower for word in ["—Å–æ–∑–¥–∞–π", "—Å–¥–µ–ª–∞–π", "—Ö–æ—á—É", "–Ω—É–∂–Ω–æ"]):
                return {
                    "type": "enhanced_response", 
                    "message": f"""üöÄ **–ù–ï–í–ï–†–û–Ø–¢–ù–û! –°–æ–∑–¥–∞—é –¥–ª—è –≤–∞—Å —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!**

üí° –í–∞—à –∑–∞–ø—Ä–æ—Å: "{message}"

üî• **–ß—Ç–æ –ø–æ–ª—É—á–∏—Ç–µ:**
‚Ä¢ üì± –ü–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–æ–µ –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
‚Ä¢ üé® –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω —É—Ä–æ–≤–Ω—è –ø—Ä–µ–º–∏—É–º
‚Ä¢ ü§ñ AI-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ –ª—é–±–æ–π –ø—Ä–æ–µ–∫—Ç
‚Ä¢ üí∞ –°—Ö–µ–º—ã –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏ –¥–æ $50,000/–º–µ—Å—è—Ü
‚Ä¢ üöÄ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Å—Ç–æ—Ä–∞—Ö

‚è∞ **–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: 15 –º–∏–Ω—É—Ç!**

–ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —à–µ–¥–µ–≤—Ä–∞?""",
                    "suggestions": [
                        "üöÄ –î–ê! –°–æ–∑–¥–∞–≤–∞—Ç—å —Å–µ–π—á–∞—Å!",
                        "üé® –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–∏–∑–∞–π–Ω–∞",
                        "üí∞ –î–µ—Ç–∞–ª–∏ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏", 
                        "‚ö° –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
                    ]
                }
            elif "–ø—Ä–∏–≤–µ—Ç" in message_lower:
                return {
                    "type": "enhanced_response",
                    "message": """üåü **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±—É–¥—É—â–µ–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π!**

–Ø - —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π AI, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–µ—Ç –ª—é–±—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∑–∞ 15 –º–∏–Ω—É—Ç!

üöÄ **–ß—Ç–æ —É–º–µ—é:**
‚Ä¢ üì± –ú–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (iOS/Android)
‚Ä¢ üåê –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ PWA
‚Ä¢ üéÆ –ò–≥—Ä—ã –ª—é–±—ã—Ö –∂–∞–Ω—Ä–æ–≤
‚Ä¢ üíº –ë–∏–∑–Ω–µ—Å-—Å–∏—Å—Ç–µ–º—ã –∏ CRM
‚Ä¢ ü§ñ AI-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ –ª—é–±–æ–π –ø—Ä–æ–µ–∫—Ç

üí∞ **–î–æ—Ö–æ–¥:** –¥–æ $50,000/–º–µ—Å—è—Ü —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–µ–π!

–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–µ–º?""",
                    "suggestions": [
                        "–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É",
                        "–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", 
                        "–í–µ–±-—Å–∞–π—Ç",
                        "–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã"
                    ]
                }
            else:
                return {
                    "type": "enhanced_response",
                    "message": """ü§ñ **–ü–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å!** 

"{message}"

üí´ **–ì–æ—Ç–æ–≤ —Å–æ–∑–¥–∞—Ç—å –¥–ª—è –≤–∞—Å:**
‚Ä¢ –õ—é–±–æ–µ –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
‚Ä¢ –° —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
‚Ä¢ –° AI-—Ñ—É–Ω–∫—Ü–∏—è–º–∏
‚Ä¢ –ó–∞ 15 –º–∏–Ω—É—Ç!

–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ö–æ—Ç–∏—Ç–µ?""",
                    "suggestions": [
                        "–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É",
                        "–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", 
                        "–í–µ–±-—Å–∞–π—Ç",
                        "–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã"
                    ]
                }

    ai_agent = EnhancedFallbackAI()

nlp_processor = SmartNLP()
version_control = ProjectVersionControl()
interaction_logger = UserInteractionLogger()
advanced_generator = AdvancedProjectGenerator()

class ProjectGenerator:
    def __init__(self):
        self.templates = {
            "snake_game": {
                "files": {
                    "index.html": self.get_snake_html,
                    "styles.css": self.get_snake_css,
                    "script.js": self.get_snake_js,
                    "README.md": self.get_snake_readme
                }
            },
            "tetris_game": {
                "files": {
                    "index.html": self.get_tetris_html,
                    "styles.css": self.get_tetris_css,
                    "script.js": self.get_tetris_js,
                    "README.md": self.get_tetris_readme
                }
            },
            "todo_app": {
                "files": {
                    "index.html": self.get_todo_html,
                    "styles.css": self.get_todo_css,
                    "script.js": self.get_todo_js,
                    "README.md": self.get_todo_readme
                }
            },
            "weather_app": {
                "files": {
                    "index.html": self.get_weather_html,
                    "styles.css": self.get_weather_css,
                    "script.js": self.get_weather_js,
                    "README.md": self.get_weather_readme
                }
            }
        }

    def generate_project(self, project_type, description, project_name, style="modern"):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–µ–∫—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è"""
        try:
            project_id = str(uuid.uuid4())
            project_path = os.path.join(PROJECTS_DIR, project_id)
            os.makedirs(project_path, exist_ok=True)

            template = self.templates.get(project_type, self.templates["snake_game"])

            for file_path, generator_func in template["files"].items():
                full_path = os.path.join(project_path, file_path)
                os.makedirs(os.path.dirname(full_path), exist_ok=True)

                content = generator_func(project_name, description, style)
                with open(full_path, 'w', encoding='utf-8') as f:
                    f.write(content)

            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
            interaction_logger.log_event("project_creation", {
                "project_id": project_id,
                "project_type": project_type,
                "project_name": project_name,
                "description": description,
                "style": style
            })

            return {
                "success": True,
                "project_id": project_id,
                "project_name": project_name,
                "project_type": project_type,
                "files": list(template["files"].keys())
            }
        except Exception as e:
            interaction_logger.log_error("project_creation_failed", {"error": str(e)})
            return {
                "success": False,
                "error": str(e)
            }

    def get_snake_html(self, project_name, description, style):
        return f"""<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{project_name}</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body class="{style}-theme">
    <div class="game-container">
        <div class="game-header">
            <h1>{project_name}</h1>
            <div class="game-info">
                <div class="score">–°—á—ë—Ç: <span id="score">0</span></div>
                <div class="high-score">–†–µ–∫–æ—Ä–¥: <span id="highScore">0</span></div>
            </div>
        </div>

        <div class="game-area">
            <canvas id="gameCanvas" width="400" height="400"></canvas>
            <div class="game-overlay" id="gameOverlay">
                <div class="start-screen">
                    <h2>üêç –ó–º–µ–π–∫–∞</h2>
                    <p>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: —Å—Ç—Ä–µ–ª–∫–∏ –∏–ª–∏ WASD</p>
                    <button id="startBtn" class="game-btn">–ù–∞—á–∞—Ç—å –∏–≥—Ä—É</button>
                </div>
            </div>
        </div>

        <div class="game-controls">
            <div class="mobile-controls">
                <button class="control-btn" data-direction="up">‚Üë</button>
                <div class="control-row">
                    <button class="control-btn" data-direction="left">‚Üê</button>
                    <button class="control-btn" data-direction="down">‚Üì</button>
                    <button class="control-btn" data-direction="right">‚Üí</button>
                </div>
            </div>
        </div>

        <div class="game-footer">
            <p>{description}</p>
            <p>–°–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é Lovable AI</p>
        </div>
    </div>

    <script src="script.js"></script>
</body>
</html>"""

    def get_snake_css(self, project_name, description, style):
        return f"""* {{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}}

:root {{
    --primary-color: #667eea;
    --secondary-color: #764ba2;
    --accent-color: #f093fb;
    --bg-color: #0f0f23;
    --text-color: #ffffff;
    --snake-color: #00ff88;
    --food-color: #ff6b6b;
}}

body {{
    font-family: 'Arial', sans-serif;
    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--text-color);
}}

.game-container {{
    background: rgba(255, 255, 255, 0.1);
    border-radius: 20px;
    padding: 2rem;
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
    text-align: center;
    max-width: 500px;
    width: 100%;
}}

.game-header h1 {{
    font-size: 2.5rem;
    margin-bottom: 1rem;
    background: linear-gradient(45deg, var(--accent-color), var(--primary-color));
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
}}

.game-info {{
    display: flex;
    justify-content: space-between;
    margin-bottom: 2rem;
    font-size: 1.2rem;
    font-weight: 600;
}}

.game-area {{
    position: relative;
    margin: 2rem 0;
}}

#gameCanvas {{
    border: 3px solid var(--accent-color);
    border-radius: 15px;
    background: var(--bg-color);
    box-shadow: inset 0 0 20px rgba(0, 0, 0, 0.5);
}}

.game-overlay {{
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.8);
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 15px;
}}

.start-screen {{
    text-align: center;
    color: white;
}}

.start-screen h2 {{
    font-size: 2rem;
    margin-bottom: 1rem;
}}

.game-btn {{
    background: linear-gradient(45deg, var(--primary-color), var(--accent-color));
    border: none;
    color: white;
    padding: 1rem 2rem;
    border-radius: 25px;
    font-size: 1.1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
}}

.game-btn:hover {{
    transform: translateY(-2px);
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.4);
}}

.mobile-controls {{
    margin-top: 2rem;
}}

.control-btn {{
    background: rgba(255, 255, 255, 0.2);
    border: 1px solid rgba(255, 255, 255, 0.3);
    color: white;
    width: 50px;
    height: 50px;
    border-radius: 10px;
    font-size: 1.5rem;
    margin: 5px;
    cursor: pointer;
    transition: all 0.3s ease;
}}

.control-btn:hover {{
    background: rgba(255, 255, 255, 0.3);
    transform: scale(1.1);
}}

.control-row {{
    display: flex;
    justify-content: center;
    align-items: center;
}}

.game-footer {{
    margin-top: 2rem;
    font-size: 0.9rem;
    opacity: 0.8;
}}

.hidden {{
    display: none !important;
}}

@media (max-width: 600px) {{
    .game-container {{
        padding: 1rem;
        margin: 1rem;
    }}

    #gameCanvas {{
        width: 100%;
        height: auto;
        max-width: 350px;
    }}

    .game-header h1 {{
        font-size: 2rem;
    }}

    .game-info {{
        font-size: 1rem;
    }}
}}"""

    def get_snake_js(self, project_name, description, style):
        return """class SnakeGame {
    constructor() {
        this.canvas = document.getElementById('gameCanvas');
        this.ctx = this.canvas.getContext('2d');
        this.scoreElement = document.getElementById('score');
        this.highScoreElement = document.getElementById('highScore');
        this.overlay = document.getElementById('gameOverlay');
        this.startBtn = document.getElementById('startBtn');

        this.gridSize = 20;
        this.tileCount = this.canvas.width / this.gridSize;

        this.reset();
        this.setupControls();
        this.loadHighScore();
    }

    reset() {
        this.snake = [
            {x: 10, y: 10}
        ];
        this.food = this.generateFood();
        this.dx = 0;
        this.dy = 0;
        this.score = 0;
        this.gameRunning = false;
        this.updateScore();
    }

    generateFood() {
        return {
            x: Math.floor(Math.random() * this.tileCount),
            y: Math.floor(Math.random() * this.tileCount)
        };
    }

    setupControls() {
        this.startBtn.addEventListener('click', () => this.startGame());

        document.addEventListener('keydown', (e) => {
            if (!this.gameRunning) return;

            switch(e.key) {
                case 'ArrowUp':
                case 'w':
                case 'W':
                    if (this.dy !== 1) {
                        this.dx = 0;
                        this.dy = -1;
                    }
                    break;
                case 'ArrowDown':
                case 's':
                case 'S':
                    if (this.dy !== -1) {
                        this.dx = 0;
                        this.dy = 1;
                    }
                    break;
                case 'ArrowLeft':
                case 'a':
                case 'A':
                    if (this.dx !== 1) {
                        this.dx = -1;
                        this.dy = 0;
                    }
                    break;
                case 'ArrowRight':
                case 'd':
                case 'D':
                    if (this.dx !== -1) {
                        this.dx = 1;
                        this.dy = 0;
                    }
                    break;
            }
        });

        document.querySelectorAll('.control-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                if (!this.gameRunning) return;

                const direction = btn.dataset.direction;
                switch(direction) {
                    case 'up':
                        if (this.dy !== 1) {
                            this.dx = 0;
                            this.dy = -1;
                        }
                        break;
                    case 'down':
                        if (this.dy !== -1) {
                            this.dx = 0;
                            this.dy = 1;
                        }
                        break;
                    case 'left':
                        if (this.dx !== 1) {
                            this.dx = -1;
                            this.dy = 0;
                        }
                        break;
                    case 'right':
                        if (this.dx !== -1) {
                            this.dx = 1;
                            this.dy = 0;
                        }
                        break;
                }
            });
        });
    }

    startGame() {
        this.reset();
        this.gameRunning = true;
        this.overlay.classList.add('hidden');
        this.dx = 1;
        this.dy = 0;
        this.gameLoop();
    }

    gameLoop() {
        if (!this.gameRunning) return;

        setTimeout(() => {
            this.clearCanvas();
            this.moveSnake();
            this.drawFood();
            this.drawSnake();

            if (this.checkGameOver()) {
                this.endGame();
                return;
            }

            this.gameLoop();
        }, 150);
    }

    clearCanvas() {
        this.ctx.fillStyle = 'rgba(15, 15, 35, 0.9)';
        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
    }

    moveSnake() {
        const head = {x: this.snake[0].x + this.dx, y: this.snake[0].y + this.dy};

        if (head.x === this.food.x && head.y === this.food.y) {
            this.score += 10;
            this.updateScore();
            this.food = this.generateFood();
        } else {
            this.snake.pop();
        }

        this.snake.unshift(head);
    }

    drawSnake() {
        this.ctx.fillStyle = '#00ff88';
        this.ctx.shadowColor = '#00ff88';
        this.ctx.shadowBlur = 10;

        this.snake.forEach((segment, index) => {
            if (index === 0) {
                this.ctx.fillStyle = '#00ffaa';
            } else {
                this.ctx.fillStyle = '#00ff88';
            }

            this.ctx.fillRect(
                segment.x * this.gridSize + 2,
                segment.y * this.gridSize + 2,
                this.gridSize - 4,
                this.gridSize - 4
            );
        });

        this.ctx.shadowBlur = 0;
    }

    drawFood() {
        this.ctx.fillStyle = '#ff6b6b';
        this.ctx.shadowColor = '#ff6b6b';
        this.ctx.shadowBlur = 15;

        this.ctx.beginPath();
        this.ctx.arc(
            this.food.x * this.gridSize + this.gridSize / 2,
            this.food.y * this.gridSize + this.gridSize / 2,
            this.gridSize / 2 - 2,
            0,
            2 * Math.PI
        );
        this.ctx.fill();

        this.ctx.shadowBlur = 0;
    }

    checkGameOver() {
        const head = this.snake[0];

        if (head.x < 0 || head.x >= this.tileCount || head.y < 0 || head.y >= this.tileCount) {
            return true;
        }

        for (let i = 1; i < this.snake.length; i++) {
            if (head.x === this.snake[i].x && head.y === this.snake[i].y) {
                return true;
            }
        }

        return false;
    }

    endGame() {
        this.gameRunning = false;
        this.updateHighScore();

        this.overlay.innerHTML = `
            <div class="start-screen">
                <h2>üéÆ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!</h2>
                <p>–í–∞—à —Å—á—ë—Ç: ${this.score}</p>
                <p>–†–µ–∫–æ—Ä–¥: ${this.getHighScore()}</p>
                <button id="restartBtn" class="game-btn">–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞</button>
            </div>
        `;

        this.overlay.classList.remove('hidden');

        document.getElementById('restartBtn').addEventListener('click', () => {
            this.startGame();
        });
    }

    updateScore() {
        this.scoreElement.textContent = this.score;
    }

    loadHighScore() {
        const highScore = localStorage.getItem('snakeHighScore') || 0;
        this.highScoreElement.textContent = highScore;
    }

    getHighScore() {
        return localStorage.getItem('snakeHighScore') || 0;
    }

    updateHighScore() {
        const currentHigh = parseInt(this.getHighScore());
        if (this.score > currentHigh) {
            localStorage.setItem('snakeHighScore', this.score);
            this.highScoreElement.textContent = this.score;
        }
    }
}

document.addEventListener('DOMContentLoaded', () => {
    new SnakeGame();
});"""

    def get_snake_readme(self, project_name, description, style):
        return f"""# {project_name}

{description}

## üéÆ –ò–≥—Ä–∞ "–ó–º–µ–π–∫–∞"

–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∏–≥—Ä–∞ –∑–º–µ–π–∫–∞ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º.

### –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
- üé® –ö—Ä–∞—Å–∏–≤—ã–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω
- üì± –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
- üéØ –°–∏—Å—Ç–µ–º–∞ –æ—á–∫–æ–≤ –∏ —Ä–µ–∫–æ—Ä–¥–æ–≤
- ‚å®Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏—à–∞–º–∏ –∏ —Å–µ–Ω—Å–æ—Ä–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
- üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

### –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:
- **–ö–ª–∞–≤–∏—à–∏:** –°—Ç—Ä–µ–ª–∫–∏ –∏–ª–∏ WASD
- **–ú–æ–±–∏–ª—å–Ω—ã–µ:** –°–µ–Ω—Å–æ—Ä–Ω—ã–µ –∫–Ω–æ–ø–∫–∏

### –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:
- HTML5 Canvas
- CSS3 —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞–º–∏ –∏ –∞–Ω–∏–º–∞—Ü–∏—è–º–∏
- Vanilla JavaScript ES6+

–°–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é Lovable AI"""

    def get_tetris_html(self, project_name, description, style):
        return f"""<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{project_name}</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body class="{style}-theme">
    <div class="game-container">
        <div class="game-header">
            <h1>{project_name}</h1>
            <div class="game-info">
                <div class="score">–°—á—ë—Ç: <span id="score">0</span></div>
                <div class="level">–£—Ä–æ–≤–µ–Ω—å: <span id="level">1</span></div>
                <div class="lines">–õ–∏–Ω–∏–∏: <span id="lines">0</span></div>
            </div>
        </div>

        <div class="game-area">
            <div class="next-piece">
                <h3>–°–ª–µ–¥—É—é—â–∞—è —Ñ–∏–≥—É—Ä–∞</h3>
                <canvas id="nextCanvas" width="120" height="120"></canvas>
            </div>
            <canvas id="gameCanvas" width="300" height="600"></canvas>
            <div class="game-overlay" id="gameOverlay">
                <div class="start-screen">
                    <h2>üß© –¢–µ—Ç—Ä–∏—Å</h2>
                    <p>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: —Å—Ç—Ä–µ–ª–∫–∏, –ø—Ä–æ–±–µ–ª –¥–ª—è –ø–æ–≤–æ—Ä–æ—Ç–∞</p>
                    <button id="startBtn" class="game-btn">–ù–∞—á–∞—Ç—å –∏–≥—Ä—É</button>
                </div>
            </div>
        </div>

        <div class="game-controls">
            <div class="mobile-controls">
                <button class="control-btn" data-action="rotate">‚Üª</button>
                <div class="control-row">
                    <button class="control-btn" data-action="left">‚Üê</button>
                    <button class="control-btn" data-action="down">‚Üì</button>
                    <button class="control-btn" data-action="right">‚Üí</button>
                </div>
            </div>
        </div>

        <div class="game-footer">
            <p>{description}</p>
            <p>–°–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é Lovable AI</p>
        </div>
    </div>

    <script src="script.js"></script>
</body>
</html>"""

    def get_tetris_css(self, project_name, description, style):
        return f"""/* CSS –¥–ª—è –¢–µ—Ç—Ä–∏—Å–∞ */
* {{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}}

:root {{
    --primary-color: #4a148c; /* Purple */
    --secondary-color: #00bcd4; /* Cyan */
    --accent-color: #ffeb3b; /* Yellow */
    --bg-color: #121212; /* Dark background */
    --text-color: #ffffff;
    --block-colors: #FF0D72, #0DC2FF, #0DFF72, #F538FF, #FFFB0D, #FF8E0D, #AD1457; /* Random colors for blocks */
}}

body {{
    font-family: 'Arial', sans-serif;
    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--text-color);
}}

.game-container {{
    background: rgba(255, 255, 255, 0.1);
    border-radius: 20px;
    padding: 2rem;
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
    text-align: center;
    max-width: 600px;
    width: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
}}

.game-header h1 {{
    font-size: 2.5rem;
    margin-bottom: 1rem;
    background: linear-gradient(45deg, var(--accent-color), var(--primary-color));
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
}}

.game-info {{
    display: flex;
    justify-content: space-around;
    width: 100%;
    margin-bottom: 2rem;
    font-size: 1.1rem;
    font-weight: 600;
}}

.game-area {{
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 20px;
    margin-bottom: 2rem;
}}

#gameCanvas {{
    border: 3px solid var(--accent-color);
    border-radius: 15px;
    background: var(--bg-color);
    box-shadow: inset 0 0 20px rgba(0, 0, 0, 0.5);
}}

.next-piece {{
    text-align: center;
}}

#nextCanvas {{
    border: 2px solid var(--accent-color);
    background: var(--bg-color);
    border-radius: 10px;
    margin-top: 10px;
}}

.game-overlay {{
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.8);
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 15px;
}}

.start-screen {{
    text-align: center;
    color: white;
}}

.start-screen h2 {{
    font-size: 2rem;
    margin-bottom: 1rem;
}}

.game-btn {{
    background: linear-gradient(45deg, var(--primary-color), var(--accent-color));
    border: none;
    color: white;
    padding: 1rem 2rem;
    border-radius: 25px;
    font-size: 1.1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
}}

.game-btn:hover {{
    transform: translateY(-2px);
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.4);
}}

.mobile-controls {{
    margin-top: 2rem;
}}

.control-btn {{
    background: rgba(255, 255, 255, 0.2);
    border: 1px solid rgba(255, 255, 255, 0.3);
    color: white;
    width: 50px;
    height: 50px;
    border-radius: 10px;
    font-size: 1.5rem;
    margin: 5px;
    cursor: pointer;
    transition: all 0.3s ease;
}}

.control-btn:hover {{
    background: rgba(255, 255, 255, 0.3);
    transform: scale(1.1);
}}

.control-row {{
    display: flex;
    justify-content: center;
    align-items: center;
}}

.game-footer {{
    margin-top: 2rem;
    font-size: 0.9rem;
    opacity: 0.8;
}}

.hidden {{
    display: none !important;
}}

@media (max-width: 600px) {{
    .game-container {{
        padding: 1rem;
        margin: 1rem;
    }}

    .game-area {{
        flex-direction: column;
        gap: 10px;
    }}

    #gameCanvas {{
        width: 100%;
        max-width: 350px;
        height: auto;
    }}

    .game-header h1 {{
        font-size: 2rem;
    }}

    .game-info {{
        font-size: 1rem;
        flex-wrap: wrap;
        justify-content: center;
    }}
}}"""

    def get_tetris_js(self, project_name, description, style):
        return """
let board = [];
let score = 0;
let level = 1;
let lines = 0;
let currentPiece = null;
let nextPiece = null;
let animationId = null;
let isGameOver = false;
let gameInterval = 1000; // ms

const COLS = 10;
const ROWS = 20;
const BLOCK_SIZE = 30; // px

const canvas = document.getElementById('gameCanvas');
const context = canvas.getContext('2d');
const nextCanvas = document.getElementById('nextCanvas');
const nextContext = nextCanvas.getContext('2d');
const scoreElement = document.getElementById('score');
const levelElement = document.getElementById('level');
const linesElement = document.getElementById('lines');
const overlay = document.getElementById('gameOverlay');
const startBtn = document.getElementById('startBtn');

// –¢–µ–º–∞ –∏ —Ü–≤–µ—Ç–∞ –±–ª–æ–∫–æ–≤
const themes = {
    "modern": {
        "--primary-color": "#4a148c", "--secondary-color": "#00bcd4", "--accent-color": "#ffeb3b", "--bg-color": "#121212", "--text-color": "#ffffff",
        "--block-colors": ["#FF0D72", "#0DC2FF", "#0DFF72", "#F538FF", "#FFFB0D", "#FF8E0D", "#AD1457"]
    },
    "retro": {
        "--primary-color": "#ff6b35", "--secondary-color": "#f7931e", "--accent-color": "#ffd23f", "--bg-color": "#1a1a1a", "--text-color": "#00ff00",
        "--block-colors": ["#00FF00", "#FFFF00", "#FFA500", "#FF4500", "#8A2BE2", "#FF1493", "#00CED1"]
    },
    "neon": {
        "--primary-color": "#ff0080", "--secondary-color": "#8000ff", "--accent-color": "#00ff80", "--bg-color": "#000015", "--text-color": "#ffffff",
        "--block-colors": ["#00FFFF", "#FFFF00", "#FF00FF", "#00FF00", "#FFFFFF", "#FF0000", "#0000FF"]
    }
};

// –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞)
const themeName = document.body.className.replace('-theme', '') || 'modern';
const selectedTheme = themes[themeName] || themes['modern'];
Object.keys(selectedTheme).forEach(key => {
    document.documentElement.style.setProperty(key, selectedTheme[key]);
});
const BLOCK_COLORS = selectedTheme['--block-colors'];

// –§–æ—Ä–º—ã —Ñ–∏–≥—É—Ä (tetrominoes)
const TETROMINOES = [
    { shape: [[1, 1, 1, 1]], color: BLOCK_COLORS[0] }, // I
    { shape: [[1, 1], [1, 1]], color: BLOCK_COLORS[1] }, // O
    { shape: [[1, 1, 0], [0, 1, 1]], color: BLOCK_COLORS[2] }, // S
    { shape: [[0, 1, 1], [1, 1, 0]], color: BLOCK_COLORS[3] }, // Z
    { shape: [[1, 1, 1], [0, 1, 0]], color: BLOCK_COLORS[4] }, // T
    { shape: [[1, 1, 1], [1, 0, 0]], color: BLOCK_COLORS[5] }, // L
    { shape: [[1, 1, 1], [0, 0, 1]], color: BLOCK_COLORS[6] }  // J
];

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π
function createPiece() {
    const rand = Math.floor(Math.random() * TETROMINOES.length);
    const piece = TETROMINOES[rand];
    return {
        x: Math.floor(COLS / 2) - Math.floor(piece.shape[0].length / 2),
        y: 0,
        shape: piece.shape,
        color: piece.color
    };
}

function isValidMove(piece, board) {
    for (let y = 0; y < piece.shape.length; y++) {
        for (let x = 0; x < piece.shape[y].length; x++) {
            if (piece.shape[y][x]) {
                const boardX = piece.x + x;
                const boardY = piece.y + y;

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Ö–æ–¥–∞ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª—è
                if (boardY < 0 || boardY >= ROWS || boardX < 0 || boardX >= COLS) {
                    return false;
                }
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å —É–∂–µ –∑–∞–Ω—è—Ç—ã–º–∏ —è—á–µ–π–∫–∞–º–∏
                if (board[boardY] && board[boardY][boardX]) {
                    return false;
                }
            }
        }
    }
    return true;
}

function drawBlock(x, y, color, context) {
    context.fillStyle = color;
    context.fillRect(x * BLOCK_SIZE, y * BLOCK_SIZE, BLOCK_SIZE - 1, BLOCK_SIZE - 1);
    context.fillStyle = 'rgba(255, 255, 255, 0.3)';
    context.fillRect(x * BLOCK_SIZE + 2, y * BLOCK_SIZE + 2, BLOCK_SIZE - 4, BLOCK_SIZE - 4);
}

function drawPiece(piece, context) {
    context.fillStyle = piece.color;
    for (let y = 0; y < piece.shape.length; y++) {
        for (let x = 0; x < piece.shape[y].length; x++) {
            if (piece.shape[y][x]) {
                drawBlock(piece.x + x, piece.y + y, piece.color, context);
            }
        }
    }
}

function drawBoard() {
    context.clearRect(0, 0, canvas.width, canvas.height);
    for (let y = 0; y < ROWS; y++) {
        for (let x = 0; x < COLS; x++) {
            if (board[y] && board[y][x]) {
                drawBlock(x, y, board[y][x], context);
            }
        }
    }
}

function drawNextPiece() {
    nextContext.clearRect(0, 0, nextCanvas.width, nextCanvas.height);
    if (nextPiece) {
        drawPiece(nextPiece, nextContext);
    }
}

function clearLines() {
    let linesCleared = 0;
    for (let y = ROWS - 1; y >= 0; ) {
        if (board[y].every(cell => cell)) {
            for (let i = y; i > 0; i--) {
                board[i] = board[i - 1];
            }
            board[0] = Array(COLS).fill(null);
            linesCleared++;
        } else {
            y--;
        }
    }

    if (linesCleared > 0) {
        lines += linesCleared;
        score += calculateScore(linesCleared, level);
        updateScoreboard();
        updateLevelAndInterval();
    }
}

function calculateScore(linesCleared, level) {
    const points = [0, 40, 100, 300, 1200]; // –û—á–∫–∏ –∑–∞ 1, 2, 3, 4 –ª–∏–Ω–∏–∏
    return points[linesCleared] * level;
}

function updateLevelAndInterval() {
    const newLevel = Math.floor(lines / 10) + 1;
    if (newLevel > level) {
        level = newLevel;
        gameInterval = Math.max(100, 1000 - (level - 1) * 50); // –£–º–µ–Ω—å—à–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
    }
}

function updateScoreboard() {
    scoreElement.textContent = score;
    levelElement.textContent = level;
    linesElement.textContent = lines;
}

function freezePiece() {
    for (let y = 0; y < currentPiece.shape.length; y++) {
        for (let x = 0; x < currentPiece.shape[y].length; x++) {
            if (currentPiece.shape[y][x]) {
                const boardX = currentPiece.x + x;
                const boardY = currentPiece.y + y;
                if (boardY >= 0) { // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —á–∞—Å—Ç—å —Ñ–∏–≥—É—Ä—ã –Ω–∞ –ø–æ–ª–µ
                    if (!board[boardY]) board[boardY] = Array(COLS).fill(null);
                    board[boardY][boardX] = currentPiece.color;
                }
            }
        }
    }
    clearLines();
    currentPiece = nextPiece;
    nextPiece = createPiece();
    if (!isValidMove(currentPiece, board)) {
        gameOver();
        return;
    }
    drawNextPiece();
}

function move(deltaX) {
    currentPiece.x += deltaX;
    if (!isValidMove(currentPiece, board)) {
        currentPiece.x -= deltaX; // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ö–æ–¥
    }
}

function rotate() {
    const rotatedShape = currentPiece.shape[0].map((_, index) => currentPiece.shape.map(row => row[index])).reverse();
    const rotatedPiece = { ...currentPiece, shape: [rotatedShape] }; // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    if (isValidMove(rotatedPiece, board)) {
        currentPiece = rotatedPiece;
    } else {
        // –ü–æ–ø—ã—Ç–∫–∞ "–ø–æ–¥–ø—Ä—ã–≥–Ω—É—Ç—å" —Ñ–∏–≥—É—Ä—ã, –µ—Å–ª–∏ –æ–Ω–∞ —É–ø–∏—Ä–∞–µ—Ç—Å—è –≤ —Å—Ç–µ–Ω—É
        const wallkickOffset = currentPiece.x < COLS / 2 ? 1 : -1;
        const kickedPiece = { ...currentPiece, x: currentPiece.x + wallkickOffset };
        if (isValidMove(kickedPiece, board)) {
            currentPiece = kickedPiece;
        }
    }
}


function drop() {
    currentPiece.y++;
    if (!isValidMove(currentPiece, board)) {
        currentPiece.y--; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ –ø—Ä–µ–∂–Ω—é—é –ø–æ–∑–∏—Ü–∏—é
        freezePiece();
        return true; // –§–∏–≥—É—Ä–∞ —É–ø–∞–ª–∞
    }
    return false;
}

function gameLoop() {
    if (isGameOver) return;

    const didDrop = drop();
    if (!didDrop) {
        drawBoard();
        drawPiece(currentPiece, context);
    }
    animationId = setTimeout(gameLoop, gameInterval);
}

function gameOver() {
    isGameOver = true;
    cancelAnimationFrame(animationId);
    overlay.innerHTML = `
        <div class="start-screen">
            <h2>üéÆ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!</h2>
            <p>–í–∞—à —Å—á—ë—Ç: ${score}</p>
            <p>–†–µ–∫–æ—Ä–¥: ${localStorage.getItem('tetrisHighScore') || 0}</p>
            <button id="restartBtn" class="game-btn">–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞</button>
        </div>
    `;
    overlay.classList.remove('hidden');
    document.getElementById('restartBtn').addEventListener('click', startGame);
}

function startGame() {
    isGameOver = false;
    score = 0;
    level = 1;
    lines = 0;
    gameInterval = 1000;
    board = Array(ROWS).fill(null).map(() => Array(COLS).fill(null));
    currentPiece = createPiece();
    nextPiece = createPiece();
    updateScoreboard();
    drawBoard();
    drawNextPiece();
    if (animationId) clearTimeout(animationId);
    animationId = setTimeout(gameLoop, gameInterval);
    overlay.classList.add('hidden');

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∫–æ—Ä–¥–∞
    const highScore = localStorage.getItem('tetrisHighScore') || 0;
    if (score > highScore) {
        localStorage.setItem('tetrisHighScore', score);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞
document.addEventListener('keydown', (e) => {
    if (isGameOver || !currentPiece) return;

    switch (e.key) {
        case 'ArrowLeft':
        case 'a':
        case 'A':
            move(-1);
            break;
        case 'ArrowRight':
        case 'd':
        case 'D':
            move(1);
            break;
        case 'ArrowDown':
        case 's':
        case 'S':
            drop(); // –ë—ã—Å—Ç—Ä–æ–µ –ø–∞–¥–µ–Ω–∏–µ
            break;
        case ' ': // –ü—Ä–æ–±–µ–ª –¥–ª—è –ø–æ–≤–æ—Ä–æ—Ç–∞
            rotate();
            break;
    }
    drawBoard();
    drawPiece(currentPiece, context);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
document.querySelectorAll('.control-btn').forEach(btn => {
    btn.addEventListener('click', () => {
        if (isGameOver || !currentPiece) return;

        const action = btn.dataset.action;
        switch (action) {
            case 'left':
                move(-1);
                break;
            case 'right':
                move(1);
                break;
            case 'down':
                drop();
                break;
            case 'rotate':
                rotate();
                break;
        }
        drawBoard();
        drawPiece(currentPiece, context);
    });
});

startBtn.addEventListener('click', startGame);

// –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
document.addEventListener('DOMContentLoaded', () => {
    canvas.width = COLS * BLOCK_SIZE;
    canvas.height = ROWS * BLOCK_SIZE;
    nextCanvas.width = 4 * BLOCK_SIZE;
    nextCanvas.height = 4 * BLOCK_SIZE;
    context.scale(BLOCK_SIZE, BLOCK_SIZE);
    nextContext.scale(BLOCK_SIZE, BLOCK_SIZE);
});
"""

    def get_tetris_readme(self, project_name, description, style):
        return f"""# {project_name} - –¢–µ—Ç—Ä–∏—Å

{description}

–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∞ –¢–µ—Ç—Ä–∏—Å —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º."""

    def get_todo_html(self, project_name, description, style):
        return f"""<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{project_name}</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body class="{style}-theme">
    <div class="app-container">
        <div class="app-header">
            <h1>{project_name}</h1>
            <p class="app-description">{description}</p>
        </div>

        <div class="todo-input-section">
            <div class="input-group">
                <input type="text" id="todoInput" placeholder="–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É..." maxlength="100">
                <button id="addBtn" class="add-btn">+</button>
            </div>
        </div>

        <div class="todo-filters">
            <button class="filter-btn active" data-filter="all">–í—Å–µ</button>
            <button class="filter-btn" data-filter="active">–ê–∫—Ç–∏–≤–Ω—ã–µ</button>
            <button class="filter-btn" data-filter="completed">–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ</button>
        </div>

        <div class="todo-list" id="todoList">
            <!-- –ó–∞–¥–∞—á–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
        </div>

        <div class="todo-stats">
            <span id="totalTasks">0 –∑–∞–¥–∞—á</span>
            <button id="clearCompleted" class="clear-btn">–û—á–∏—Å—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ</button>
        </div>

        <div class="app-footer">
            <p>–°–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é Lovable AI</p>
        </div>
    </div>

    <script src="script.js"></script>
</body>
</html>"""

    def get_todo_css(self, project_name, description, style):
        return f"""/* CSS –¥–ª—è TODO –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è */
:root {{
    --primary-color: #3f51b5; /* Indigo */
    --secondary-color: #009688; /* Teal */
    --accent-color: #ff5722; /* Deep Orange */
    --bg-color: #f5f5f5; /* Light Gray */
    --text-color: #333333; /* Dark Gray */
    --input-bg: #ffffff;
    --border-color: #e0e0e0;
    --completed-color: #bdbdbd; /* Light Gray for completed */
}}

body {{
    font-family: 'Arial', sans-serif;
    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--text-color);
}}

.app-container {{
    background: rgba(255, 255, 255, 0.95);
    border-radius: 20px;
    padding: 2rem;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
    text-align: center;
    max-width: 500px;
    width: 100%;
    backdrop-filter: blur(5px);
}}

.app-header {{
    margin-bottom: 2rem;
}}

.app-header h1 {{
    font-size: 2.5rem;
    color: var(--primary-color);
    margin-bottom: 0.5rem;
}}

.app-description {{
    font-size: 1.1rem;
    color: #616161;
}}

.todo-input-section {{
    margin-bottom: 1.5rem;
}}

.input-group {{
    display: flex;
    gap: 10px;
}}

#todoInput {{
    flex-grow: 1;
    padding: 1rem;
    border: 1px solid var(--border-color);
    border-radius: 25px;
    font-size: 1rem;
    background-color: var(--input-bg);
    box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.05);
}}

#todoInput:focus {{
    outline: none;
    border-color: var(--accent-color);
    box-shadow: 0 0 0 3px rgba(255, 87, 34, 0.2);
}}

.add-btn {{
    background: var(--accent-color);
    border: none;
    color: white;
    width: 50px;
    height: 50px;
    border-radius: 25px;
    font-size: 1.8rem;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 4px 10px rgba(255, 87, 34, 0.3);
}}

.add-btn:hover {{
    transform: scale(1.1);
}}

.todo-filters {{
    margin-bottom: 1.5rem;
    display: flex;
    justify-content: center;
    gap: 15px;
}}

.filter-btn {{
    background: none;
    border: none;
    color: var(--primary-color);
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    padding: 0.5rem 1rem;
    border-radius: 20px;
    transition: all 0.3s ease;
}}

.filter-btn.active {{
    background: var(--primary-color);
    color: white;
    box-shadow: 0 4px 10px rgba(63, 81, 181, 0.3);
}}

.filter-btn:hover {{
    background: rgba(63, 81, 181, 0.1);
}}

.todo-list {{
    max-height: 300px;
    overflow-y: auto;
    text-align: left;
    margin-bottom: 1.5rem;
    padding-right: 10px; /* –î–ª—è —Å–∫—Ä–æ–ª–ª–±–∞—Ä–∞ */
}}

.todo-item {{
    background: var(--input-bg);
    padding: 1rem;
    margin-bottom: 10px;
    border-radius: 10px;
    display: flex;
    align-items: center;
    justify-content: space-between;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    transition: background 0.3s ease;
}}

.todo-item.completed {{
    background: var(--completed-color);
    opacity: 0.7;
}}

.todo-item.completed .todo-text {{
    text-decoration: line-through;
    color: #757575;
}}

.todo-content {{
    display: flex;
    align-items: center;
    gap: 15px;
    flex-grow: 1;
    overflow: hidden; /* –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –≤—ã–ª–µ–∑–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ */
}}

.checkbox {{
    width: 20px;
    height: 20px;
    border: 2px solid var(--primary-color);
    border-radius: 5px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background 0.3s ease;
}}

.checkbox.checked {{
    background: var(--primary-color);
    border-color: var(--primary-color);
}}

.checkbox.checked::after {{
    content: '‚úî';
    color: white;
    font-size: 14px;
}}

.todo-text {{
    font-size: 1rem;
    word-break: break-word; /* –ü–µ—Ä–µ–Ω–æ—Å –¥–ª–∏–Ω–Ω—ã—Ö —Å–ª–æ–≤ */
}}

.todo-actions {{
    display: flex;
    gap: 5px;
}}

.action-btn {{
    background: none;
    border: none;
    font-size: 1.2rem;
    cursor: pointer;
    color: #9e9e9e;
    transition: color 0.3s ease;
}}

.action-btn.edit:hover {{
    color: var(--accent-color);
}}

.action-btn.delete:hover {{
    color: #f44336;
}}

.todo-stats {{
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: 1rem;
    font-size: 0.9rem;
    color: #757575;
}}

.clear-btn {{
    background: none;
    border: 1px solid var(--border-color);
    color: var(--secondary-color);
    padding: 0.5rem 1rem;
    border-radius: 20px;
    cursor: pointer;
    transition: all 0.3s ease;
}}

.clear-btn:hover {{
    background: var(--secondary-color);
    color: white;
    border-color: var(--secondary-color);
}}

.app-footer {{
    margin-top: 2rem;
    font-size: 0.9rem;
    opacity: 0.7;
    color: #616161;
}}

/* –°—Ç–∏–ª–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ */
@media (max-width: 500px) {{
    .app-container {{
        padding: 1.5rem;
    }}
    .app-header h1 {{
        font-size: 2rem;
    }}
    .input-group {{
        flex-direction: column;
    }}
    #todoInput {{
        margin-bottom: 10px;
    }}
}}
"""

    def get_todo_js(self, project_name, description, style):
        return """
const todoInput = document.getElementById('todoInput');
const addBtn = document.getElementById('addBtn');
const todoList = document.getElementById('todoList');
const totalTasksElement = document.getElementById('totalTasks');
const clearCompletedBtn = document.getElementById('clearCompleted');
const filterButtons = document.querySelectorAll('.filter-btn');

let todos = []; // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
let currentFilter = 'all'; // –¢–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä

// --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏ ---

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
function addTodo() {
    const taskText = todoInput.value.trim();
    if (!taskText) return;

    const newTodo = {
        id: Date.now(), // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
        text: taskText,
        completed: false
    };

    todos.push(newTodo);
    todoInput.value = ''; // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
    renderTodos();
    updateStats();
    saveTodos(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
function deleteTodo(id) {
    todos = todos.filter(todo => todo.id !== id);
    renderTodos();
    updateStats();
    saveTodos();
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ (–≤—ã–ø–æ–ª–Ω–µ–Ω–∞/–∞–∫—Ç–∏–≤–Ω–∞)
function toggleTodoComplete(id) {
    todos = todos.map(todo =>
        todo.id === id ? { ...todo, completed: !todo.completed } : todo
    );
    renderTodos();
    updateStats();
    saveTodos();
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–ø—Ä–æ—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞)
function editTodo(id, newText) {
    todos = todos.map(todo =>
        todo.id === id ? { ...todo, text: newText } : todo
    );
    renderTodos();
    saveTodos();
}

// –û—á–∏—Å—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
function clearCompletedTodos() {
    todos = todos.filter(todo => !todo.completed);
    renderTodos();
    updateStats();
    saveTodos();
}

// --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ ---

// –°–æ–∑–¥–∞–Ω–∏–µ HTML —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–¥–∞—á–∏
function createTodoElement(todo) {
    const listItem = document.createElement('div');
    listItem.className = `todo-item ${todo.completed ? 'completed' : ''}`;
    listItem.dataset.id = todo.id;

    listItem.innerHTML = `
        <div class="todo-content">
            <div class="checkbox ${todo.completed ? 'checked' : ''}" data-action="complete"></div>
            <span class="todo-text">${todo.text}</span>
        </div>
        <div class="todo-actions">
            <button class="action-btn edit" data-action="edit">‚úèÔ∏è</button>
            <button class="action-btn delete" data-action="delete">üóëÔ∏è</button>
        </div>
    `;

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–∞–¥–∞—á–∏
    const checkbox = listItem.querySelector('.checkbox');
    const deleteBtn = listItem.querySelector('.delete');
    const editBtn = listItem.querySelector('.edit');
    const todoTextSpan = listItem.querySelector('.todo-text');

    checkbox.addEventListener('click', () => toggleTodoComplete(todo.id));
    deleteBtn.addEventListener('click', () => deleteTodo(todo.id));
    editBtn.addEventListener('click', () => {
        const newText = prompt('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É:', todo.text);
        if (newText !== null && newText.trim()) {
            editTodo(todo.id, newText.trim());
        }
    });

    return listItem;
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞—á –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∏–ª—å—Ç—Ä–∞
function renderTodos() {
    todoList.innerHTML = ''; // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–¥ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–æ–º

    const filteredTodos = todos.filter(todo => {
        switch (currentFilter) {
            case 'active':
                return !todo.completed;
            case 'completed':
                return todo.completed;
            default: // 'all'
                return true;
        }
    });

    if (filteredTodos.length === 0) {
        todoList.innerHTML = '<p style="text-align: center; margin-top: 20px; color: #9e9e9e;">–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç!</p>';
    } else {
        filteredTodos.forEach(todo => {
            todoList.appendChild(createTodoElement(todo));
        });
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á)
function updateStats() {
    const activeCount = todos.filter(todo => !todo.completed).length;
    totalTasksElement.textContent = `${activeCount} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á`; // –ò–∑–º–µ–Ω–∏–ª –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö
    clearCompletedBtn.disabled = todos.every(todo => !todo.completed); // –î–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π, –µ—Å–ª–∏ –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö
}

// --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∏ ---

function saveTodos() {
    localStorage.setItem('todos', JSON.stringify(todos));
}

function loadTodos() {
    const savedTodos = localStorage.getItem('todos');
    if (savedTodos) {
        todos = JSON.parse(savedTodos);
    }
    renderTodos();
    updateStats();
}

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π ---

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ –∫–ª–∏–∫—É –∏–ª–∏ Enter
addBtn.addEventListener('click', addTodo);
todoInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
        addTodo();
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
filterButtons.forEach(button => {
    button.addEventListener('click', () => {
        currentFilter = button.dataset.filter;
        filterButtons.forEach(btn => btn.classList.remove('active'));
        button.classList.add('active');
        renderTodos();
    });
});

// –û—á–∏—Å—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö
clearCompletedBtn.addEventListener('click', clearCompletedTodos);

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
document.addEventListener('DOMContentLoaded', loadTodos);
"""

    def get_todo_readme(self, project_name, description, style):
        return f"""# {project_name} - TODO –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

{description}

–ü—Ä–æ—Å—Ç–æ–µ –∏ —Å—Ç–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º –¥–µ–ª.

## –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á
- –û—Ç–º–µ—Ç–∫–∞ –∑–∞–¥–∞—á –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö
- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á (–≤—Å–µ, –∞–∫—Ç–∏–≤–Ω—ã–µ, –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ)
- –û—á–∏—Å—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤ localStorage
- –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω
"""

    def get_weather_html(self, project_name, description, style):
        return f"""<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{project_name}</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body class="{style}-theme">
    <div class="weather-app">
        <div class="app-header">
            <h1>{project_name}</h1>
            <p>{description}</p>
        </div>

        <div class="search-section">
            <div class="search-group">
                <input type="text" id="cityInput" placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞..." />
                <button id="searchBtn" class="search-btn">üîç</button>
            </div>
        </div>

        <div class="weather-display" id="weatherDisplay">
            <div class="weather-card">
                <div class="current-weather">
                    <div class="weather-icon">‚òÄÔ∏è</div>
                    <div class="temperature">--¬∞C</div>
                    <div class="city-name">--</div>
                    <div class="weather-description">--</div>
                </div>

                <div class="weather-details">
                    <div class="detail-item">
                        <span class="detail-label">–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫</span>
                        <span class="detail-value">--¬∞C</span>
                    </div>
                    <div class="detail-item">
                        <span class="detail-label">–í–ª–∞–∂–Ω–æ—Å—Ç—å</span>
                        <span class="detail-value">--%</span>
                    </div>
                    <div class="detail-item">
                        <span class="detail-label">–í–µ—Ç–µ—Ä</span>
                        <span class="detail-value">-- –∫–º/—á</span>
                    </div>
                    <div class="detail-item">
                        <span class="detail-label">–î–∞–≤–ª–µ–Ω–∏–µ</span>
                        <span class="detail-value">-- –≥–ü–∞</span>
                    </div>
                </div>

                <div class="forecast">
                    <h3>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π</h3>
                    <div class="forecast-list" id="forecastList">
                        <p>–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞...</p>
                    </div>
                </div>
            </div>
        </div>

        <div class="app-footer">
            <p>–°–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é Lovable AI</p>
        </div>
    </div>

    <script src="script.js"></script>
</body>
</html>"""

    def get_weather_css(self, project_name, description, style):
        return f"""/* CSS –¥–ª—è Weather –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è */
:root {{
    --primary-color: #0077b6; /* Blue */
    --secondary-color: #90e0ef; /* Light Blue */
    --accent-color: #ffb703; /* Orange */
    --bg-color: #e0f2f7; /* Very Light Blue */
    --text-color: #1a1a1a; /* Dark Gray */
    --card-bg: #ffffff;
    --detail-bg: #f8f9fa;
    --forecast-bg: #f1f3f4;
}}

body {{
    font-family: 'Arial', sans-serif;
    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--text-color);
}}

.weather-app {{
    background: rgba(255, 255, 255, 0.95);
    border-radius: 20px;
    padding: 2rem;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
    text-align: center;
    max-width: 550px;
    width: 100%;
    backdrop-filter: blur(5px);
}}

.app-header {{
    margin-bottom: 2rem;
}}

.app-header h1 {{
    font-size: 2.5rem;
    color: var(--primary-color);
    margin-bottom: 0.5rem;
}}

.app-description {{
    font-size: 1rem;
    color: #616161;
}}

.search-section {{
    margin-bottom: 2rem;
}}

.search-group {{
    display: flex;
    gap: 10px;
}}

#cityInput {{
    flex-grow: 1;
    padding: 1rem;
    border: 1px solid var(--primary-color);
    border-radius: 25px;
    font-size: 1rem;
    background-color: var(--card-bg);
    box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.05);
}}

#cityInput:focus {{
    outline: none;
    border-color: var(--accent-color);
    box-shadow: 0 0 0 3px rgba(255, 183, 3, 0.2);
}}

.search-btn {{
    background: var(--accent-color);
    border: none;
    color: var(--text-color);
    width: 50px;
    height: 50px;
    border-radius: 25px;
    font-size: 1.4rem;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 4px 10px rgba(255, 183, 3, 0.3);
}}

.search-btn:hover {{
    transform: scale(1.1);
}}

.weather-card {{
    background: var(--card-bg);
    border-radius: 15px;
    padding: 1.5rem;
    box-shadow: 0 5px 20px rgba(0, 0, 0, 0.1);
}}

.current-weather {{
    display: flex;
    flex-direction: column;
    align-items: center;
    margin-bottom: 1.5rem;
    border-bottom: 1px solid var(--forecast-bg);
    padding-bottom: 1.5rem;
}}

.weather-icon {{
    font-size: 4rem;
    margin-bottom: 0.5rem;
}}

.temperature {{
    font-size: 3rem;
    font-weight: 700;
    color: var(--primary-color);
}}

.city-name {{
    font-size: 1.5rem;
    font-weight: 500;
    margin-bottom: 0.5rem;
}}

.weather-description {{
    font-size: 1.2rem;
    color: #757575;
}}

.weather-details {{
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 1rem;
    margin-bottom: 1.5rem;
}}

.detail-item {{
    background: var(--detail-bg);
    padding: 0.8rem;
    border-radius: 10px;
    text-align: center;
}}

.detail-label {{
    display: block;
    font-size: 0.9rem;
    color: #757575;
    margin-bottom: 0.3rem;
}}

.detail-value {{
    font-size: 1.1rem;
    font-weight: 600;
}}

.forecast h3 {{
    margin-bottom: 1rem;
    color: var(--primary-color);
}}

.forecast-list {{
    display: flex;
    overflow-x: auto;
    gap: 10px;
    padding-bottom: 10px; /* –î–ª—è —Å–∫—Ä–æ–ª–ª–±–∞—Ä–∞ */
}}

.forecast-item {{
    background: var(--forecast-bg);
    padding: 1rem;
    border-radius: 10px;
    min-width: 100px;
    text-align: center;
    flex-shrink: 0;
}}

.forecast-item .date {{
    font-size: 0.9rem;
    color: #757575;
    margin-bottom: 0.5rem;
}}

.forecast-item .icon {{
    font-size: 2rem;
    margin-bottom: 0.5rem;
}}

.forecast-item .temp {{
    font-size: 1.1rem;
    font-weight: 600;
}}

.app-footer {{
    margin-top: 2rem;
    font-size: 0.9rem;
    opacity: 0.7;
    color: #616161;
}}

/* –°—Ç–∏–ª–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ */
@media (max-width: 550px) {{
    .weather-app {{
        padding: 1.5rem;
    }}
    .app-header h1 {{
        font-size: 2rem;
    }}
    .search-group {{
        flex-direction: column;
    }}
    #cityInput {{
        margin-bottom: 10px;
    }}
    .weather-details {{
        grid-template-columns: 1fr;
    }}
}}
"""

    def get_weather_js(self, project_name, description, style):
        return """
const cityInput = document.getElementById('cityInput');
const searchBtn = document.getElementById('searchBtn');
const weatherDisplay = document.getElementById('weatherDisplay');
const forecastList = document.getElementById('forecastList');

const API_KEY = 'YOUR_OPENWEATHERMAP_API_KEY'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API –∫–ª—é—á

// –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø–æ–∫–∞ –Ω–µ—Ç API)
let currentWeatherData = {
    icon: '‚òÄÔ∏è',
    temperature: '--',
    city: '--',
    description: '--',
    feels_like: '--',
    humidity: '--',
    wind_speed: '--',
    pressure: '--'
};

let forecastData = [];

const weatherIcons = {
    '01d': '‚òÄÔ∏è', '01n': 'üåô',
    '02d': '‚òÅÔ∏è', '02n': '‚òÅÔ∏è',
    '03d': '‚òÅÔ∏è', '03n': '‚òÅÔ∏è',
    '04d': '‚òÅÔ∏è', '04n': '‚òÅÔ∏è',
    '09d': 'üåßÔ∏è', '09n': 'üåßÔ∏è',
    '10d': 'üåßÔ∏è', '10n': 'üåßÔ∏è',
    '11d': '‚ö°', '11n': '‚ö°',
    '13d': '‚ùÑÔ∏è', '13n': '‚ùÑÔ∏è',
    '50d': 'üå´Ô∏è', '50n': 'üå´Ô∏è'
};

function getWeatherIcon(iconCode) {
    return weatherIcons[iconCode] || '‚ùì';
}

function formatPressure(hpa) {
    return Math.round(hpa); // –î–∞–≤–ª–µ–Ω–∏–µ –≤ –≥–ü–∞
}

function formatWindSpeed(mps) {
    return Math.round(mps * 3.6); // –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ –≤ –∫–º/—á
}

async function fetchWeather(city) {
    const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric&lang=ru`;
    try {
        const response = await fetch(url);
        if (!response.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${response.status}`);
        }
        const data = await response.json();
        return data;
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ:", error);
        displayError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–≥–æ–¥—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.");
        return null;
    }
}

async function fetchForecast(city) {
    const url = `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${API_KEY}&units=metric&lang=ru`;
    try {
        const response = await fetch(url);
        if (!response.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${response.status}`);
        }
        const data = await response.json();
        return data;
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–∞:", error);
        return null;
    }
}

function displayWeather(data) {
    if (!data) return;

    currentWeatherData = {
        icon: getWeatherIcon(data.weather[0].icon),
        temperature: Math.round(data.main.temp),
        city: data.name,
        description: data.weather[0].description,
        feels_like: Math.round(data.main.feels_like),
        humidity: data.main.humidity,
        wind_speed: formatWindSpeed(data.wind.speed),
        pressure: formatPressure(data.main.pressure)
    };

    renderCurrentWeather();
}

function renderCurrentWeather() {
    const html = `
        <div class="weather-card">
            <div class="current-weather">
                <div class="weather-icon">${currentWeatherData.icon}</div>
                <div class="temperature">${currentWeatherData.temperature}¬∞C</div>
                <div class="city-name">${currentWeatherData.city}</div>
                <div class="weather-description">${currentWeatherData.description}</div>
            </div>

            <div class="weather-details">
                <div class="detail-item">
                    <span class="detail-label">–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫</span>
                    <span class="detail-value">${currentWeatherData.feels_like}¬∞C</span>
                </div>
                <div class="detail-item">
                    <span class="detail-label">–í–ª–∞–∂–Ω–æ—Å—Ç—å</span>
                    <span class="detail-value">${currentWeatherData.humidity}%</span>
                </div>
                <div class="detail-item">
                    <span class="detail-label">–í–µ—Ç–µ—Ä</span>
                    <span class="detail-value">${currentWeatherData.wind_speed} –∫–º/—á</span>
                </div>
                <div class="detail-item">
                    <span class="detail-label">–î–∞–≤–ª–µ–Ω–∏–µ</span>
                    <span class="detail-value">${currentWeatherData.pressure} –≥–ü–∞</span>
                </div>
            </div>

            <div class="forecast">
                <h3>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π</h3>
                <div class="forecast-list" id="forecastList">
                    ${renderForecast(forecastData)}
                </div>
            </div>
        </div>
    `;
    weatherDisplay.innerHTML = html;
}

function renderForecast(forecastItems) {
    if (!forecastItems || forecastItems.length === 0) {
        return '<p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–∞.</p>';
    }

    let html = '';
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π, –±–µ—Ä—è –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–∑ –≤ 8 –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ (24 —á–∞—Å–∞)
    for (let i = 0; i < forecastItems.length; i += 8) {
        const day = forecastItems[i];
        const date = new Date(day.dt * 1000);
        const dayOfWeek = date.toLocaleDateString('ru-RU', { weekday: 'short' });
        const temp = Math.round(day.main.temp);
        const icon = getWeatherIcon(day.weather[0].icon);

        html += `
            <div class="forecast-item">
                <div class="date">${dayOfWeek}</div>
                <div class="icon">${icon}</div>
                <div class="temp">${temp}¬∞C</div>
            </div>
        `;
    }
    return html;
}

function displayError(message) {
    weatherDisplay.innerHTML = `<p class="error-message">${message}</p>`;
}

async function handleSearch() {
    const city = cityInput.value.trim();
    if (!city) {
        displayError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.");
        return;
    }

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    weatherDisplay.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>';

    const weatherData = await fetchWeather(city);
    if (weatherData) {
        const forecastWeatherData = await fetchForecast(city);
        forecastData = forecastWeatherData ? forecastWeatherData.list : [];
        displayWeather(weatherData);
    } else {
        displayError("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.");
    }
}

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π ---
searchBtn.addEventListener('click', handleSearch);
cityInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
        handleSearch();
    }
});

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
// –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –ø–æ–≥–æ–¥—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
// handleSearch(); // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –ø–æ–≥–æ–¥—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
"""

    def get_weather_readme(self, project_name, description, style):
        return f"""# {project_name} - –ü–æ–≥–æ–¥–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

{description}

–ü—Ä–æ—Å—Ç–æ–µ –ø–æ–≥–æ–¥–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–µ–µ —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –∏ –ø—Ä–æ–≥–Ω–æ–∑.
–¢—Ä–µ–±—É–µ—Ç—Å—è API –∫–ª—é—á OpenWeatherMap.
"""

# Create generator instance
generator = ProjectGenerator()

# --- API Routes ---

@app.route('/api/chat', methods=['POST'])
@login_required
@monitor_performance
def chat():
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ª–∏–º–∏—Ç–æ–≤"""
        data = request.json
        message = data.get('message', '')
        session_id = data.get('session_id', str(uuid.uuid4()))

        try:
            user_id = session['user_id']

            # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_cache_key = get_cache_key("user", user_id)
            user = get_from_cache(user_cache_key)

            if not user:
                user = get_user_by_id(user_id)
                if not user:
                    return jsonify({"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404
                # –ö—ç—à–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ 1 –º–∏–Ω—É—Ç—É
                set_cache(user_cache_key, user, ttl=60)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
            requests_used = user[5]
            requests_limit = user[6]

            if requests_used >= requests_limit and user[4] == 'free':
                return jsonify({
                    "type": "limit_exceeded",
                    "message": "‚ö° –õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω! –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã.",
                    "requests_used": requests_used,
                    "requests_limit": requests_limit,
                    "show_subscription": True
                }), 429

            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É AI
            future = executor.submit(async_ai_response, message, session_id, user_id)

            # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç –º–∞–∫—Å–∏–º—É–º 10 —Å–µ–∫—É–Ω–¥
            try:
                ai_response = future.result(timeout=10)
            except:
                return jsonify({
                    "type": "error",
                    "message": "‚è±Ô∏è –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–ø—Ä–æ—Å—Ç–∏—Ç—å –∑–∞–ø—Ä–æ—Å.",
                    "suggestions": ["–ü–æ–≤—Ç–æ—Ä–∏—Ç—å", "–£–ø—Ä–æ—Å—Ç–∏—Ç—å –∑–∞–ø—Ä–æ—Å", "–°–æ–∑–¥–∞—Ç—å –±–∞–∑–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"]
                })

            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∏ –ª–æ–≥–∏
            if user[4] == 'free':
                executor.submit(update_user_requests, user_id, 1)
                requests_used += 1

            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            response_text = ai_response.get('message', '')
            executor.submit(save_chat_message, user_id, session_id, message, response_text, ai_response.get('type', 'chat'))

            # –û—á–∏—â–∞–µ–º –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            clear_user_cache(user_id)

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö
            ai_response['requests_left'] = max(0, requests_limit - requests_used)
            ai_response['requests_used'] = requests_used
            ai_response['requests_limit'] = requests_limit
            ai_response['cache_hit'] = 'cached' in str(ai_response.get('processing_info', ''))

            return jsonify(ai_response)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ API /api/chat: {e}")
            return jsonify({
                "type": "error",
                "message": "ü§ñ –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                "suggestions": ["–°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "–ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç", "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å"]
            })

@app.route('/api/generate-project', methods=['POST'])
@monitor_performance
def generate_project():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ (–∏–∑ UI) —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    data = request.json
    description = data.get('description', '')
    project_name = data.get('project_name', '–ú–æ–π –ø—Ä–æ–µ–∫—Ç')
    project_type = data.get('project_type', 'snake_game')
    style = data.get('style', 'modern')
    user_preferences = data.get('preferences', {})
    user_id = session.get('user_id', 'anonymous')

    try:
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç
        future = executor.submit(async_project_generation, project_type, description, project_name, user_id)

        # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞–∫—Å–∏–º—É–º 15 —Å–µ–∫—É–Ω–¥
        try:
            result = future.result(timeout=15)
        except:
            return jsonify({
                "success": False,
                "error": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –∑–∞–π–º–µ—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–ø—Ä–æ—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ.",
                "message": "‚è±Ô∏è –¢–∞–π–º-–∞—É—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–µ–∫—Ç."
            })

        if result['success']:
            project_id = result['project_id']

            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Ä—Å–∏–∏
            executor.submit(log_project_creation, project_id, project_name, user_id)

            archive_url = f"/api/download/{project_id}"
            result['download_url'] = archive_url
            result['project_id'] = project_id
            result['message'] = f"–ü—Ä–æ–µ–∫—Ç '{project_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!"
            result['generation_time'] = result.get('generation_time', '–±—ã—Å—Ç—Ä–æ')

        return jsonify(result)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ generate_project: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}",
            "message": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞."
        })

    def log_project_creation(project_id: str, project_name: str, user_id: str):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""
    try:
        interaction_logger.log_event("project_creation_success", {
            "project_id": project_id,
            "project_name": project_name,
            "user_id": user_id,
            "timestamp": datetime.now().isoformat()
        })
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

@app.route('/api/download/<project_id>')
def download_project(project_id):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"""
    project_path = os.path.join(PROJECTS_DIR, project_id)
    archive_path = os.path.join(TEMP_DIR, f"{project_id}.zip")

        if not os.path.exists(project_path):
            interaction_logger.log_error("download_project_not_found", {"project_id": project_id})
            return jsonify({"error": "–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404

        # –°–æ–∑–¥–∞—ë–º –∞—Ä—Ö–∏–≤ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if not os.path.exists(archive_path):
            try:
                create_project_archive(project_id)
                interaction_logger.log_event("archive_created_on_demand", {"project_id": project_id})
            except Exception as e:
                interaction_logger.log_error("archive_creation_failed_on_demand", {"project_id": project_id, "error": str(e)})
                return jsonify({"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞—Ä—Ö–∏–≤"}), 500

        interaction_logger.log_event("project_downloaded", {"project_id": project_id})
        return send_file(archive_path, as_attachment=True, download_name=f"project_{project_id}.zip")

    @app.route('/api/projects')
    def list_projects():
        """–°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = request.args.get('user_id', 'anonymous')
        projects = []

        user_projects_dir = os.path.join(USER_DATA_DIR, user_id, PROJECTS_DIR)
        os.makedirs(user_projects_dir, exist_ok=True)

        for project_id in os.listdir(user_projects_dir):
            project_path = os.path.join(user_projects_dir, project_id)
            if os.path.isdir(project_path):
                try:
                    project_info_path = os.path.join(project_path, "project_info.json")
                    if os.path.exists(project_info_path):
                        with open(project_info_path, 'r') as f:
                            info = json.load(f)
                            projects.append({
                                "id": project_id,
                                "name": info.get("name", f"–ü—Ä–æ–µ–∫—Ç {project_id[:8]}"),
                                "type": info.get("type", "unknown"),
                                "created_at": info.get("created_at", datetime.fromtimestamp(os.path.getctime(project_path)).isoformat())
                            })
                    else: # Fallback, –µ—Å–ª–∏ info –Ω–µ—Ç
                        projects.append({
                            "id": project_id,
                            "name": f"–ü—Ä–æ–µ–∫—Ç {project_id[:8]}",
                            "type": "unknown",
                            "created_at": datetime.fromtimestamp(os.path.getctime(project_path)).isoformat()
                        })
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ {project_id}: {e}")
                    interaction_logger.log_error("api_list_projects_read_error", {"project_id": project_id, "error": str(e)})

        interaction_logger.log_event("api_projects_list_requested", {"user_id": user_id, "count": len(projects)})
        return jsonify({"projects": projects})

    @app.route('/api/project/versions/<project_id>')
    def get_project_versions(project_id):
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤–µ—Ä—Å–∏–π –ø—Ä–æ–µ–∫—Ç–∞"""
        versions = version_control.get_project_versions(project_id)
        if versions is None:
            interaction_logger.log_error("api_get_versions_not_found", {"project_id": project_id})
            return jsonify({"error": "–ü—Ä–æ–µ–∫—Ç –∏–ª–∏ –µ–≥–æ –≤–µ—Ä—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"}), 404

        interaction_logger.log_event("api_get_project_versions", {"project_id": project_id, "count": len(versions)})
        return jsonify({"versions": versions})

    @app.route('/api/project/revert/<project_id>', methods=['POST'])
    def revert_project_version(project_id):
        """–û—Ç–∫–∞—Ç–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏"""
        data = request.json
        target_version = data.get('version') # –ù–æ–º–µ—Ä –≤–µ—Ä—Å–∏–∏ –¥–ª—è –æ—Ç–∫–∞—Ç–∞

        if not target_version:
            return jsonify({"error": "–ù–µ —É–∫–∞–∑–∞–Ω–∞ –≤–µ—Ä—Å–∏—è –¥–ª—è –æ—Ç–∫–∞—Ç–∞"}), 400

        # –õ–æ–≥–∏–∫–∞ –æ—Ç–∫–∞—Ç–∞ —á–µ—Ä–µ–∑ version_control
        success = version_control.revert_project(project_id, target_version)

        if success:
            interaction_logger.log_event("project_reverted", {"project_id": project_id, "version": target_version})
            return jsonify({"success": True, "message": f"–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–∞—á–µ–Ω –¥–æ –≤–µ—Ä—Å–∏–∏ {target_version}"})
        else:
            interaction_logger.log_error("api_revert_project_failed", {"project_id": project_id, "version": target_version})
            return jsonify({"success": False, "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–∞—Ç–∏—Ç—å –ø—Ä–æ–µ–∫—Ç"}), 500

    @app.route('/api/ai/status')
    def get_ai_status():
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å AI —Å–µ—Ä–≤–∏—Å–æ–≤"""
        return jsonify({
            "available_services": [
                {
                    "name": "SuperSmartAI",
                    "enabled": True,
                    "configured": True
                },
                {
                    "name": "SmartNLP",
                    "enabled": True,
                    "configured": True
                },
                {
                    "name": "ProjectVersionControl",
                    "enabled": True,
                    "configured": True
                },
                {
                    "name": "UserInteractionLogger",
                    "enabled": True,
                    "configured": True
                },
                {
                    "name": "AdvancedProjectGenerator",
                    "enabled": True,
                    "configured": True
                }
            ],
            "current_ai": "SuperSmartAI",
            "configured": True
        })

    @app.route('/api/logs/interaction', methods=['POST'])
    def log_interaction_api():
        """API –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π"""
        data = request.json
        session_id = data.get('session_id')
        event_type = data.get('event_type')
        payload = data.get('payload')

        if not session_id or not event_type:
            return jsonify({"error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: session_id, event_type"}), 400

        interaction_logger.log_event(event_type, payload, session_id)
        return jsonify({"success": True, "message": "–°–æ–±—ã—Ç–∏–µ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–æ"})

    # --- WebSocket ---
    # === WebSocket –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
    @socketio.on('connect')
    def handle_connect():
        user_id = session.get('user_id')
        if user_id:
            join_room(f'user_{user_id}')
            print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è')

            # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
            session_id = request.sid
            update_active_session(user_id, session_id)
        else:
            print('–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è')

    @socketio.on('disconnect')
    def handle_disconnect():
        user_id = session.get('user_id')
        if user_id:
            leave_room(f'user_{user_id}')
            print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫–ª—é—á–∏–ª—Å—è')

            # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
            cleanup_user_session(user_id, request.sid)

    @socketio.on('join_project')
    def handle_join_project(data):
        """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –∫ –ø—Ä–æ–µ–∫—Ç—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã"""
        user_id = session.get('user_id')
        project_id = data.get('project_id')

        if user_id and project_id and is_user_project_owner(user_id, project_id):
            join_room(f'project_{project_id}')
            emit('project_joined', {'project_id': project_id}, room=request.sid)

    @socketio.on('leave_project')
    def handle_leave_project(data):
        """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–¥–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç"""
        project_id = data.get('project_id')
        if project_id:
            leave_room(f'project_{project_id}')

    @socketio.on('file_changed')
    def handle_file_change(data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        user_id = session.get('user_id')
        project_id = data.get('project_id')
        file_path = data.get('file_path')
        content = data.get('content')

        if user_id and project_id and is_user_project_owner(user_id, project_id):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            save_project_file(project_id, file_path, content)

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø—Ä–æ–µ–∫—Ç–µ (–µ—Å–ª–∏ –±—É–¥–µ—Ç —Å–æ–≤–º–µ—Å—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞)
            emit('file_updated', {
                'project_id': project_id,
                'file_path': file_path,
                'updated_by': user_id
            }, room=f'project_{project_id}', include_self=False)

    def update_active_session(user_id, session_id):
        """–û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect('users.db', check_same_thread=False)
        cursor = conn.cursor()

        try:
            cursor.execute('''
                INSERT OR REPLACE INTO active_sessions 
                (user_id, session_id, last_activity, ip_address, user_agent)
                VALUES (?, ?, CURRENT_TIMESTAMP, ?, ?)
            ''', (user_id, session_id, request.environ.get('REMOTE_ADDR'), 
                  request.environ.get('HTTP_USER_AGENT')))
            conn.commit()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
        finally:
            conn.close()

    def cleanup_user_session(user_id, session_id):
        """–û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect('users.db', check_same_thread=False)
        cursor = conn.cursor()

        try:
            cursor.execute('''
                DELETE FROM active_sessions 
                WHERE user_id = ? AND session_id = ?
            ''', (user_id, session_id))
            conn.commit()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–∏: {e}")
        finally:
            conn.close()

    def is_user_project_owner(user_id, project_id):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –ø—Ä–æ–µ–∫—Ç–∞ (–¥–ª—è WebSocket)"""
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        cursor.execute('SELECT user_id FROM user_projects WHERE project_id = ?', (project_id,))
        owner_id = cursor.fetchone()
        conn.close()
        return owner_id is not None and owner_id[0] == user_id

    def save_project_file(project_id, file_path, content):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –ø—Ä–æ–µ–∫—Ç–∞ (–∏–º–∏—Ç–∞—Ü–∏—è)"""
        print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {file_path} –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {project_id}")
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ –ø—Ä–æ–µ–∫—Ç–∞
        pass

    # --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
    def create_project_archive(project_id):
        """–°–æ–∑–¥–∞—ë—Ç zip-–∞—Ä—Ö–∏–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
        project_path = os.path.join(PROJECTS_DIR, project_id)
        archive_path = os.path.join(TEMP_DIR, f"{project_id}.zip")

        if not os.path.exists(project_path):
            raise FileNotFoundError(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {project_path}")

        try:
            with zipfile.ZipFile(archive_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
                for root, dirs, files in os.walk(project_path):
                    for file in files:
                        file_path = os.path.join(root, file)
                        arcname = os.path.relpath(file_path, project_path)
                        zipf.write(file_path, arcname)
            return archive_path
        except Exception as e:
            interaction_logger.log_error("create_project_archive_failed", {"project_id": project_id, "error": str(e)})
            raise

    if __name__ == '__main__':
        print("üöÄ –ó–∞–ø—É—Å–∫–∞—é Vibecode AI Platform...")
        print("üìç Backend: http://0.0.0.0:5000")
        print("üîå WebSocket: ws://0.0.0.0:5000") 
        print("üåê –í–Ω–µ—à–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ URL —Ä–µ–ø–ª–∞")
        print("üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        print("=" * 50)

        socketio.run(app, host='0.0.0.0', port=5000, debug=False, allow_unsafe_werkzeug=True)