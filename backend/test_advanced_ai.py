#!/usr/bin/env python3
"""
–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç AdvancedAIProcessor –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
–¢–µ—Å—Ç –æ–±—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ –Ω–∞–ø—Ä—è–º—É—é —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Ä–æ–≤–µ–Ω—å 1000/100
"""
import os
import sys
import json
import time
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ò–º–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º—ã
from advanced_ai_processor import AdvancedAIProcessor

def test_3d_calculator_generation():
    """üî• –¢–ï–°–¢: –°–æ–∑–¥–∞–Ω–∏–µ 3D –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ —Å —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏"""
    print("\nüöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ê: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 3D –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ —É—Ä–æ–≤–Ω—è 1000/100")
    print("="*70)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
    processor = AdvancedAIProcessor()
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å 3D —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏
    test_request = {
        "message": "—Å–æ–∑–¥–∞–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å 3D —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏, –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏, –≤–∏–¥–µ–æ –∫–∞—á–µ—Å—Ç–≤–æ, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω —É—Ä–æ–≤–Ω—è Pixar",
        "user_id": "test_user_direct",
        "features": ["3D —ç–ª–µ–º–µ–Ω—Ç—ã", "–≥–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã", "–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ", "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω"]
    }
    
    print(f"üìù –ó–∞–ø—Ä–æ—Å: {test_request['message']}")
    print(f"üéØ –§—É–Ω–∫—Ü–∏–∏: {', '.join(test_request['features'])}")
    print("-"*70)
    
    start_time = time.time()
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        from advanced_ai_processor import AnalyzedRequest, ProjectType, RequestType
        
        analyzed_request = AnalyzedRequest(
            request_type=RequestType.CREATE_NEW_PROJECT,
            project_type=ProjectType.CALCULATOR,
            features=test_request.get("features", []),
            tech_stack=["HTML5", "CSS3", "JavaScript", "Three.js", "WebGL", "Web Audio API"],
            design_requirements=["3D", "professional", "interactive", "modern"],
            complexity="complex",
            confidence=0.95,
            extracted_data={
                "name": "3D Calculator Pro",
                "description": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π 3D –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –∏ –≤–∏–¥–µ–æ –∫–∞—á–µ—Å—Ç–≤–æ–º —É—Ä–æ–≤–Ω—è Pixar"
            }
        )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞–ø—Ä—è–º—É—é —Å callback —Ñ—É–Ω–∫—Ü–∏–µ–π
        def progress_callback(msg, progress):
            print(f"üîÑ {progress}%: {msg}")
            
        result = processor.generate_project(analyzed_request, progress_callback=progress_callback)
        
        processing_time = time.time() - start_time
        
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f} —Å–µ–∫—É–Ω–¥")
        print("-"*70)
        
        if result and result.files:
            print("‚úÖ –£–°–ü–ï–•! –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            print(f"üÜî ID –ø—Ä–æ–µ–∫—Ç–∞: {result.project_id}")
            print(f"üìÅ –§–∞–π–ª–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {len(result.files)}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            files = result.files
            
            print("\nüìã –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê:")
            print("="*50)
            
            # HTML –∞–Ω–∞–ª–∏–∑
            if 'index.html' in files:
                html_content = files['index.html']
                html_score = analyze_html_quality(html_content)
                print(f"üåê HTML –∫–∞—á–µ—Å—Ç–≤–æ: {html_score}/100")
            
            # CSS –∞–Ω–∞–ª–∏–∑  
            if 'styles.css' in files:
                css_content = files['styles.css']
                css_score = analyze_css_quality(css_content)
                print(f"üé® CSS –∫–∞—á–µ—Å—Ç–≤–æ: {css_score}/100")
            
            # JavaScript –∞–Ω–∞–ª–∏–∑
            if 'script.js' in files:
                js_content = files['script.js']
                js_score = analyze_js_quality(js_content)
                print(f"‚ö° JavaScript –∫–∞—á–µ—Å—Ç–≤–æ: {js_score}/100")
            
            # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
            total_score = (html_score + css_score + js_score) / 3
            print(f"\nüèÜ –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê: {total_score:.1f}/100")
            
            if total_score >= 85:
                print("üéâ –û–¢–õ–ò–ß–ù–û–ï –ö–ê–ß–ï–°–¢–í–û! –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!")
            elif total_score >= 70:
                print("‚úÖ –•–û–†–û–®–ï–ï –ö–ê–ß–ï–°–¢–í–û!")
            else:
                print("‚ö†Ô∏è  –ö–∞—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è")
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞
            save_test_results(result, total_score, processing_time)
            
        else:
            print("‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
            print(f"üîç –ü—Ä–∏—á–∏–Ω–∞: {result.error if hasattr(result, 'error') else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}")
            
    except Exception as e:
        print(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}")
        import traceback
        traceback.print_exc()

def analyze_html_quality(html_content):
    """–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ HTML –∫–æ–¥–∞"""
    score = 0
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    quality_checks = [
        ("DOCTYPE", "<!DOCTYPE html>" in html_content, 10),
        ("–ú–µ—Ç–∞ —Ç–µ–≥–∏", '<meta name="viewport"' in html_content, 10),
        ("–°–µ–º–∞–Ω—Ç–∏–∫–∞", any(tag in html_content for tag in ['<header>', '<main>', '<section>']), 15),
        ("3D –ø–æ–¥–¥–µ—Ä–∂–∫–∞", "three.js" in html_content or "WebGL" in html_content, 20),
        ("PWA –º–∞–Ω–∏—Ñ–µ—Å—Ç", 'manifest' in html_content, 10),
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞", len(html_content.split('\n')) > 50, 10),
        ("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", "<!--" in html_content, 5),
        ("–ê–∫—Å–µ—Å—Å–∏–±–∏–ª–∏—Ç–∏", 'aria-' in html_content or 'role=' in html_content, 10),
        ("–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", 'loading="lazy"' in html_content, 5),
        ("–ú–∏–∫—Ä–æ–¥–∞–Ω–Ω—ã–µ", 'itemscope' in html_content or 'schema.org' in html_content, 5)
    ]
    
    for check_name, condition, points in quality_checks:
        if condition:
            score += points
        print(f"    {'‚úì' if condition else '‚úó'} {check_name}: {points if condition else 0} –±–∞–ª–ª–æ–≤")
    
    return min(score, 100)

def analyze_css_quality(css_content):
    """–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ CSS –∫–æ–¥–∞"""
    score = 0
    
    quality_checks = [
        ("CSS Grid/Flexbox", "display: grid" in css_content or "display: flex" in css_content, 15),
        ("–ê–Ω–∏–º–∞—Ü–∏–∏", "@keyframes" in css_content or "animation:" in css_content, 15),
        ("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ", "--" in css_content and "var(" in css_content, 10),
        ("–ú–µ–¥–∏–∞ –∑–∞–ø—Ä–æ—Å—ã", "@media" in css_content, 10),
        ("3D —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º—ã", "transform3d" in css_content or "perspective" in css_content, 20),
        ("–ì—Ä–∞–¥–∏–µ–Ω—Ç—ã", "gradient" in css_content, 10),
        ("–¢–µ–Ω–∏", "box-shadow" in css_content or "text-shadow" in css_content, 5),
        ("–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω", "backdrop-filter" in css_content or "clip-path" in css_content, 10),
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞", len(css_content.split('\n')) > 100, 5)
    ]
    
    for check_name, condition, points in quality_checks:
        if condition:
            score += points
        print(f"    {'‚úì' if condition else '‚úó'} {check_name}: {points if condition else 0} –±–∞–ª–ª–æ–≤")
    
    return min(score, 100)

def analyze_js_quality(js_content):
    """–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ JavaScript –∫–æ–¥–∞"""
    score = 0
    
    quality_checks = [
        ("ES6+ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å", "const " in js_content and "=>" in js_content, 15),
        ("–ú–æ–¥—É–ª—å–Ω–æ—Å—Ç—å", "class " in js_content or "function " in js_content, 10),
        ("3D –±–∏–±–ª–∏–æ—Ç–µ–∫–∏", "THREE." in js_content or "WebGL" in js_content, 25),
        ("–ê—É–¥–∏–æ/–í–∏–¥–µ–æ", "Audio" in js_content or "speechSynthesis" in js_content, 15),
        ("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π", "addEventListener" in js_content, 10),
        ("–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å", "async " in js_content or "Promise" in js_content, 10),
        ("–í–∞–ª–∏–¥–∞—Ü–∏—è", "try" in js_content and "catch" in js_content, 5),
        ("DOM –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏", "querySelector" in js_content or "getElementById" in js_content, 5),
        ("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", "//" in js_content or "/*" in js_content, 5)
    ]
    
    for check_name, condition, points in quality_checks:
        if condition:
            score += points
        print(f"    {'‚úì' if condition else '‚úó'} {check_name}: {points if condition else 0} –±–∞–ª–ª–æ–≤")
    
    return min(score, 100)

def save_test_results(result, score, processing_time):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞"""
    test_result = {
        "timestamp": datetime.now().isoformat(),
        "project_id": result.project_id if hasattr(result, 'project_id') else None,
        "quality_score": score,
        "processing_time": processing_time,
        "target_quality": "1000/100 (AAA level)",
        "files_generated": list(result.files.keys()) if hasattr(result, 'files') else [],
        "success": True
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    with open("test_results.json", "w", encoding="utf-8") as f:
        json.dump(test_result, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ test_results.json")

if __name__ == "__main__":
    print("ü§ñ –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ VIBECODE AI (1000/100 QUALITY)")
    print("–ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AdvancedAIProcessor –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
    test_3d_calculator_generation()