
import re
import json
import random
from typing import Dict, List, Any, Tuple
from datetime import datetime

class GeniusConversationAI:
    """–ì–µ–Ω–∏–∞–ª—å–Ω—ã–π –¥–∏–∞–ª–æ–≥–æ–≤—ã–π AI, –ø–æ–Ω–∏–º–∞—é—â–∏–π –ª—é–±—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"""
    
    def __init__(self):
        # –û–≥—Ä–æ–º–Ω–∞—è –±–∞–∑–∞ —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –∏ –≤–∞—Ä–∏–∞—Ü–∏–π
        self.app_synonyms = {
            "–∏–≥—Ä—ã": ["–∏–≥—Ä–∞", "game", "–≥–µ–π–º—Å", "–∏–≥—Ä–∞—Ç—å", "gaming", "–≥–µ–π–º–ø–ª–µ–π", "–∞—Ä–∫–∞–¥–∞", "—Å–∏–º—É–ª—è—Ç–æ—Ä", "idle", "rpg", "—Å—Ç—Ä–µ–ª—è–ª–∫–∞", "–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ—Ä"],
            "—Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ": ["—Å–æ—Ü—Å–µ—Ç—å", "—á–∞—Ç", "–º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä", "–æ–±—â–µ–Ω–∏–µ", "–¥—Ä—É–∑—å—è", "–∏–Ω—Å—Ç–∞–≥—Ä–∞–º", "—Ç–∏–∫—Ç–æ–∫", "–∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞", "–¥–µ–π—Ç–∏–Ω–≥", "—Ñ–æ—Ä—É–º"],
            "–±–∏–∑–Ω–µ—Å": ["—Ä–∞–±–æ—Ç–∞", "–æ—Ñ–∏—Å", "–∫–æ–º–ø–∞–Ω–∏—è", "crm", "erp", "—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "–±–∏–∑–Ω–µ—Å", "–ø—Ä–æ–¥–∞–∂–∏", "–∫–ª–∏–µ–Ω—Ç—ã", "–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π"],
            "–º–∞–≥–∞–∑–∏–Ω": ["—Ç–æ—Ä–≥–æ–≤–ª—è", "–ø—Ä–æ–¥–∞–≤–∞—Ç—å", "–ø–æ–∫—É–ø–∞—Ç—å", "ecommerce", "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω", "–º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å", "—Ç–æ–≤–∞—Ä—ã", "–æ–Ω–ª–∞–π–Ω-–º–∞–≥–∞–∑–∏–Ω"],
            "—Ñ–∏–Ω–∞–Ω—Å—ã": ["–¥–µ–Ω—å–≥–∏", "–ø–ª–∞—Ç–µ–∂–∏", "–±–∞–Ω–∫", "–∫–∞—Ä—Ç—ã", "–∫–æ—à–µ–ª–µ–∫", "–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "–±—é–¥–∂–µ—Ç", "—Ñ–∏–Ω—Ç–µ—Ö"],
            "–∑–¥–æ—Ä–æ–≤—å–µ": ["—Ñ–∏—Ç–Ω–µ—Å", "—Å–ø–æ—Ä—Ç", "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", "–¥–∏–µ—Ç–∞", "–º–µ–¥–∏—Ü–∏–Ω–∞", "–≤—Ä–∞—á", "–∑–¥–æ—Ä–æ–≤—å–µ", "wellness", "–º–µ–¥–∏—Ç–∞—Ü–∏—è"],
            "–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": ["—É—á–µ–±–∞", "–æ–±—É—á–µ–Ω–∏–µ", "–∫—É—Ä—Å—ã", "—à–∫–æ–ª–∞", "—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç", "–∑–Ω–∞–Ω–∏—è", "–∏–∑—É—á–∞—Ç—å", "—É—á–∏—Ç—å", "–æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å—ã"],
            "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": ["–º—É–∑—ã–∫–∞", "–≤–∏–¥–µ–æ", "—Ñ–∏–ª—å–º—ã", "—Å–µ—Ä–∏–∞–ª—ã", "–ø–æ–¥–∫–∞—Å—Ç—ã", "—Å—Ç—Ä–∏–º–∏–Ω–≥", "–∫–æ–Ω—Ç–µ–Ω—Ç", "–º–µ–¥–∏–∞", "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ"],
            "—É—Ç–∏–ª–∏—Ç—ã": ["–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç", "–ø–æ–º–æ—â–Ω–∏–∫", "–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", "–ø–æ–≥–æ–¥–∞", "–∑–∞–º–µ—Ç–∫–∏", "–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫", "—Å–∫–∞–Ω–µ—Ä", "–æ—Ä–≥–∞–Ω–∞–π–∑–µ—Ä"],
            "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è": ["—Ç—É—Ä–∏–∑–º", "–æ—Ç–ø—É—Å–∫", "–ø–æ–µ–∑–¥–∫–∏", "–æ—Ç–µ–ª–∏", "–±–∏–ª–µ—Ç—ã", "–∫–∞—Ä—Ç—ã", "–Ω–∞–≤–∏–≥–∞—Ü–∏—è", "–≥–∏–¥", "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ"]
        }
        
        # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏–π
        self.intent_patterns = {
            "—Å–æ–∑–¥–∞—Ç—å_–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ": [
                r"(—Å–æ–∑–¥–∞–π|—Å–¥–µ–ª–∞–π|—Ä–∞–∑—Ä–∞–±–æ—Ç–∞–π|–ø–æ—Å—Ç—Ä–æ–π|–∑–∞–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä—É–π).*(–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ|app|–∞–ø–ø|–ø—Ä–æ–≥—Ä–∞–º–º—É)",
                r"(—Ö–æ—á—É|–Ω—É–∂–Ω–æ|—Ç—Ä–µ–±—É–µ—Ç—Å—è).*(–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ|app|–∞–ø–ø|—Å–∞–π—Ç|–ø—Ä–æ–≥—Ä–∞–º–º—É)",
                r"(–º–æ–±–∏–ª—å–Ω–æ–µ|mobile).*(–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ|app)",
                r"–º–æ–∂–µ—à—å.*(—Å–æ–∑–¥–∞—Ç—å|—Å–¥–µ–ª–∞—Ç—å).*(–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ|app|—Å–∞–π—Ç)",
                r"(–Ω—É–∂–Ω–∞|–Ω—É–∂–µ–Ω).*(–ø—Ä–æ–≥—Ä–∞–º–º–∞|–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ|—Å–∞–π—Ç)",
                r"–¥–∞–≤–∞–π.*(—Å–æ–∑–¥–∞–¥–∏–º|—Å–¥–µ–ª–∞–µ–º|—Ä–∞–∑—Ä–∞–±–æ—Ç–∞–µ–º)"
            ],
            "—É–ª—É—á—à–∏—Ç—å_–ø—Ä–æ–µ–∫—Ç": [
                r"(—É–ª—É—á—à–∏|–¥–æ—Ä–∞–±–æ—Ç–∞–π|–¥–æ–±–∞–≤—å|–∏–∑–º–µ–Ω–∏|–º–æ–¥–µ—Ä–Ω–∏–∑–∏—Ä—É–π).*(–ø—Ä–æ–µ–∫—Ç|–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ|app|—Å–∞–π—Ç)",
                r"(–º–æ–∂–Ω–æ|–Ω—É–∂–Ω–æ).*(–¥–æ–±–∞–≤–∏—Ç—å|–∏–∑–º–µ–Ω–∏—Ç—å|—É–ª—É—á—à–∏—Ç—å|–¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å)",
                r"(–Ω–æ–≤—ã–µ|–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ).*(—Ñ—É–Ω–∫—Ü–∏–∏|–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏|—Ñ–∏—á–∏|—Ñ–∏—à–∫–∏)",
                r"(–æ–±–Ω–æ–≤–∏|–∞–ø–¥–µ–π—Ç|–≤–µ—Ä—Å–∏—è).*(–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ|–ø—Ä–æ–µ–∫—Ç)"
            ],
            "–ø–æ–ª—É—á–∏—Ç—å_—Å–æ–≤–µ—Ç": [
                r"(–ø–æ—Å–æ–≤–µ—Ç—É–π|–ø–æ–¥—Å–∫–∞–∂–∏|–ø–æ–º–æ–≥–∏|—á—Ç–æ –ª—É—á—à–µ|–∫–∞–∫ –≤—ã–±—Ä–∞—Ç—å)",
                r"(–∫–∞–∫–æ–µ|–∫–∞–∫—É—é|–∫–∞–∫–æ–π).*(–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ|–ø—Ä–æ–µ–∫—Ç|–∏–¥–µ—é|–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ)",
                r"(–Ω–µ –∑–Ω–∞—é|—Å–æ–º–Ω–µ–≤–∞—é—Å—å|–≤—ã–±—Ä–∞—Ç—å|–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è)",
                r"(—á—Ç–æ –¥—É–º–∞–µ—à—å|–º–Ω–µ–Ω–∏–µ|—Å–æ–≤–µ—Ç)"
            ],
            "—É–∑–Ω–∞—Ç—å_—Ç—Ä–µ–Ω–¥—ã": [
                r"(—Ç—Ä–µ–Ω–¥—ã|–ø–æ–ø—É–ª—è—Ä–Ω–æ|–º–æ–¥–Ω–æ|–∞–∫—Ç—É–∞–ª—å–Ω–æ|–≤ –º–æ–¥–µ)",
                r"(—á—Ç–æ —Å–µ–π—á–∞—Å|—Å–µ–π—á–∞—Å –ø–æ–ø—É–ª—è—Ä–Ω–æ|–≤ —Ç—Ä–µ–Ω–¥–µ|–≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–æ)",
                r"(—Ä—ã–Ω–æ–∫|—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞|–∞–Ω–∞–ª–∏—Ç–∏–∫–∞|–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ)",
                r"(—á—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–ø—Ä–æ—Å–æ–º|—á—Ç–æ –∫–∞—á–∞—é—Ç|—á—Ç–æ —Å–∫–∞—á–∏–≤–∞—é—Ç)"
            ],
            "–º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è": [
                r"(–∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å|–¥–æ—Ö–æ–¥|–¥–µ–Ω—å–≥–∏|–ø—Ä–∏–±—ã–ª—å|–º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è)",
                r"(—Å–∫–æ–ª—å–∫–æ –º–æ–∂–Ω–æ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å|–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å|–æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å)",
                r"(–∫–∞–∫ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å|—Å—Ö–µ–º—ã –∑–∞—Ä–∞–±–æ—Ç–∫–∞|–±–∏–∑–Ω–µ—Å-–º–æ–¥–µ–ª—å)"
            ]
        }
        
        # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏ –¥–ª—è –±–æ–ª–µ–µ –∂–∏–≤–æ–≥–æ –æ–±—â–µ–Ω–∏—è
        self.emotional_responses = {
            "–≤–æ—Å—Ç–æ—Ä–≥": [
                "üöÄ –í–ê–£! –≠—Ç–æ –ø–æ—Ç—Ä—è—Å–∞—é—â–∞—è –∏–¥–µ—è!",
                "üî• –ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ! –Ø –≤ –≤–æ—Å—Ç–æ—Ä–≥–µ –æ—Ç –≤–∞—à–µ–π –∑–∞–¥—É–º–∫–∏!",
                "‚ú® –ì–µ–Ω–∏–∞–ª—å–Ω–æ! –¢–∞–∫–æ–≥–æ –µ—â–µ –Ω–µ –±—ã–ª–æ!",
                "üíé –≠—Ç–æ –±—É–¥–µ—Ç –±—Ä–∏–ª–ª–∏–∞–Ω—Ç —Å—Ä–µ–¥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π!",
                "‚ö° –§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞! –≠—Ç–æ –≤–∑–æ—Ä–≤–µ—Ç —Ä—ã–Ω–æ–∫!",
                "üåü –û—Ñ–∏–≥–µ–Ω–Ω–æ! –≠—Ç–æ –±—É–¥—É—â–µ–µ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏!"
            ],
            "–ø–æ–¥–¥–µ—Ä–∂–∫–∞": [
                "üí™ –û—Ç–ª–∏—á–Ω–æ! –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —ç—Ç–æ —Å–¥–µ–ª–∞–µ–º!",
                "üéØ –¢–æ—á–Ω–æ! –≠—Ç–æ –æ—Ç–ª–∏—á–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ!",
                "üëç –°—É–ø–µ—Ä! –Ø –≤–∏–∂—É –æ–≥—Ä–æ–º–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª!",
                "‚ö° –î–∞! –≠—Ç–æ –∏–∑–º–µ–Ω–∏—Ç –≤—Å–µ!",
                "üèÜ –ü—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –≤—ã–±–æ—Ä! –ë—É–¥–µ—Ç —Ö–∏—Ç!",
                "üí´ –ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—é–±—è—Ç —ç—Ç–æ!"
            ],
            "—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å": [
                "üèÜ 100% –ø–æ–ª—É—á–∏—Ç—Å—è! –Ø —Å–æ–∑–¥–∞–º —á—Ç–æ-—Ç–æ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ–µ!",
                "üéâ –ë–µ–∑ –ø—Ä–æ–±–ª–µ–º! –≠—Ç–æ –±—É–¥–µ—Ç —à–µ–¥–µ–≤—Ä!",
                "üåü –ö–æ–Ω–µ—á–Ω–æ! –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–≤–∑–æ–π–¥–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è!",
                "üí´ –õ–µ–≥–∫–æ! –°–æ–∑–¥–∞–¥–∏–º —á—Ç–æ-—Ç–æ —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–µ!",
                "üî• –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ! –°–¥–µ–ª–∞–µ–º –ª—É—á—à–µ –≤—Å–µ—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤!",
                "‚ö° –°–∞–º–æ —Å–æ–±–æ–π! –≠—Ç–æ –±—É–¥–µ—Ç —Ç–æ–ø–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç!"
            ],
            "–º–æ—Ç–∏–≤–∞—Ü–∏—è": [
                "üöÄ –í–ø–µ—Ä–µ–¥ –∫ —É—Å–ø–µ—Ö—É! –°–æ–∑–¥–∞–µ–º –±—É–¥—É—â–µ–µ!",
                "üí° –ì–µ–Ω–∏–∞–ª—å–Ω–∞—è –∏–¥–µ—è –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—Ç –≥–µ–Ω–∏–∞–ª—å–Ω–æ–≥–æ –≤–æ–ø–ª–æ—â–µ–Ω–∏—è!",
                "üéØ –¶–µ–ª—å —è—Å–Ω–∞, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –ø–æ—Ç—Ä—è—Å–∞—é—â–∏–º!",
                "üíé –ò–∑ —Ö–æ—Ä–æ—à–µ–π –∏–¥–µ–∏ —Å–¥–µ–ª–∞–µ–º –±—Ä–∏–ª–ª–∏–∞–Ω—Ç!",
                "üî• –ó–∞–∂–≥–µ–º —ç—Ç–æ—Ç —Ä—ã–Ω–æ–∫ –Ω–∞—à–∏–º –ø—Ä–æ–¥—É–∫—Ç–æ–º!"
            ]
        }
        
        # –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è
        self.creative_suggestions = {
            "–∏–≥—Ä—ã": [
                "üéÆ AR-–∏–≥—Ä–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏",
                "üèÜ –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å –ø—Ä–∏–∑–∞–º–∏",
                "ü§ñ AI-—Å–æ–ø–µ—Ä–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —É—á–∏—Ç—Å—è",
                "üåç –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–Ω–ª–∞–π–Ω-–±–∏—Ç–≤—ã",
                "üíé NFT-–ø—Ä–µ–¥–º–µ—Ç—ã –≤ –∏–≥—Ä–µ",
                "üé≠ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä—ã",
                "üîÑ –ü—Ä–æ—Ü–µ–¥—É—Ä–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã–µ —É—Ä–æ–≤–Ω–∏",
                "üéµ –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≥–µ–π–º–ø–ª–µ—è"
            ],
            "—Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ": [
                "üé≠ AI-–∞–≤–∞—Ç–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                "üéµ –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è –æ–±—â–µ–Ω–∏—è",
                "üì∏ AR-—Ñ–∏–ª—å—Ç—Ä—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏",
                "üè† –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –¥–ª—è –≤—Å—Ç—Ä–µ—á",
                "üíù –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–∞—Ä–∫–æ–≤ –∏ –Ω–∞–≥—Ä–∞–¥",
                "üé™ –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞",
                "üì± –ò—Å—Ç–æ—Ä–∏–∏ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏",
                "üåê –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —á–∞—Ç—ã –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º"
            ],
            "–±–∏–∑–Ω–µ—Å": [
                "ü§ñ AI-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø—Ä–æ–¥–∞–∂",
                "üìä –ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
                "üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤",
                "üì± –ú–æ–±–∏–ª—å–Ω—ã–π –æ—Ñ–∏—Å –≤ –∫–∞—Ä–º–∞–Ω–µ",
                "üåê –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å 100+ —Å–µ—Ä–≤–∏—Å–∞–º–∏",
                "üìà Real-time –¥–∞—à–±–æ—Ä–¥—ã",
                "üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π lead scoring",
                "üí¨ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ —á–∞—Ç-–±–æ—Ç—ã"
            ],
            "–º–∞–≥–∞–∑–∏–Ω": [
                "üõí –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
                "üì± AR-–ø—Ä–∏–º–µ—Ä–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤",
                "ü§ñ AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π",
                "üì¶ –£–º–Ω–∞—è –ª–æ–≥–∏—Å—Ç–∏–∫–∞ –∏ –¥–æ—Å—Ç–∞–≤–∫–∞",
                "üí≥ One-click –ø–æ–∫—É–ø–∫–∏",
                "üéÅ –ì–µ–π–º–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏",
                "üìä Predictive inventory management",
                "üîÑ –°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è"
            ]
        }

        # –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –æ —Ç—Ä–µ–Ω–¥–∞—Ö –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö
        self.market_insights = {
            "2024_trends": [
                "ü§ñ AI-first –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–æ–º–∏–Ω–∏—Ä—É—é—Ç",
                "üîÑ Real-time —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å - —Å—Ç–∞–Ω–¥–∞—Ä—Ç",
                "üé® –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è",
                "üåç –°—É–ø–µ—Ä–∞–ø–ø –ø–æ–¥—Ö–æ–¥ –Ω–∞–±–∏—Ä–∞–µ—Ç –æ–±–æ—Ä–æ—Ç—ã", 
                "üîê Privacy-by-design –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞",
                "üì± Progressive Web Apps –∑–∞–º–µ–Ω—è—é—Ç –Ω–∞—Ç–∏–≤–Ω—ã–µ",
                "üéÆ –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ –Ω–µ—Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã—Ö –æ–±–ª–∞—Å—Ç—è—Ö",
                "üå± Sustainable tech —Ä–µ—à–µ–Ω–∏—è"
            ],
            "revenue_models": {
                "freemium": "85% –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ, 5-15% –ø–ª–∞—Ç—è—Ç $5-50/–º–µ—Å—è—Ü",
                "subscription": "–°—Ä–µ–¥–Ω–∏–π ARPU $10-100/–º–µ—Å—è—Ü, retention 85%+",
                "marketplace": "–ö–æ–º–∏—Å—Å–∏—è 5-15%, –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –æ–≥—Ä–æ–º–Ω—ã–π",
                "advertising": "$1-10 CPM –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∏—à–∏",
                "premium": "–†–∞–∑–æ–≤—ã–µ –ø–æ–∫—É–ø–∫–∏ $1-50, –≤—ã—Å–æ–∫–∞—è –º–∞—Ä–∂–∞"
            }
        }

    def understand_user_intent(self, message: str) -> Dict[str, Any]:
        """–ü–æ–Ω–∏–º–∞–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–º–æ—â—å—é –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ NLP"""
        
        message_lower = message.lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ
        intent = self._classify_intent(message_lower)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app_type = self._extract_app_type(message_lower)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–∫—Ä–∞—Å–∫—É
        emotion = self._detect_emotion(message_lower)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        requirements = self._extract_requirements(message_lower)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
        urgency = self._detect_urgency(message_lower)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
        platform_prefs = self._extract_platform_preferences(message_lower)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å
        complexity = self._detect_complexity(message_lower)
        
        # –ê–Ω–∞–ª–∏–∑ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã—Ö –Ω–∞–º–µ—Ä–µ–Ω–∏–π
        monetization_interest = self._detect_monetization_interest(message_lower)
        
        return {
            "intent": intent,
            "app_type": app_type,
            "emotion": emotion,
            "requirements": requirements,
            "urgency": urgency,
            "platform_preferences": platform_prefs,
            "complexity": complexity,
            "monetization_interest": monetization_interest,
            "confidence": self._calculate_confidence(message, intent, app_type),
            "raw_message": message,
            "processed_message": message_lower
        }

    def _classify_intent(self, message: str) -> str:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
        for intent, patterns in self.intent_patterns.items():
            for pattern in patterns:
                if re.search(pattern, message):
                    return intent
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        create_keywords = ["—Å–æ–∑–¥–∞–π", "—Å–¥–µ–ª–∞–π", "—Ö–æ—á—É", "–Ω—É–∂–Ω–æ", "—Ä–∞–∑—Ä–∞–±–æ—Ç–∞–π", "–ø–æ—Å—Ç—Ä–æ–π"]
        if any(word in message for word in create_keywords):
            return "—Å–æ–∑–¥–∞—Ç—å_–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
        
        improve_keywords = ["—É–ª—É—á—à–∏", "–¥–æ–±–∞–≤—å", "–¥–æ—Ä–∞–±–æ—Ç–∞–π", "–∏–∑–º–µ–Ω–∏", "–æ–±–Ω–æ–≤–∏"]
        if any(word in message for word in improve_keywords):
            return "—É–ª—É—á—à–∏—Ç—å_–ø—Ä–æ–µ–∫—Ç"
        
        advice_keywords = ["–ø–æ—Å–æ–≤–µ—Ç—É–π", "–ø–æ–¥—Å–∫–∞–∂–∏", "–ø–æ–º–æ–≥–∏", "—á—Ç–æ –ª—É—á—à–µ"]
        if any(word in message for word in advice_keywords):
            return "–ø–æ–ª—É—á–∏—Ç—å_—Å–æ–≤–µ—Ç"
        
        trend_keywords = ["—Ç—Ä–µ–Ω–¥—ã", "–ø–æ–ø—É–ª—è—Ä–Ω–æ", "–º–æ–¥–Ω–æ", "—Ä—ã–Ω–æ–∫", "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]
        if any(word in message for word in trend_keywords):
            return "—É–∑–Ω–∞—Ç—å_—Ç—Ä–µ–Ω–¥—ã"
        
        money_keywords = ["–∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å", "–¥–æ—Ö–æ–¥", "–¥–µ–Ω—å–≥–∏", "–ø—Ä–∏–±—ã–ª—å", "–º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è"]
        if any(word in message for word in money_keywords):
            return "–º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è"
        
        return "–æ–±—â–∏–π_–≤–æ–ø—Ä–æ—Å"

    def _extract_app_type(self, message: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–∏–ø –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_scores = {}
        
        for category, synonyms in self.app_synonyms.items():
            score = 0
            for synonym in synonyms:
                if synonym in message:
                    # –î–ª–∏–Ω–Ω—ã–µ —Å–∏–Ω–æ–Ω–∏–º—ã –ø–æ–ª—É—á–∞—é—Ç –±–æ–ª—å—à–∏–π –≤–µ—Å
                    weight = len(synonym.split("_")) if "_" in synonym else len(synonym) // 3
                    score += max(1, weight)
            
            if score > 0:
                category_scores[category] = score
        
        if category_scores:
            return max(category_scores, key=category_scores.get)
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
        game_indicators = ["–∑–º–µ–π–∫–∞", "—Ç–µ—Ç—Ä–∏—Å", "–∞—Ä–∫–∞–Ω–æ–∏–¥", "—à—É—Ç–µ—Ä", "rpg", "idle", "–∞—Ä–∫–∞–¥–∞"]
        if any(word in message for word in game_indicators):
            return "–∏–≥—Ä—ã"
        
        social_indicators = ["—á–∞—Ç", "–æ–±—â–µ–Ω–∏–µ", "–¥—Ä—É–∑—å—è", "–∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞", "—Å–æ—Ü—Å–µ—Ç—å"]
        if any(word in message for word in social_indicators):
            return "—Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ"
        
        business_indicators = ["crm", "erp", "–ø—Ä–æ–¥–∞–∂–∏", "–∫–ª–∏–µ–Ω—Ç—ã", "—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏"]
        if any(word in message for word in business_indicators):
            return "–±–∏–∑–Ω–µ—Å"
        
        ecommerce_indicators = ["–º–∞–≥–∞–∑–∏–Ω", "—Ç–æ–≤–∞—Ä—ã", "–ø—Ä–æ–¥–∞–≤–∞—Ç—å", "–ø–æ–∫—É–ø–∞—Ç—å", "–∫–æ—Ä–∑–∏–Ω–∞"]
        if any(word in message for word in ecommerce_indicators):
            return "–º–∞–≥–∞–∑–∏–Ω"
        
        return "—É—Ç–∏–ª–∏—Ç—ã"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

    def _detect_emotion(self, message: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–∫—Ä–∞—Å–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è"""
        
        # –í–æ—Å—Ç–æ—Ä–∂–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
        excited_words = ["–∫—Ä—É—Ç–æ", "–æ—Ñ–∏–≥–µ–Ω–Ω–æ", "–ø–æ—Ç—Ä—è—Å–∞—é—â–µ", "–Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ", "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", "—Å—É–ø–µ—Ä"]
        if any(word in message for word in excited_words):
            return "–≤–æ—Å—Ç–æ—Ä–≥"
        
        # –°—Ä–æ—á–Ω–æ—Å—Ç—å –∏ —ç–Ω—Ç—É–∑–∏–∞–∑–º
        urgent_excited = ["—Ö–æ—á—É", "—Å—Ä–æ—á–Ω–æ", "–±—ã—Å—Ç—Ä–æ", "—Å–∫–æ—Ä–µ–µ", "–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ", "–ø—Ä—è–º–æ —Å–µ–π—á–∞—Å"]
        if any(word in message for word in urgent_excited):
            return "–≤–æ—Å—Ç–æ—Ä–≥"
        
        # –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Å–ª–æ–≤–∞
        positive_words = ["–æ—Ç–ª–∏—á–Ω–æ", "–∫–ª–∞—Å—Å–Ω–æ", "—Ö–æ—Ä–æ—à–æ", "–Ω—Ä–∞–≤–∏—Ç—Å—è", "–ª—é–±–ª—é", "–æ–±–æ–∂–∞—é"]
        if any(word in message for word in positive_words):
            return "–ø–æ–¥–¥–µ—Ä–∂–∫–∞"
        
        # –ù–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        uncertain_words = ["–Ω–µ –∑–Ω–∞—é", "—Å–æ–º–Ω–µ–≤–∞—é—Å—å", "–º–æ–∂–µ—Ç –±—ã—Ç—å", "–≤–æ–∑–º–æ–∂–Ω–æ", "–Ω–µ —É–≤–µ—Ä–µ–Ω", "–¥—É–º–∞—é"]
        if any(word in message for word in uncertain_words):
            return "–ø–æ–¥–¥–µ—Ä–∂–∫–∞"  # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        
        # –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
        motivational_words = ["–¥–∞–≤–∞–π", "–≤–ø–µ—Ä–µ–¥", "–Ω–∞—á–Ω–µ–º", "–¥–µ–ª–∞–µ–º", "—Å–æ–∑–¥–∞–µ–º"]
        if any(word in message for word in motivational_words):
            return "–º–æ—Ç–∏–≤–∞—Ü–∏—è"
        
        return "—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

    def _extract_requirements(self, message: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        
        requirements = []
        
        # –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã
        platform_indicators = {
            "iOS –ø–æ–¥–¥–µ—Ä–∂–∫–∞": ["ios", "–∞–π—Ñ–æ–Ω", "iphone", "apple", "app store"],
            "Android –ø–æ–¥–¥–µ—Ä–∂–∫–∞": ["android", "–∞–Ω–¥—Ä–æ–∏–¥", "google play", "–ø–ª–µ–π –º–∞—Ä–∫–µ—Ç"],
            "–í–µ–±-–≤–µ—Ä—Å–∏—è": ["–≤–µ–±", "web", "–±—Ä–∞—É–∑–µ—Ä", "—Å–∞–π—Ç", "–æ–Ω–ª–∞–π–Ω"],
            "PWA": ["pwa", "–ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "–≥–∏–±—Ä–∏–¥–Ω–æ–µ"]
        }
        
        for req, indicators in platform_indicators.items():
            if any(indicator in message for indicator in indicators):
                requirements.append(req)
        
        # –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        feature_indicators = {
            "–û–Ω–ª–∞–π–Ω —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å": ["–æ–Ω–ª–∞–π–Ω", "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç", "–æ–±–ª–∞–∫–æ", "—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è", "real-time"],
            "–û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º": ["–æ—Ñ–ª–∞–π–Ω", "–±–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞", "–∞–≤—Ç–æ–Ω–æ–º–Ω–æ", "–ª–æ–∫–∞–ª—å–Ω–æ"],
            "–°–∏—Å—Ç–µ–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π": ["–æ–ø–ª–∞—Ç–∞", "–ø–ª–∞—Ç–µ–∂–∏", "–¥–µ–Ω—å–≥–∏", "–ø–æ–∫—É–ø–∫–∏", "–ø–æ–¥–ø–∏—Å–∫–∞"],
            "–°–∏—Å—Ç–µ–º–∞ —Å–æ–æ–±—â–µ–Ω–∏–π": ["—á–∞—Ç", "—Å–æ–æ–±—â–µ–Ω–∏—è", "–æ–±—â–µ–Ω–∏–µ", "–ø–µ—Ä–µ–ø–∏—Å–∫–∞", "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"],
            "–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è": ["–∫–∞—Ä—Ç–∞", "–≥–µ–æ–ª–æ–∫–∞—Ü–∏—è", "gps", "–º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", "–Ω–∞–≤–∏–≥–∞—Ü–∏—è"],
            "AI-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è": ["ai", "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", "–Ω–µ–π—Ä–æ—Å–µ—Ç—å", "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ"],
            "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏": ["–¥—Ä—É–∑—å—è", "–ø–æ–¥–ø–∏—Å—á–∏–∫–∏", "–ª–∞–π–∫–∏", "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", "—Ä–µ–ø–æ—Å—Ç—ã"]
        }
        
        for req, indicators in feature_indicators.items():
            if any(indicator in message for indicator in indicators):
                requirements.append(req)
        
        # –î–∏–∑–∞–π–Ω —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        design_indicators = {
            "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω": ["–∫—Ä–∞—Å–∏–≤—ã–π", "—Å—Ç–∏–ª—å–Ω—ã–π", "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π", "–º–æ–¥–Ω—ã–π", "—Ç—Ä–µ–Ω–¥–æ–≤—ã–π"],
            "–¢–µ–º–Ω–∞—è —Ç–µ–º–∞": ["—Ç–µ–º–Ω–∞—è", "dark", "—á–µ—Ä–Ω–∞—è", "–Ω–æ—á–Ω–∞—è"],
            "–ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –¥–∏–∑–∞–π–Ω": ["–º–∏–Ω–∏–º–∞–ª–∏–∑–º", "–ø—Ä–æ—Å—Ç–æ–π", "—á–∏—Å—Ç—ã–π", "–ª–∞–∫–æ–Ω–∏—á–Ω—ã–π"],
            "–ê–Ω–∏–º–∞—Ü–∏–∏": ["–∞–Ω–∏–º–∞—Ü–∏–∏", "—ç—Ñ—Ñ–µ–∫—Ç—ã", "–ø–µ—Ä–µ—Ö–æ–¥—ã", "–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π"]
        }
        
        for req, indicators in design_indicators.items():
            if any(indicator in message for indicator in indicators):
                requirements.append(req)
        
        return requirements

    def _detect_urgency(self, message: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Å—Ä–æ—á–Ω–æ—Å—Ç–∏"""
        
        urgent_words = ["—Å—Ä–æ—á–Ω–æ", "–±—ã—Å—Ç—Ä–æ", "—Å–∫–æ—Ä–µ–µ", "–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ", "–ø—Ä—è–º–æ —Å–µ–π—á–∞—Å", "–≤—á–µ—Ä–∞ –Ω—É–∂–Ω–æ –±—ã–ª–æ", "–∞—Å–∞–ø"]
        if any(word in message for word in urgent_words):
            return "–≤—ã—Å–æ–∫–∞—è"
        
        relaxed_words = ["–∫–æ–≥–¥–∞ —É–¥–æ–±–Ω–æ", "–Ω–µ —Å–ø–µ—à—É", "–∫–∞—á–µ—Å—Ç–≤–æ –≤–∞–∂–Ω–µ–µ", "—Ç—â–∞—Ç–µ–ª—å–Ω–æ", "–Ω–µ —Ç–æ—Ä–æ–ø—è—Å—å"]
        if any(word in message for word in relaxed_words):
            return "–Ω–∏–∑–∫–∞—è"
        
        return "—Å—Ä–µ–¥–Ω—è—è"

    def _extract_platform_preferences(self, message: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º"""
        
        platforms = []
        
        platform_keywords = {
            "iOS": ["ios", "–∞–π—Ñ–æ–Ω", "iphone", "apple", "app store"],
            "Android": ["android", "–∞–Ω–¥—Ä–æ–∏–¥", "google play", "–ø–ª–µ–π –º–∞—Ä–∫–µ—Ç"],
            "Web": ["–≤–µ–±", "web", "–±—Ä–∞—É–∑–µ—Ä", "—Å–∞–π—Ç", "–æ–Ω–ª–∞–π–Ω"],
            "Desktop": ["–¥–µ—Å–∫—Ç–æ–ø", "–∫–æ–º–ø—å—é—Ç–µ—Ä", "windows", "mac", "linux"]
        }
        
        for platform, keywords in platform_keywords.items():
            if any(keyword in message for keyword in keywords):
                platforms.append(platform)
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
        if any(word in message for word in ["–≤—Å–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã", "–≤–µ–∑–¥–µ", "–∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º", "—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ"]):
            platforms = ["iOS", "Android", "Web"]
        
        if not platforms:
            platforms = ["iOS", "Android"]  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –º–æ–±–∏–ª—å–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        
        return platforms

    def _detect_complexity(self, message: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Ç—Ä–µ–±—É–µ–º–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è"""
        
        simple_words = ["–ø—Ä–æ—Å—Ç–æ–π", "–±–∞–∑–æ–≤—ã–π", "–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π", "–ª–µ–≥–∫–∏–π", "–±—ã—Å—Ç—Ä—ã–π", "–Ω–µ—Å–ª–æ–∂–Ω—ã–π"]
        if any(word in message for word in simple_words):
            return "–ø—Ä–æ—Å—Ç–∞—è"
        
        complex_words = ["—Å–ª–æ–∂–Ω—ã–π", "–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", "–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π", "enterprise", "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π", "–º–æ—â–Ω—ã–π"]
        if any(word in message for word in complex_words):
            return "—Å–ª–æ–∂–Ω–∞—è"
        
        return "—Å—Ä–µ–¥–Ω—è—è"

    def _detect_monetization_interest(self, message: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å –∫ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏"""
        
        money_keywords = ["–∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å", "–¥–æ—Ö–æ–¥", "–¥–µ–Ω—å–≥–∏", "–ø—Ä–∏–±—ã–ª—å", "–º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è", "–±–∏–∑–Ω–µ—Å", "–ø—Ä–æ–¥–∞–≤–∞—Ç—å", "–ø–æ–¥–ø–∏—Å–∫–∞"]
        return any(keyword in message for keyword in money_keywords)

    def _calculate_confidence(self, original_message: str, intent: str, app_type: str) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏"""
        
        confidence = 0.5  # –ë–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        
        # –ü–æ–≤—ã—à–∞–µ–º –∑–∞ —á–µ—Ç–∫–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
        if intent != "–æ–±—â–∏–π_–≤–æ–ø—Ä–æ—Å":
            confidence += 0.2
        
        # –ü–æ–≤—ã—à–∞–µ–º –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–∏–ø –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if app_type != "—É—Ç–∏–ª–∏—Ç—ã":
            confidence += 0.15
        
        # –ü–æ–≤—ã—à–∞–µ–º –∑–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è (–±–æ–ª—å—à–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)
        words_count = len(original_message.split())
        if words_count > 10:
            confidence += 0.15
        elif words_count > 5:
            confidence += 0.1
        
        # –ü–æ–≤—ã—à–∞–µ–º –∑–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        specific_keywords = ["—Å–æ–∑–¥–∞–π", "—Å–¥–µ–ª–∞–π", "—Ö–æ—á—É", "–Ω—É–∂–Ω–æ", "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "app"]
        keyword_matches = sum(1 for word in specific_keywords if word in original_message.lower())
        confidence += min(0.2, keyword_matches * 0.05)
        
        return min(confidence, 1.0)

    def generate_intelligent_response(self, user_message: str, context: Dict = None) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–ª–ª–∏–≥–µ–Ω—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏—è
        understanding = self.understand_user_intent(user_message)
        
        intent = understanding["intent"]
        app_type = understanding["app_type"]
        emotion = understanding["emotion"]
        requirements = understanding["requirements"]
        urgency = understanding["urgency"]
        complexity = understanding["complexity"]
        
        # –í—ã–±–∏—Ä–∞–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Ä–µ–∞–∫—Ü–∏—é
        emotional_start = random.choice(self.emotional_responses[emotion])
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏—è
        if intent == "—Å–æ–∑–¥–∞—Ç—å_–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ":
            response = self._generate_creation_response(
                emotional_start, app_type, requirements, urgency, complexity, understanding
            )
        elif intent == "—É–ª—É—á—à–∏—Ç—å_–ø—Ä–æ–µ–∫—Ç":
            response = self._generate_improvement_response(emotional_start, app_type, requirements)
        elif intent == "–ø–æ–ª—É—á–∏—Ç—å_—Å–æ–≤–µ—Ç":
            response = self._generate_advice_response(emotional_start, app_type, understanding)
        elif intent == "—É–∑–Ω–∞—Ç—å_—Ç—Ä–µ–Ω–¥—ã":
            response = self._generate_trends_response(emotional_start, app_type)
        elif intent == "–º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è":
            response = self._generate_monetization_response(emotional_start, app_type)
        else:
            response = self._generate_general_response(emotional_start, app_type, understanding)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        response["understanding"] = understanding
        response["timestamp"] = datetime.now().isoformat()
        
        return response

    def _generate_creation_response(self, emotional_start: str, app_type: str, 
                                  requirements: List[str], urgency: str, complexity: str,
                                  understanding: Dict) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        
        urgency_responses = {
            "–≤—ã—Å–æ–∫–∞—è": "‚ö° –ü–û–ù–Ø–õ! –†–∞–±–æ—Ç–∞—é –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏!",
            "—Å—Ä–µ–¥–Ω—è—è": "üéØ –û—Ç–ª–∏—á–Ω–æ! –°–æ–∑–¥–∞—é –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ!",
            "–Ω–∏–∑–∫–∞—è": "üèÜ –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –î–µ–ª–∞–µ–º –∏–¥–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç!"
        }
        
        complexity_info = {
            "–ø—Ä–æ—Å—Ç–∞—è": "–±—ã—Å—Ç—Ä–æ–µ –∏ —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ",
            "—Å—Ä–µ–¥–Ω—è—è": "—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏",
            "—Å–ª–æ–∂–Ω–∞—è": "–º–æ—â–Ω–æ–µ enterprise-—Ä–µ—à–µ–Ω–∏–µ —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º"
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        creative_features = self.creative_suggestions.get(app_type, [
            "ü§ñ AI-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–ª—è —É–º–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π",
            "üìä –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            "üîÑ Real-time —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö",
            "üì± –ö—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å"
        ])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
        requirements_text = ""
        if requirements:
            requirements_text = f"\n\n‚úÖ **–í–∞—à–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —É—á—Ç–µ–Ω—ã:**\n" + "\n".join([f"‚Ä¢ {req}" for req in requirements[:6]])
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–æ—Ö–æ–¥—ã
        revenue_estimate = self._get_revenue_estimate(app_type, understanding.get("monetization_interest", False))
        
        message = f"""{emotional_start}

{urgency_responses[urgency]}

üöÄ **–°–æ–∑–¥–∞—é {app_type} –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ({complexity_info[complexity]}):**

‚ú® **–¢–æ–ø-–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—É—á–∏—Ç–µ:**
{chr(10).join(random.sample(creative_features, min(5, len(creative_features))))}

üíé **–í –ø—Ä–æ–µ–∫—Ç –≤–∫–ª—é—á–µ–Ω–æ:**
‚Ä¢ üì± –ü–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
‚Ä¢ üé® –ü–æ—Ç—Ä—è—Å–∞—é—â–∏–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω
‚Ä¢ ‚öôÔ∏è –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–ª—è —Ä–æ—Å—Ç–∞
‚Ä¢ üîå –ì–æ—Ç–æ–≤—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ (–ø–ª–∞—Ç–µ–∂–∏, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞, push)
‚Ä¢ üí∞ –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è
‚Ä¢ üìñ –ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ –∑–∞–ø—É—Å–∫—É{requirements_text}

üíµ **–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥: {revenue_estimate}**
‚è∞ **–ì–æ—Ç–æ–≤–æ —á–µ—Ä–µ–∑: 15 –º–∏–Ω—É—Ç!**

–ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —à–µ–¥–µ–≤—Ä–∞?"""

        suggestions = [
            "üöÄ –î–ê! –°–æ–∑–¥–∞–≤–∞—Ç—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ!",
            f"üé® –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∑–∞–π–Ω –¥–ª—è {app_type}",
            "üí∞ –î–µ—Ç–∞–ª–∏ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏",
            "üìã –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π"
        ]
        
        return {
            "type": "genius_response",
            "message": message,
            "suggestions": suggestions,
            "app_type": app_type,
            "complexity": complexity,
            "revenue_estimate": revenue_estimate
        }

    def _generate_improvement_response(self, emotional_start: str, app_type: str, requirements: List[str]) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""
        
        improvements = [
            "ü§ñ AI-–ø–æ–º–æ—â–Ω–∏–∫ –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è",
            "üìä –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –∏–Ω—Å–∞–π—Ç—ã",
            "üîÑ Real-time —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è", 
            "üí≥ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π",
            "üåç –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 50+ —è–∑—ã–∫–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞",
            "üì± PWA-–≤–µ—Ä—Å–∏—è –¥–ª—è –≤–µ–±-–±—Ä–∞—É–∑–µ—Ä–æ–≤",
            "üîê –ë–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è",
            "‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã –Ω–∞ 300%",
            "üé® –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏–∑–∞–π–Ω–∞ –¥–æ —Ç—Ä–µ–Ω–¥–æ–≤ 2024",
            "üìà –°–∏—Å—Ç–µ–º–∞ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
            "üîî –£–º–Ω—ã–µ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
            "üìä –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ CRM"
        ]
        
        category_specific = self.creative_suggestions.get(app_type, [])
        if category_specific:
            improvements.extend(category_specific)
        
        selected_improvements = random.sample(improvements, min(6, len(improvements)))
        
        message = f"""{emotional_start}

üîß **–ü–†–û–ö–ê–ß–ò–í–ê–ï–ú –í–ê–® –ü–†–û–ï–ö–¢ –î–û –ö–û–°–ú–ò–ß–ï–°–ö–û–ì–û –£–†–û–í–ù–Ø!**

üöÄ **–¢–æ–ø-—É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è {app_type} –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:**

{chr(10).join(selected_improvements)}

üí° **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ üé® –†–µ–¥–∏–∑–∞–π–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç—Ä–µ–Ω–¥–∞–º–∏
‚Ä¢ ‚ö° –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏ —É—Å–∫–æ—Ä–µ–Ω–∏–µ
‚Ä¢ üîí –£—Å–∏–ª–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ üìà –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è —Ä–æ—Å—Ç–∞ –±–∏–∑–Ω–µ—Å–∞

üéØ **–†–µ–∑—É–ª—å—Ç–∞—Ç:** –£–≤–µ–ª–∏—á–µ–Ω–∏–µ engagement –Ω–∞ 200-500%
‚è∞ **–í—Ä–µ–º—è –¥–æ—Ä–∞–±–æ—Ç–∫–∏:** 10-15 –º–∏–Ω—É—Ç

–ö–∞–∫–∏–µ —É–ª—É—á—à–µ–Ω–∏—è –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–º–∏?"""

        suggestions = [
            "ü§ñ AI-—Ñ—É–Ω–∫—Ü–∏–∏",
            "üé® –û–±–Ω–æ–≤–∏—Ç—å –¥–∏–∑–∞–π–Ω",
            "‚ö° –£—Å–∫–æ—Ä–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", 
            "üí∞ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—é"
        ]
        
        return {
            "type": "genius_response",
            "message": message,
            "suggestions": suggestions,
            "app_type": app_type,
            "improvements": selected_improvements
        }

    def _get_revenue_estimate(self, app_type: str, has_monetization_interest: bool) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ü–µ–Ω–∫—É –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞"""
        
        base_estimates = {
            "–∏–≥—Ä—ã": "$2,000-25,000",
            "—Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ": "$5,000-75,000",
            "–±–∏–∑–Ω–µ—Å": "$10,000-150,000",
            "–º–∞–≥–∞–∑–∏–Ω": "$8,000-200,000",
            "—Ñ–∏–Ω–∞–Ω—Å—ã": "$15,000-500,000",
            "–∑–¥–æ—Ä–æ–≤—å–µ": "$6,000-80,000",
            "–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": "$4,000-60,000",
            "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": "$3,000-40,000",
            "—É—Ç–∏–ª–∏—Ç—ã": "$2,000-30,000",
            "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è": "$5,000-70,000"
        }
        
        estimate = base_estimates.get(app_type, "$3,000-50,000")
        
        if has_monetization_interest:
            estimate = estimate.replace("000", "000+")
        
        return f"{estimate}/–º–µ—Å—è—Ü"

    def _generate_advice_response(self, emotional_start: str, app_type: str, understanding: Dict) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç-—Å–æ–≤–µ—Ç"""
        
        advice_by_type = {
            "–∏–≥—Ä—ã": "üéÆ –ò–≥—Ä—ã - —ç—Ç–æ –≤—Å–µ–≥–¥–∞ —Ö–∏—Ç! –û—Å–æ–±–µ–Ω–Ω–æ —Å —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –º–µ—Ö–∞–Ω–∏–∫–æ–π –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏. –°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ —Ç–æ–ø-10%: $50,000+/–º–µ—Å—è—Ü",
            "—Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ": "üí¨ –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–º–µ—é—Ç –æ–≥—Ä–æ–º–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞ –∏ –≤–∏—Ä—É—Å–Ω–æ—Å—Ç–∏. TikTok –∏ Discord –ø–æ–∫–∞–∑–∞–ª–∏, —á—Ç–æ –Ω–∏—à–µ–≤—ã–µ —Å–æ—Ü—Å–µ—Ç–∏ –º–æ–≥—É—Ç –≤–∑–æ—Ä–≤–∞—Ç—å —Ä—ã–Ω–æ–∫",
            "–±–∏–∑–Ω–µ—Å": "üíº B2B –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - —Å–∞–º—ã–π —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥ —á–µ—Ä–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏. –°—Ä–µ–¥–Ω–∏–π LTV –∫–ª–∏–µ–Ω—Ç–∞: $500-5,000. –ú–µ–Ω—å—à–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏, –≤—ã—à–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç—å",
            "–º–∞–≥–∞–∑–∏–Ω": "üõí E-commerce - –±—ã—Å—Ç—Ä–æ—Ä–∞—Å—Ç—É—â–∏–π —Ä—ã–Ω–æ–∫ $6.2 —Ç—Ä–ª–Ω. –° –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –Ω–∏—à–µ–π –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å—Å—è –¥–æ $100K+/–º–µ—Å—è—Ü",
            "—Ñ–∏–Ω–∞–Ω—Å—ã": "üí∞ FinTech - –æ–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤! –°—Ç—Ä–æ–≥–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è, –Ω–æ –º–∞—Ä–∂–∏ –º–æ–≥—É—Ç –¥–æ—Å—Ç–∏–≥–∞—Ç—å 80%",
            "–∑–¥–æ—Ä–æ–≤—å–µ": "üè• HealthTech –ø–µ—Ä–µ–∂–∏–≤–∞–µ—Ç –±—É–º –ø–æ—Å–ª–µ –ø–∞–Ω–¥–µ–º–∏–∏. –†—ã–Ω–æ–∫ $400+ –º–ª—Ä–¥, –≤—ã—Å–æ–∫–∏–π —Å–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è",
            "–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": "üéì EdTech - –±—É–¥—É—â–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è. –û–Ω–ª–∞–π–Ω-–∫—É—Ä—Å—ã, –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ AI-—Ç—å—é—Ç–æ—Ä—ã, VR-–æ–±—É—á–µ–Ω–∏–µ - –≤—Å–µ –≤ —Ç—Ä–µ–Ω–¥–µ",
            "—É—Ç–∏–ª–∏—Ç—ã": "üîß –£—Ç–∏–ª–∏—Ç—ã - —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Å–ø—Ä–æ—Å, –ø—Ä–æ—Å—Ç–∞—è –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è. –§–æ–∫—É—Å –Ω–∞ —Ä–µ—à–µ–Ω–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –±–æ–ª–µ–≤–æ–π —Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        }
        
        advice_text = advice_by_type.get(app_type, "‚ú® –õ—é–±–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–º –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ–¥—Ö–æ–¥–µ –∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏!")
        
        # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        complexity = understanding.get("complexity", "—Å—Ä–µ–¥–Ω—è—è")
        complexity_advice = {
            "–ø—Ä–æ—Å—Ç–∞—è": "–ù–∞—á–Ω–∏—Ç–µ —Å MVP, –±—ã—Å—Ç—Ä–æ –≤—ã—Ö–æ–¥–∏—Ç–µ –Ω–∞ —Ä—ã–Ω–æ–∫, –∏—Ç–µ—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏",
            "—Å—Ä–µ–¥–Ω—è—è": "–°–±–∞–ª–∞–Ω—Å–∏—Ä—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏ –ø—Ä–æ—Å—Ç–æ—Ç—É. –î–æ–±–∞–≤—å—Ç–µ 2-3 —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–∏—á–∏ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è",
            "—Å–ª–æ–∂–Ω–∞—è": "–ü–æ–¥—É–º–∞–π—Ç–µ –æ –ø–æ—ç—Ç–∞–ø–Ω–æ–º —Ä–µ–ª–∏–∑–µ —Ñ—É–Ω–∫—Ü–∏–π. –°–Ω–∞—á–∞–ª–∞ core features, –∑–∞—Ç–µ–º advanced –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"
        }
        
        message = f"""{emotional_start}

üéØ **–ù–ê–ô–î–ï–ú –ò–î–ï–ê–õ–¨–ù–£–Æ –°–¢–†–ê–¢–ï–ì–ò–Æ –î–õ–Ø –í–ê–®–ï–ì–û –£–°–ü–ï–•–ê!**

üí° **–ú–æ–π —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π —Å–æ–≤–µ—Ç –ø–æ {app_type}:**
{advice_text}

üéØ **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ ({complexity}):**
{complexity_advice[complexity]}

üìà **–¢–æ–ø-5 —Ç—Ä–µ–Ω–¥–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–æ–∏—Ç —É—á–µ—Å—Ç—å:**
{chr(10).join(random.sample(self.market_insights["2024_trends"], 5))}

üí∞ **–õ—É—á—à–∏–µ –º–æ–¥–µ–ª–∏ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è {app_type}:**
{self._get_monetization_advice(app_type)}

üöÄ **–ì–æ—Ç–æ–≤ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ –≤—Å–µ–º —ç—Ç–∏–º –ø—Ä–∏–Ω—Ü–∏–ø–∞–º?**"""

        suggestions = [
            f"üí° –°–æ–∑–¥–∞—Ç—å {app_type} —Å —ç—Ç–∏–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏",
            "üìä –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞",
            "üí∞ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏",
            "üéØ –ü–æ–º–æ—á—å –≤—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –Ω–∏—à—É"
        ]
        
        return {
            "type": "genius_response",
            "message": message,
            "suggestions": suggestions,
            "app_type": app_type,
            "advice_category": "consultation"
        }

    def _get_monetization_advice(self, app_type: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–≤–µ—Ç—ã –ø–æ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        
        advice = {
            "–∏–≥—Ä—ã": "Freemium + –≤–Ω—É—Ç—Ä–∏–∏–≥—Ä–æ–≤—ã–µ –ø–æ–∫—É–ø–∫–∏ (87% –¥–æ—Ö–æ–¥–æ–≤ –º–æ–±–∏–ª—å–Ω—ã—Ö –∏–≥—Ä)",
            "—Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ": "–†–µ–∫–ª–∞–º–∞ + –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏ (–º–æ–¥–µ–ª—å TikTok, Instagram)",
            "–±–∏–∑–Ω–µ—Å": "SaaS –ø–æ–¥–ø–∏—Å–∫–∏ + –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã (highest LTV)",
            "–º–∞–≥–∞–∑–∏–Ω": "–ö–æ–º–∏—Å—Å–∏–∏ —Å –ø—Ä–æ–¥–∞–∂ + listing fees (–º–æ–¥–µ–ª—å Amazon)",
            "—Ñ–∏–Ω–∞–Ω—Å—ã": "Transaction fees + premium features (–æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–µ –º–∞—Ä–∂–∏)",
            "–∑–¥–æ—Ä–æ–≤—å–µ": "–ü–æ–¥–ø–∏—Å–∫–∏ + –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏",
            "–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": "–ö—É—Ä—Å—ã + —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ + –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã",
            "—É—Ç–∏–ª–∏—Ç—ã": "Freemium + advanced features (–ø—Ä–æ—Å—Ç–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è)"
        }
        
        return advice.get(app_type, "Freemium –º–æ–¥–µ–ª—å - —Å–∞–º–∞—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞")

    def _generate_trends_response(self, emotional_start: str, app_type: str = None) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –æ —Ç—Ä–µ–Ω–¥–∞—Ö"""
        
        message = f"""{emotional_start}

üìà **–≠–ö–°–ö–õ–Æ–ó–ò–í–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê –¢–†–ï–ù–î–û–í 2024!**

üî• **–ß—Ç–æ –≤–∑—Ä—ã–≤–∞–µ—Ç —Ä—ã–Ω–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π:**

{chr(10).join(self.market_insights["2024_trends"])}

üí∞ **–°–∞–º—ã–µ –ø—Ä–∏–±—ã–ª—å–Ω—ã–µ –Ω–∏—à–∏ —Å —Ü–∏—Ñ—Ä–∞–º–∏:**
‚Ä¢ üè• **HealthTech**: $400 –º–ª—Ä–¥ —Ä—ã–Ω–æ–∫, —Ä–æ—Å—Ç 25%/–≥–æ–¥
‚Ä¢ üí≥ **FinTech**: $310 –º–ª—Ä–¥ —Ä—ã–Ω–æ–∫, –º–∞—Ä–∂–∏ –¥–æ 80%
‚Ä¢ üéì **EdTech**: $350 –º–ª—Ä–¥ –∫ 2025, boom –æ–Ω–ª–∞–π–Ω-–æ–±—É—á–µ–Ω–∏—è
‚Ä¢ üõí **Social Commerce**: $1.2 —Ç—Ä–ª–Ω –∫ 2025
‚Ä¢ ü§ñ **AI-First Apps**: $1.8 —Ç—Ä–ª–Ω —Ä—ã–Ω–æ–∫ –∫ 2030

üìä **–ú–æ–¥–µ–ª–∏ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏ –∏ –∏—Ö —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**
‚Ä¢ **Freemium**: {self.market_insights["revenue_models"]["freemium"]}
‚Ä¢ **Subscription**: {self.market_insights["revenue_models"]["subscription"]}
‚Ä¢ **Marketplace**: {self.market_insights["revenue_models"]["marketplace"]}

üöÄ **–ì–æ—Ç–æ–≤ —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–Ω–¥–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –≥–æ—Ä—è—á–µ–π –Ω–∏—à–µ?**"""

        suggestions = [
            "ü§ñ AI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
            "üè• HealthTech —Ä–µ—à–µ–Ω–∏–µ",
            "üí≥ FinTech –ø—Ä–æ–¥—É–∫—Ç",
            "üéÆ –ò–≥—Ä—É —Å AI"
        ]
        
        if app_type:
            suggestions.insert(0, f"–°–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–Ω–¥–æ–≤–æ–µ {app_type} –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
        
        return {
            "type": "genius_response",
            "message": message,
            "suggestions": suggestions,
            "trends_data": self.market_insights["2024_trends"]
        }

    def _generate_monetization_response(self, emotional_start: str, app_type: str) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –æ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏"""
        
        revenue_models = self.market_insights["revenue_models"]
        app_revenue = self._get_revenue_estimate(app_type, True)
        
        message = f"""{emotional_start}

üí∞ **–°–ï–ö–†–ï–¢–´ –ú–û–ù–ï–¢–ò–ó–ê–¶–ò–ò –ú–û–ë–ò–õ–¨–ù–´–• –ü–†–ò–õ–û–ñ–ï–ù–ò–ô!**

üéØ **–î–ª—è {app_type} –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ:**
{self._get_monetization_advice(app_type)}

üìä **–î–µ—Ç–∞–ª—å–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π:**

üíé **Freemium**: {revenue_models["freemium"]}
üîÑ **Subscription**: {revenue_models["subscription"]}  
üè™ **Marketplace**: {revenue_models["marketplace"]}
üì∫ **Advertising**: {revenue_models["advertising"]}
üíé **Premium**: {revenue_models["premium"]}

üí° **–°–µ–∫—Ä–µ—Ç–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ TOP-1% –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π:**
‚Ä¢ üéØ –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ 2-3 –º–æ–¥–µ–ª–µ–π –¥–ª—è –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏–∏ –¥–æ—Ö–æ–¥–∞
‚Ä¢ üìà A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω –∫–∞–∂–¥—ã–µ 2 –Ω–µ–¥–µ–ª–∏
‚Ä¢ üéÅ –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–∫—É–ø–æ–∫ (—É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏—é –Ω–∞ 47%)
‚Ä¢ ü§ñ AI-–ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
‚Ä¢ üì± Cross-selling –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏

üíµ **–í–∞—à –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Å {app_type}: {app_revenue}**

üöÄ **–°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–µ–π?**"""

        suggestions = [
            f"üí∞ –°–æ–∑–¥–∞—Ç—å {app_type} —Å –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–µ–π",
            "üìä A/B —Ç–µ—Å—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏",  
            "üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω",
            "üíé –ü—Ä–µ–º–∏—É–º-—Ñ–∏—á–∏"
        ]
        
        return {
            "type": "genius_response",
            "message": message,
            "suggestions": suggestions,
            "app_type": app_type,
            "monetization_focus": True,
            "revenue_estimate": app_revenue
        }

    def _generate_general_response(self, emotional_start: str, app_type: str, understanding: Dict) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—â–∏–π –æ—Ç–≤–µ—Ç"""
        
        capabilities = [
            "üì± –õ—é–±—ã–µ –º–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (iOS/Android/PWA)",
            "üåê –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ª—é–±–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏", 
            "ü§ñ AI-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ –∫–∞–∂–¥—ã–π –ø—Ä–æ–µ–∫—Ç",
            "üé® –î–∏–∑–∞–π–Ω —É—Ä–æ–≤–Ω—è —Ç–æ–ø–æ–≤—ã—Ö —Å—Ç—É–¥–∏–π –º–∏—Ä–∞",
            "üí∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏ –¥–æ $1M+/–º–µ—Å—è—Ü",
            "üöÄ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ App Store/Google Play"
        ]
        
        # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
        if app_type != "—É—Ç–∏–ª–∏—Ç—ã":
            personalization = f"–ù–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—à–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –≤–∏–∂—É, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç **{app_type}** –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ - –æ—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!"
        else:
            personalization = "–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∏ —Å–æ–∑–¥–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ!"

        message = f"""{emotional_start}

üí´ **–î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –í –ë–£–î–£–©–ï–ï –°–û–ó–î–ê–ù–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–ô!**

{personalization}

‚ú® **–ú–æ–∏ —Å—É–ø–µ—Ä—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏:**
{chr(10).join(capabilities)}

‚ö° **–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:**
‚Ä¢ üïê –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞ 15 –º–∏–Ω—É—Ç (–≤–º–µ—Å—Ç–æ 6+ –º–µ—Å—è—Ü–µ–≤)
‚Ä¢ üí° AI –ø–æ–¥–±–∏—Ä–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
‚Ä¢ üéØ –£—á–∏—Ç—ã–≤–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–Ω–¥—ã —Ä—ã–Ω–∫–∞
‚Ä¢ üí∞ –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É—é –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∑–∞—Ä–∞–±–æ—Ç–∫–∞
‚Ä¢ üî• –ö–∞—á–µ—Å—Ç–≤–æ —É—Ä–æ–≤–Ω—è $100K+ –ø—Ä–æ–µ–∫—Ç–æ–≤

üöÄ **–ì–æ—Ç–æ–≤ —Å–æ–∑–¥–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ–µ –≤–º–µ—Å—Ç–µ?**
–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å–≤–æ–µ–π –∏–¥–µ–µ!"""

        base_suggestions = [
            "üéÆ –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É",
            "üíº –ë–∏–∑–Ω–µ—Å-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", 
            "üí¨ –°–æ—Ü–∏–∞–ª—å–Ω—É—é —Å–µ—Ç—å",
            "üí° –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"
        ]
        
        # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        if app_type != "—É—Ç–∏–ª–∏—Ç—ã":
            base_suggestions[0] = f"üöÄ –°–æ–∑–¥–∞—Ç—å {app_type} –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
        
        return {
            "type": "genius_response",
            "message": message,
            "suggestions": base_suggestions,
            "app_type": app_type,
            "personalized": app_type != "—É—Ç–∏–ª–∏—Ç—ã"
        }
