
import re
import json
import random
from typing import Dict, List, Any, Tuple
from datetime import datetime

class GeniusConversationAI:
    """–ì–µ–Ω–∏–∞–ª—å–Ω—ã–π –¥–∏–∞–ª–æ–≥–æ–≤—ã–π AI, –ø–æ–Ω–∏–º–∞—é—â–∏–π –ª—é–±—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"""
    
    def __init__(self):
        # –û–≥—Ä–æ–º–Ω–∞—è –±–∞–∑–∞ —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –∏ –≤–∞—Ä–∏–∞—Ü–∏–π
        self.app_synonyms = {
            "–∏–≥—Ä—ã": ["–∏–≥—Ä–∞", "game", "–≥–µ–π–º—Å", "–∏–≥—Ä–∞—Ç—å", "gaming", "–≥–µ–π–º–ø–ª–µ–π", "–∞—Ä–∫–∞–¥–∞", "—Å–∏–º—É–ª—è—Ç–æ—Ä"],
            "—Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ": ["—Å–æ—Ü—Å–µ—Ç—å", "—á–∞—Ç", "–º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä", "–æ–±—â–µ–Ω–∏–µ", "–¥—Ä—É–∑—å—è", "–∏–Ω—Å—Ç–∞–≥—Ä–∞–º", "—Ç–∏–∫—Ç–æ–∫", "–∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞"],
            "–±–∏–∑–Ω–µ—Å": ["—Ä–∞–±–æ—Ç–∞", "–æ—Ñ–∏—Å", "–∫–æ–º–ø–∞–Ω–∏—è", "crm", "erp", "—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "–±–∏–∑–Ω–µ—Å", "–ø—Ä–æ–¥–∞–∂–∏", "–∫–ª–∏–µ–Ω—Ç—ã"],
            "–º–∞–≥–∞–∑–∏–Ω": ["—Ç–æ—Ä–≥–æ–≤–ª—è", "–ø—Ä–æ–¥–∞–≤–∞—Ç—å", "–ø–æ–∫—É–ø–∞—Ç—å", "ecommerce", "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω", "–º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å", "—Ç–æ–≤–∞—Ä—ã"],
            "—Ñ–∏–Ω–∞–Ω—Å—ã": ["–¥–µ–Ω—å–≥–∏", "–ø–ª–∞—Ç–µ–∂–∏", "–±–∞–Ω–∫", "–∫–∞—Ä—Ç—ã", "–∫–æ—à–µ–ª–µ–∫", "–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "–±—é–¥–∂–µ—Ç"],
            "–∑–¥–æ—Ä–æ–≤—å–µ": ["—Ñ–∏—Ç–Ω–µ—Å", "—Å–ø–æ—Ä—Ç", "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", "–¥–∏–µ—Ç–∞", "–º–µ–¥–∏—Ü–∏–Ω–∞", "–≤—Ä–∞—á", "–∑–¥–æ—Ä–æ–≤—å–µ", "wellness"],
            "–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": ["—É—á–µ–±–∞", "–æ–±—É—á–µ–Ω–∏–µ", "–∫—É—Ä—Å—ã", "—à–∫–æ–ª–∞", "—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç", "–∑–Ω–∞–Ω–∏—è", "–∏–∑—É—á–∞—Ç—å", "—É—á–∏—Ç—å"],
            "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": ["–º—É–∑—ã–∫–∞", "–≤–∏–¥–µ–æ", "—Ñ–∏–ª—å–º—ã", "—Å–µ—Ä–∏–∞–ª—ã", "–ø–æ–¥–∫–∞—Å—Ç—ã", "—Å—Ç—Ä–∏–º–∏–Ω–≥", "–∫–æ–Ω—Ç–µ–Ω—Ç", "–º–µ–¥–∏–∞"],
            "—É—Ç–∏–ª–∏—Ç—ã": ["–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç", "–ø–æ–º–æ—â–Ω–∏–∫", "–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", "–ø–æ–≥–æ–¥–∞", "–∑–∞–º–µ—Ç–∫–∏", "–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫", "—Å–∫–∞–Ω–µ—Ä"],
            "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è": ["—Ç—É—Ä–∏–∑–º", "–æ—Ç–ø—É—Å–∫", "–ø–æ–µ–∑–¥–∫–∏", "–æ—Ç–µ–ª–∏", "–±–∏–ª–µ—Ç—ã", "–∫–∞—Ä—Ç—ã", "–Ω–∞–≤–∏–≥–∞—Ü–∏—è", "–≥–∏–¥"]
        }
        
        # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        self.intent_patterns = {
            "—Å–æ–∑–¥–∞—Ç—å_–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ": [
                r"(—Å–æ–∑–¥–∞–π|—Å–¥–µ–ª–∞–π|—Ä–∞–∑—Ä–∞–±–æ—Ç–∞–π|–ø–æ—Å—Ç—Ä–æ–π|–∑–∞–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä—É–π).*(–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ|app|–∞–ø–ø)",
                r"(—Ö–æ—á—É|–Ω—É–∂–Ω–æ|—Ç—Ä–µ–±—É–µ—Ç—Å—è).*(–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ|app|–∞–ø–ø)",
                r"(–º–æ–±–∏–ª—å–Ω–æ–µ|mobile).*(–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ|app)",
                r"–º–æ–∂–µ—à—å.*(—Å–æ–∑–¥–∞—Ç—å|—Å–¥–µ–ª–∞—Ç—å).*(–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ|app)"
            ],
            "—É–ª—É—á—à–∏—Ç—å_–ø—Ä–æ–µ–∫—Ç": [
                r"(—É–ª—É—á—à–∏|–¥–æ—Ä–∞–±–æ—Ç–∞–π|–¥–æ–±–∞–≤—å|–∏–∑–º–µ–Ω–∏).*(–ø—Ä–æ–µ–∫—Ç|–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ|app)",
                r"(–º–æ–∂–Ω–æ|–Ω—É–∂–Ω–æ).*(–¥–æ–±–∞–≤–∏—Ç—å|–∏–∑–º–µ–Ω–∏—Ç—å|—É–ª—É—á—à–∏—Ç—å)",
                r"(–Ω–æ–≤—ã–µ|–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ).*(—Ñ—É–Ω–∫—Ü–∏–∏|–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏|—Ñ–∏—á–∏)"
            ],
            "–ø–æ–ª—É—á–∏—Ç—å_—Å–æ–≤–µ—Ç": [
                r"(–ø–æ—Å–æ–≤–µ—Ç—É–π|–ø–æ–¥—Å–∫–∞–∂–∏|–ø–æ–º–æ–≥–∏|—á—Ç–æ –ª—É—á—à–µ)",
                r"(–∫–∞–∫–æ–µ|–∫–∞–∫—É—é|–∫–∞–∫–æ–π).*(–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ|–ø—Ä–æ–µ–∫—Ç|–∏–¥–µ—é)",
                r"(–Ω–µ –∑–Ω–∞—é|—Å–æ–º–Ω–µ–≤–∞—é—Å—å|–≤—ã–±—Ä–∞—Ç—å)"
            ],
            "—É–∑–Ω–∞—Ç—å_—Ç—Ä–µ–Ω–¥—ã": [
                r"(—Ç—Ä–µ–Ω–¥—ã|–ø–æ–ø—É–ª—è—Ä–Ω–æ|–º–æ–¥–Ω–æ|–∞–∫—Ç—É–∞–ª—å–Ω–æ)",
                r"(—á—Ç–æ —Å–µ–π—á–∞—Å|—Å–µ–π—á–∞—Å –ø–æ–ø—É–ª—è—Ä–Ω–æ|–≤ —Ç—Ä–µ–Ω–¥–µ)",
                r"(—Ä—ã–Ω–æ–∫|—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞|–∞–Ω–∞–ª–∏—Ç–∏–∫–∞)"
            ]
        }
        
        # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏ –¥–ª—è –±–æ–ª–µ–µ –∂–∏–≤–æ–≥–æ –æ–±—â–µ–Ω–∏—è
        self.emotional_responses = {
            "–≤–æ—Å—Ç–æ—Ä–≥": [
                "üöÄ –í–ê–£! –≠—Ç–æ –ø–æ—Ç—Ä—è—Å–∞—é—â–∞—è –∏–¥–µ—è!",
                "üî• –ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ! –Ø –≤ –≤–æ—Å—Ç–æ—Ä–≥–µ –æ—Ç –≤–∞—à–µ–π –∑–∞–¥—É–º–∫–∏!",
                "‚ú® –ì–µ–Ω–∏–∞–ª—å–Ω–æ! –¢–∞–∫–æ–≥–æ –µ—â–µ –Ω–µ –±—ã–ª–æ!",
                "üíé –≠—Ç–æ –±—É–¥–µ—Ç –±—Ä–∏–ª–ª–∏–∞–Ω—Ç —Å—Ä–µ–¥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π!"
            ],
            "–ø–æ–¥–¥–µ—Ä–∂–∫–∞": [
                "üí™ –û—Ç–ª–∏—á–Ω–æ! –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —ç—Ç–æ —Å–¥–µ–ª–∞–µ–º!",
                "üéØ –¢–æ—á–Ω–æ! –≠—Ç–æ –æ—Ç–ª–∏—á–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ!",
                "üëç –°—É–ø–µ—Ä! –Ø –≤–∏–∂—É –æ–≥—Ä–æ–º–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª!",
                "‚ö° –î–∞! –≠—Ç–æ –∏–∑–º–µ–Ω–∏—Ç –≤—Å–µ!"
            ],
            "—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å": [
                "üèÜ 100% –ø–æ–ª—É—á–∏—Ç—Å—è! –Ø —Å–æ–∑–¥–∞–º —á—Ç–æ-—Ç–æ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ–µ!",
                "üéâ –ë–µ–∑ –ø—Ä–æ–±–ª–µ–º! –≠—Ç–æ –±—É–¥–µ—Ç —à–µ–¥–µ–≤—Ä!",
                "üåü –ö–æ–Ω–µ—á–Ω–æ! –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–≤–∑–æ–π–¥–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è!",
                "üí´ –õ–µ–≥–∫–æ! –°–æ–∑–¥–∞–¥–∏–º —á—Ç–æ-—Ç–æ —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–µ!"
            ]
        }
        
        # –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è
        self.creative_suggestions = {
            "–∏–≥—Ä—ã": [
                "üéÆ AR-–∏–≥—Ä–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏",
                "üèÜ –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å –ø—Ä–∏–∑–∞–º–∏",
                "ü§ñ AI-—Å–æ–ø–µ—Ä–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —É—á–∏—Ç—Å—è",
                "üåç –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–Ω–ª–∞–π–Ω-–±–∏—Ç–≤—ã",
                "üíé NFT-–ø—Ä–µ–¥–º–µ—Ç—ã –≤ –∏–≥—Ä–µ"
            ],
            "—Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ": [
                "üé≠ AI-–∞–≤–∞—Ç–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                "üéµ –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è –æ–±—â–µ–Ω–∏—è",
                "üì∏ AR-—Ñ–∏–ª—å—Ç—Ä—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏",
                "üè† –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –¥–ª—è –≤—Å—Ç—Ä–µ—á",
                "üíù –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–∞—Ä–∫–æ–≤ –∏ –Ω–∞–≥—Ä–∞–¥"
            ],
            "–±–∏–∑–Ω–µ—Å": [
                "ü§ñ AI-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø—Ä–æ–¥–∞–∂",
                "üìä –ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
                "üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤",
                "üì± –ú–æ–±–∏–ª—å–Ω—ã–π –æ—Ñ–∏—Å –≤ –∫–∞—Ä–º–∞–Ω–µ",
                "üåê –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å 100+ —Å–µ—Ä–≤–∏—Å–∞–º–∏"
            ]
        }

    def understand_user_intent(self, message: str) -> Dict[str, Any]:
        """–ü–æ–Ω–∏–º–∞–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–º–æ—â—å—é –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ NLP"""
        
        message_lower = message.lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ
        intent = self._classify_intent(message_lower)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app_type = self._extract_app_type(message_lower)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–∫—Ä–∞—Å–∫—É
        emotion = self._detect_emotion(message_lower)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        requirements = self._extract_requirements(message_lower)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
        urgency = self._detect_urgency(message_lower)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
        platform_prefs = self._extract_platform_preferences(message_lower)
        
        return {
            "intent": intent,
            "app_type": app_type,
            "emotion": emotion,
            "requirements": requirements,
            "urgency": urgency,
            "platform_preferences": platform_prefs,
            "confidence": self._calculate_confidence(message, intent, app_type)
        }

    def _classify_intent(self, message: str) -> str:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        for intent, patterns in self.intent_patterns.items():
            for pattern in patterns:
                if re.search(pattern, message):
                    return intent
        
        # –ï—Å–ª–∏ –ø—Ä—è–º—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –Ω–µ—Ç, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        create_keywords = ["—Å–æ–∑–¥–∞–π", "—Å–¥–µ–ª–∞–π", "—Ö–æ—á—É", "–Ω—É–∂–Ω–æ", "—Ä–∞–∑—Ä–∞–±–æ—Ç–∞–π"]
        if any(word in message for word in create_keywords):
            return "—Å–æ–∑–¥–∞—Ç—å_–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
        
        return "–æ–±—â–∏–π_–≤–æ–ø—Ä–æ—Å"

    def _extract_app_type(self, message: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–∏–ø –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_scores = {}
        
        for category, synonyms in self.app_synonyms.items():
            score = sum(1 for synonym in synonyms if synonym in message)
            if score > 0:
                category_scores[category] = score
        
        if category_scores:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
            return max(category_scores, key=category_scores.get)
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        if any(word in message for word in ["–∑–º–µ–π–∫–∞", "—Ç–µ—Ç—Ä–∏—Å", "–∞—Ä–∫–∞–Ω–æ–∏–¥"]):
            return "–∏–≥—Ä—ã"
        elif any(word in message for word in ["—á–∞—Ç", "–æ–±—â–µ–Ω–∏–µ", "–¥—Ä—É–∑—å—è"]):
            return "—Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ"
        elif any(word in message for word in ["–ø—Ä–æ–¥–∞–∂–∏", "–º–∞–≥–∞–∑–∏–Ω", "—Ç–æ–≤–∞—Ä—ã"]):
            return "–º–∞–≥–∞–∑–∏–Ω"
        
        return "—É—Ç–∏–ª–∏—Ç—ã"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

    def _detect_emotion(self, message: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–∫—Ä–∞—Å–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è"""
        
        positive_words = ["–∫—Ä—É—Ç–æ", "–æ—Ç–ª–∏—á–Ω–æ", "—Å—É–ø–µ—Ä", "–∫–ª–∞—Å—Å–Ω–æ", "–≤–æ—Å—Ç–æ—Ä–≥–µ", "–æ–±–æ–∂–∞—é", "–ª—é–±–ª—é"]
        excited_words = ["—Ö–æ—á—É", "—Å—Ä–æ—á–Ω–æ", "–±—ã—Å—Ç—Ä–æ", "—Å–∫–æ—Ä–µ–µ", "–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ", "–ø—Ä—è–º–æ —Å–µ–π—á–∞—Å"]
        uncertain_words = ["–Ω–µ –∑–Ω–∞—é", "—Å–æ–º–Ω–µ–≤–∞—é—Å—å", "–º–æ–∂–µ—Ç –±—ã—Ç—å", "–≤–æ–∑–º–æ–∂–Ω–æ", "–Ω–µ —É–≤–µ—Ä–µ–Ω"]
        
        if any(word in message for word in excited_words):
            return "–≤–æ—Å—Ç–æ—Ä–≥"
        elif any(word in message for word in positive_words):
            return "–ø–æ–¥–¥–µ—Ä–∂–∫–∞"
        elif any(word in message for word in uncertain_words):
            return "–ø–æ–¥–¥–µ—Ä–∂–∫–∞"  # –ü–æ–º–æ–≥–∞–µ–º –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        
        return "—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å"

    def _extract_requirements(self, message: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        
        requirements = []
        
        # –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã
        if any(word in message for word in ["ios", "–∞–π—Ñ–æ–Ω", "iphone"]):
            requirements.append("iOS –ø–æ–¥–¥–µ—Ä–∂–∫–∞")
        if any(word in message for word in ["android", "–∞–Ω–¥—Ä–æ–∏–¥"]):
            requirements.append("Android –ø–æ–¥–¥–µ—Ä–∂–∫–∞")
        if any(word in message for word in ["–≤–µ–±", "web", "–±—Ä–∞—É–∑–µ—Ä"]):
            requirements.append("–í–µ–±-–≤–µ—Ä—Å–∏—è")
        
        # –§—É–Ω–∫—Ü–∏–∏
        if any(word in message for word in ["–æ–Ω–ª–∞–π–Ω", "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç", "–æ–±–ª–∞–∫–æ"]):
            requirements.append("–û–Ω–ª–∞–π–Ω —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å")
        if any(word in message for word in ["–æ—Ñ–ª–∞–π–Ω", "–±–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞"]):
            requirements.append("–û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º")
        if any(word in message for word in ["–æ–ø–ª–∞—Ç–∞", "–ø–ª–∞—Ç–µ–∂–∏", "–¥–µ–Ω—å–≥–∏"]):
            requirements.append("–°–∏—Å—Ç–µ–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π")
        if any(word in message for word in ["—á–∞—Ç", "—Å–æ–æ–±—â–µ–Ω–∏—è", "–æ–±—â–µ–Ω–∏–µ"]):
            requirements.append("–°–∏—Å—Ç–µ–º–∞ —Å–æ–æ–±—â–µ–Ω–∏–π")
        if any(word in message for word in ["–∫–∞—Ä—Ç–∞", "–≥–µ–æ–ª–æ–∫–∞—Ü–∏—è", "gps"]):
            requirements.append("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è")
        
        # –î–∏–∑–∞–π–Ω
        if any(word in message for word in ["–∫—Ä–∞—Å–∏–≤—ã–π", "—Å—Ç–∏–ª—å–Ω—ã–π", "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π"]):
            requirements.append("–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω")
        if any(word in message for word in ["—Ç–µ–º–Ω–∞—è", "dark", "—á–µ—Ä–Ω–∞—è"]):
            requirements.append("–¢–µ–º–Ω–∞—è —Ç–µ–º–∞")
        if any(word in message for word in ["–º–∏–Ω–∏–º–∞–ª–∏–∑–º", "–ø—Ä–æ—Å—Ç–æ–π", "—á–∏—Å—Ç—ã–π"]):
            requirements.append("–ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –¥–∏–∑–∞–π–Ω")
        
        return requirements

    def _detect_urgency(self, message: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Å—Ä–æ—á–Ω–æ—Å—Ç–∏"""
        
        urgent_words = ["—Å—Ä–æ—á–Ω–æ", "–±—ã—Å—Ç—Ä–æ", "—Å–∫–æ—Ä–µ–µ", "–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ", "–ø—Ä—è–º–æ —Å–µ–π—á–∞—Å", "–≤—á–µ—Ä–∞ –Ω—É–∂–Ω–æ –±—ã–ª–æ"]
        normal_words = ["–∫–æ–≥–¥–∞ —É–¥–æ–±–Ω–æ", "–Ω–µ —Å–ø–µ—à—É", "–∫–∞—á–µ—Å—Ç–≤–æ –≤–∞–∂–Ω–µ–µ", "—Ç—â–∞—Ç–µ–ª—å–Ω–æ"]
        
        if any(word in message for word in urgent_words):
            return "–≤—ã—Å–æ–∫–∞—è"
        elif any(word in message for word in normal_words):
            return "–Ω–∏–∑–∫–∞—è"
        
        return "—Å—Ä–µ–¥–Ω—è—è"

    def _extract_platform_preferences(self, message: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º"""
        
        platforms = []
        
        if any(word in message for word in ["ios", "–∞–π—Ñ–æ–Ω", "iphone", "apple"]):
            platforms.append("iOS")
        if any(word in message for word in ["android", "–∞–Ω–¥—Ä–æ–∏–¥", "google play"]):
            platforms.append("Android")
        if any(word in message for word in ["–≤–µ–±", "web", "–±—Ä–∞—É–∑–µ—Ä", "—Å–∞–π—Ç"]):
            platforms.append("Web")
        if any(word in message for word in ["–≤—Å–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã", "–≤–µ–∑–¥–µ", "–∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º"]):
            platforms = ["iOS", "Android", "Web"]
        
        if not platforms:
            platforms = ["iOS", "Android"]  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        return platforms

    def _calculate_confidence(self, message: str, intent: str, app_type: str) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏"""
        
        confidence = 0.5  # –ë–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        
        # –ü–æ–≤—ã—à–∞–µ–º –∑–∞ —á–µ—Ç–∫–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        if intent != "–æ–±—â–∏–π_–≤–æ–ø—Ä–æ—Å":
            confidence += 0.2
        
        if app_type != "—É—Ç–∏–ª–∏—Ç—ã":  # –ï—Å–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø
            confidence += 0.2
        
        # –ü–æ–≤—ã—à–∞–µ–º –∑–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è (–±–æ–ª—å—à–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)
        if len(message.split()) > 5:
            confidence += 0.1
        
        return min(confidence, 1.0)

    def generate_intelligent_response(self, user_message: str) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–ª–ª–∏–≥–µ–Ω—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏—è
        understanding = self.understand_user_intent(user_message)
        
        intent = understanding["intent"]
        app_type = understanding["app_type"]
        emotion = understanding["emotion"]
        requirements = understanding["requirements"]
        urgency = understanding["urgency"]
        
        # –í—ã–±–∏—Ä–∞–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Ä–µ–∞–∫—Ü–∏—é
        emotional_start = random.choice(self.emotional_responses[emotion])
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏—è
        if intent == "—Å–æ–∑–¥–∞—Ç—å_–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ":
            response = self._generate_creation_response(
                emotional_start, app_type, requirements, urgency
            )
        elif intent == "—É–ª—É—á—à–∏—Ç—å_–ø—Ä–æ–µ–∫—Ç":
            response = self._generate_improvement_response(emotional_start, app_type)
        elif intent == "–ø–æ–ª—É—á–∏—Ç—å_—Å–æ–≤–µ—Ç":
            response = self._generate_advice_response(emotional_start, app_type)
        elif intent == "—É–∑–Ω–∞—Ç—å_—Ç—Ä–µ–Ω–¥—ã":
            response = self._generate_trends_response(emotional_start)
        else:
            response = self._generate_general_response(emotional_start, app_type)
        
        return response

    def _generate_creation_response(self, emotional_start: str, app_type: str, 
                                  requirements: List[str], urgency: str) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        
        urgency_text = {
            "–≤—ã—Å–æ–∫–∞—è": "‚ö° –ü–æ–Ω—è–ª! –î–µ–ª–∞–µ–º –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏!",
            "—Å—Ä–µ–¥–Ω—è—è": "üéØ –û—Ç–ª–∏—á–Ω–æ! –°–æ–∑–¥–∞–¥–∏–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ!",
            "–Ω–∏–∑–∫–∞—è": "üèÜ –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –°–¥–µ–ª–∞–µ–º –∏–¥–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç!"
        }
        
        features = self.creative_suggestions.get(app_type, [
            "ü§ñ AI-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è",
            "üìä –£–º–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", 
            "üîÑ Real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
            "üì± –ö—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ—Å—Ç—å"
        ])
        
        requirements_text = ""
        if requirements:
            requirements_text = f"\n\n‚úÖ **–í–∞—à–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:**\n" + "\n".join([f"‚Ä¢ {req}" for req in requirements])
        
        message = f"""{emotional_start}

{urgency_text[urgency]}

üöÄ **–°–æ–∑–¥–∞—é {app_type} –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏:**

{chr(10).join(features[:4])}

üíé **–ß—Ç–æ –ø–æ–ª—É—á–∏—Ç–µ:**
‚Ä¢ üì± –ü–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
‚Ä¢ üé® –ü–æ—Ç—Ä—è—Å–∞—é—â–∏–π –¥–∏–∑–∞–π–Ω
‚Ä¢ üí∞ –ì–æ—Ç–æ–≤—ã–µ —Å—Ö–µ–º—ã –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏ ($5,000-50,000/–º–µ—Å—è—Ü)
‚Ä¢ üöÄ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Å—Ç–æ—Ä–∞—Ö{requirements_text}

‚è∞ **–ì–æ—Ç–æ–≤–æ —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç!**

–ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ?"""

        suggestions = [
            "üöÄ –î–ê! –°–æ–∑–¥–∞–≤–∞—Ç—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ!",
            f"üé® –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∑–∞–π–Ω-–≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è {app_type}",
            "üí∞ –î–µ—Ç–∞–ª–∏ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏",
            "üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π"
        ]
        
        return {
            "type": "genius_response",
            "message": message,
            "suggestions": suggestions,
            "app_type": app_type,
            "understanding": {
                "intent": "—Å–æ–∑–¥–∞—Ç—å_–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                "confidence": 0.95,
                "requirements": requirements
            }
        }

    def _generate_improvement_response(self, emotional_start: str, app_type: str) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""
        
        improvements = [
            "ü§ñ AI-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            "üìä –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è",
            "üîÑ Real-time —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
            "üí≥ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º",
            "üåç –ú—É–ª—å—Ç–∏—è–∑—ã—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
            "üì± PWA –≤–µ—Ä—Å–∏—è –¥–ª—è –≤–µ–±–∞"
        ]
        
        message = f"""{emotional_start}

üîß **–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–∫–∞—á–∞–µ–º –≤–∞—à –ø—Ä–æ–µ–∫—Ç –¥–æ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è!**

üöÄ **–¢–æ–ø —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è {app_type} –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:**

{chr(10).join(random.sample(improvements, 4))}

üí° **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ üé® –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏–∑–∞–π–Ω–∞ –¥–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤
‚Ä¢ ‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ 300%
‚Ä¢ üîê –£—Å–∏–ª–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å –±–∏–æ–º–µ—Ç—Ä–∏–µ–π
‚Ä¢ üìà –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è —Ä–æ—Å—Ç–∞ –±–∏–∑–Ω–µ—Å–∞

–ö–∞–∫–∏–µ —É–ª—É—á—à–µ–Ω–∏—è –¥–æ–±–∞–≤–ª—è–µ–º?"""

        suggestions = [
            "ü§ñ –î–æ–±–∞–≤–∏—Ç—å AI-—Ñ—É–Ω–∫—Ü–∏–∏",
            "üé® –û–±–Ω–æ–≤–∏—Ç—å –¥–∏–∑–∞–π–Ω",
            "‚ö° –£—Å–∫–æ—Ä–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
            "üí∞ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—é"
        ]
        
        return {
            "type": "genius_response",
            "message": message,
            "suggestions": suggestions,
            "app_type": app_type
        }

    def _generate_advice_response(self, emotional_start: str, app_type: str) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç-—Å–æ–≤–µ—Ç"""
        
        advice_by_type = {
            "–∏–≥—Ä—ã": "üéÆ –ò–≥—Ä—ã - —ç—Ç–æ –≤—Å–µ–≥–¥–∞ —Ö–∏—Ç! –û—Å–æ–±–µ–Ω–Ω–æ —Å —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –º–µ—Ö–∞–Ω–∏–∫–æ–π –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏",
            "—Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ": "üí¨ –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–º–µ—é—Ç –æ–≥—Ä–æ–º–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞ –∏ –≤–∏—Ä—É—Å–Ω–æ—Å—Ç–∏",
            "–±–∏–∑–Ω–µ—Å": "üíº –ë–∏–∑–Ω–µ—Å-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥ —á–µ—Ä–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ B2B –ø—Ä–æ–¥–∞–∂–∏",
            "–º–∞–≥–∞–∑–∏–Ω": "üõí E-commerce - –±—ã—Å—Ç—Ä–æ—Ä–∞—Å—Ç—É—â–∏–π —Ä—ã–Ω–æ–∫ —Å –æ—Ç–ª–∏—á–Ω–æ–π –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–µ–π",
            "—Ñ–∏–Ω–∞–Ω—Å—ã": "üí∞ –§–∏–Ω—Ç–µ—Ö - –æ–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"
        }
        
        advice_text = advice_by_type.get(app_type, "‚ú® –õ—é–±–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–º –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ–¥—Ö–æ–¥–µ!")
        
        message = f"""{emotional_start}

üéØ **–î–∞–≤–∞–π—Ç–µ –Ω–∞–π–¥–µ–º –∏–¥–µ–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –≤–∞—Å!**

üí° **–ú–æ–π —Å–æ–≤–µ—Ç –ø–æ {app_type}:**
{advice_text}

üìä **–¢–æ–ø-3 —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ–π—á–∞—Å:**
1. ü§ñ **AI-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è** - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–±–æ–∂–∞—é—Ç —É–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
2. üîÑ **Real-time –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ** - –º–≥–Ω–æ–≤–µ–Ω–Ω–æ—Å—Ç—å = engagement  
3. üé® **–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è** - —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –æ–ø—ã—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ

üöÄ **–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏–¥–µ–∏ –¥–ª—è –≤–∞—à–µ–π –Ω–∏—à–∏?**"""

        suggestions = [
            f"üí° –ü–æ–∫–∞–∑–∞—Ç—å –∏–¥–µ–∏ –¥–ª—è {app_type}",
            "üìä –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ —Ä—ã–Ω–∫–∞",
            "üí∞ –õ—É—á—à–∏–µ –º–æ–¥–µ–ª–∏ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏",
            "üéØ –ü–æ–º–æ—á—å –≤—ã–±—Ä–∞—Ç—å –Ω–∏—à—É"
        ]
        
        return {
            "type": "genius_response",
            "message": message,
            "suggestions": suggestions,
            "app_type": app_type
        }

    def _generate_trends_response(self, emotional_start: str) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –æ —Ç—Ä–µ–Ω–¥–∞—Ö"""
        
        trends_2024 = [
            "ü§ñ **AI-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è** - –∫–∞–∂–¥–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–º–Ω—ã–º",
            "üéÆ **–ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è** - –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º —Å–∫—É—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ –∏–≥—Ä—É", 
            "üîÑ **Real-time —Ñ—É–Ω–∫—Ü–∏–∏** - –≤—Å–µ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –º–≥–Ω–æ–≤–µ–Ω–Ω–æ",
            "üåç **–°—É–ø–µ—Ä–∞–ø–ø –∫–æ–Ω—Ü–µ–ø—Ç** - –æ–¥–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –Ω—É–∂–¥",
            "üé® **–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è** - —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –æ–ø—ã—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ",
            "üîê **Privacy-first** - –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—Ä–µ–≤—ã—à–µ –≤—Å–µ–≥–æ"
        ]
        
        message = f"""{emotional_start}

üìà **–í–æ—Ç —á—Ç–æ –≤–∑—Ä—ã–≤–∞–µ—Ç —Ä—ã–Ω–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –≤ 2024!**

üî• **–ì–ª–∞–≤–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã:**

{chr(10).join(trends_2024)}

üí∞ **–°–∞–º—ã–µ –ø—Ä–∏–±—ã–ª—å–Ω—ã–µ –Ω–∏—à–∏:**
‚Ä¢ üè• **HealthTech** - $350 –º–ª—Ä–¥ —Ä—ã–Ω–æ–∫
‚Ä¢ üí≥ **FinTech** - $310 –º–ª—Ä–¥ —Ä—ã–Ω–æ–∫  
‚Ä¢ üéì **EdTech** - $400 –º–ª—Ä–¥ —Ä—ã–Ω–æ–∫
‚Ä¢ üõí **E-commerce** - $6.2 —Ç—Ä–ª–Ω —Ä—ã–Ω–æ–∫

üöÄ **–ì–æ—Ç–æ–≤ —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–Ω–¥–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ?**"""

        suggestions = [
            "ü§ñ –°–æ–∑–¥–∞—Ç—å AI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
            "üè• HealthTech —Ä–µ—à–µ–Ω–∏–µ", 
            "üí≥ FinTech –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
            "üéÆ –ì–µ–π–º–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
        ]
        
        return {
            "type": "genius_response",
            "message": message,
            "suggestions": suggestions
        }

    def _generate_general_response(self, emotional_start: str, app_type: str) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—â–∏–π –æ—Ç–≤–µ—Ç"""
        
        message = f"""{emotional_start}

üí´ **–Ø –≥–æ—Ç–æ–≤ —Å–æ–∑–¥–∞—Ç—å –¥–ª—è –≤–∞—Å –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!**

üéØ **–ß—Ç–æ —É–º–µ—é:**
‚Ä¢ üì± –õ—é–±—ã–µ –º–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (iOS/Android)
‚Ä¢ üåê –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ PWA
‚Ä¢ ü§ñ AI-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ –ª—é–±–æ–π –ø—Ä–æ–µ–∫—Ç
‚Ä¢ üé® –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω –ª—é–±–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
‚Ä¢ üí∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏

‚ö° **–°–∫–æ—Ä–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è: 15 –º–∏–Ω—É—Ç!**
üíµ **–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–æ—Ö–æ–¥–∞: –¥–æ $50,000/–º–µ—Å—è—Ü**

–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å?"""

        suggestions = [
            "üéÆ –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É",
            "üíº –ë–∏–∑–Ω–µ—Å-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
            "üí¨ –°–æ—Ü–∏–∞–ª—å–Ω—É—é —Å–µ—Ç—å",
            "üí° –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"
        ]
        
        return {
            "type": "genius_response", 
            "message": message,
            "suggestions": suggestions,
            "app_type": app_type
        }
