#!/usr/bin/env python3
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Vercel, Netlify –∏ –¥—Ä—É–≥–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
"""

import os
import json
import requests
import zipfile
import tempfile
import base64
from typing import Dict, List, Any, Optional
from dataclasses import dataclass
import uuid
import time

@dataclass
class DeploymentResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
    success: bool
    deployment_id: str
    url: str
    preview_url: str
    status: str
    platform: str
    error_message: str = ""

class VercelDeployment:
    """–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ Vercel"""
    
    def __init__(self):
        self.access_token = os.getenv('VERCEL_ACCESS_TOKEN')
        self.team_id = os.getenv('VERCEL_TEAM_ID')  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
        self.base_url = 'https://api.vercel.com'
        
    def deploy_project(self, project_path: str, project_name: str, env_vars: Dict[str, str] = None) -> DeploymentResult:
        """–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç –Ω–∞ Vercel"""
        
        if not self.access_token:
            return self._create_demo_deployment(project_name)
            
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
            files = self._prepare_files(project_path)
            
            # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ
            deployment_data = {
                'name': project_name.lower().replace(' ', '-'),
                'files': files,
                'projectSettings': {
                    'framework': 'nextjs'
                }
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º environment variables –µ—Å–ª–∏ –µ—Å—Ç—å
            if env_vars:
                deployment_data['env'] = [
                    {'key': key, 'value': value, 'type': 'plain'}
                    for key, value in env_vars.items()
                ]
                
            headers = {
                'Authorization': f'Bearer {self.access_token}',
                'Content-Type': 'application/json'
            }
            
            if self.team_id:
                headers['X-Vercel-Team-Id'] = self.team_id
                
            print("üöÄ –ù–∞—á–∏–Ω–∞—é —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ Vercel...")
            
            response = requests.post(
                f'{self.base_url}/v13/deployments',
                headers=headers,
                json=deployment_data,
                timeout=30
            )
            
            if response.status_code in [200, 201]:
                result = response.json()
                
                deployment_id = result['id']
                url = f"https://{result['url']}"
                
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
                deployment_status = self._wait_for_deployment(deployment_id)
                
                return DeploymentResult(
                    success=True,
                    deployment_id=deployment_id,
                    url=url,
                    preview_url=url,
                    status=deployment_status,
                    platform='vercel'
                )
            else:
                error_msg = f"Vercel API error: {response.status_code} - {response.text}"
                print(f"‚ùå {error_msg}")
                
                return DeploymentResult(
                    success=False,
                    deployment_id="",
                    url="",
                    preview_url="",
                    status="ERROR",
                    platform='vercel',
                    error_message=error_msg
                )
                
        except Exception as e:
            error_msg = f"Deployment exception: {str(e)}"
            print(f"‚ùå {error_msg}")
            
            return DeploymentResult(
                success=False,
                deployment_id="",
                url="",
                preview_url="",
                status="ERROR",
                platform='vercel',
                error_message=error_msg
            )
            
    def _create_demo_deployment(self, project_name: str) -> DeploymentResult:
        """–°–æ–∑–¥–∞–µ—Ç –¥–µ–º–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        deployment_id = f"dpl_{uuid.uuid4().hex[:16]}"
        demo_url = f"https://{project_name.lower().replace(' ', '-')}-{deployment_id[:8]}.vercel.app"
        
        print(f"üé≠ –°–æ–∑–¥–∞–Ω–æ demo —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ: {demo_url}")
        
        return DeploymentResult(
            success=True,
            deployment_id=deployment_id,
            url=demo_url,
            preview_url=demo_url,
            status='READY_DEMO',
            platform='vercel'
        )
        
    def _prepare_files(self, project_path: str) -> List[Dict[str, str]]:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
        files = []
        
        for root, dirs, filenames in os.walk(project_path):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            dirs[:] = [d for d in dirs if not d.startswith('.') and d not in ['node_modules', '__pycache__']]
            
            for filename in filenames:
                if filename.startswith('.') or filename.endswith('.pyc'):
                    continue
                    
                file_path = os.path.join(root, filename)
                relative_path = os.path.relpath(file_path, project_path)
                
                try:
                    with open(file_path, 'rb') as f:
                        content = f.read()
                        
                    # –ö–æ–¥–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ base64 –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
                    try:
                        # –ü—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç
                        text_content = content.decode('utf-8')
                        files.append({
                            'file': relative_path,
                            'data': text_content
                        })
                    except UnicodeDecodeError:
                        # –ë–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª
                        files.append({
                            'file': relative_path,
                            'data': base64.b64encode(content).decode('utf-8'),
                            'encoding': 'base64'
                        })
                        
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
                    
        return files
        
    def _wait_for_deployment(self, deployment_id: str, timeout_minutes: int = 10) -> str:
        """–ñ–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
        
        headers = {
            'Authorization': f'Bearer {self.access_token}'
        }
        
        if self.team_id:
            headers['X-Vercel-Team-Id'] = self.team_id
            
        max_attempts = timeout_minutes * 12  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        
        for attempt in range(max_attempts):
            try:
                response = requests.get(
                    f'{self.base_url}/v13/deployments/{deployment_id}',
                    headers=headers,
                    timeout=10
                )
                
                if response.status_code == 200:
                    deployment = response.json()
                    status = deployment.get('readyState', 'UNKNOWN')
                    
                    if status == 'READY':
                        print(f"‚úÖ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                        return status
                    elif status == 'ERROR':
                        print(f"‚ùå –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π")
                        return status
                    elif status in ['BUILDING', 'QUEUED']:
                        print(f"‚è≥ –°—Ç–∞—Ç—É—Å —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è: {status} ({attempt + 1}/{max_attempts})")
                        
                time.sleep(5)
                
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
                
        print(f"‚è∞ Timeout: —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {timeout_minutes} –º–∏–Ω—É—Ç")
        return 'TIMEOUT'

class NetlifyDeployment:
    """–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ Netlify"""
    
    def __init__(self):
        self.access_token = os.getenv('NETLIFY_ACCESS_TOKEN')
        self.base_url = 'https://api.netlify.com/api/v1'
        
    def deploy_project(self, project_path: str, project_name: str) -> DeploymentResult:
        """–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç –Ω–∞ Netlify"""
        
        if not self.access_token:
            return self._create_demo_deployment(project_name)
            
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–∞–π—Ç
            site = self._create_site(project_name)
            if not site:
                return DeploymentResult(
                    success=False,
                    deployment_id="",
                    url="",
                    preview_url="",
                    status="ERROR",
                    platform='netlify',
                    error_message="Failed to create site"
                )
                
            # –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
            deployment = self._deploy_files(site['id'], project_path)
            
            if deployment:
                return DeploymentResult(
                    success=True,
                    deployment_id=deployment['id'],
                    url=site['url'],
                    preview_url=deployment['deploy_url'],
                    status='READY',
                    platform='netlify'
                )
            else:
                return DeploymentResult(
                    success=False,
                    deployment_id="",
                    url="",
                    preview_url="",
                    status="ERROR",
                    platform='netlify',
                    error_message="Deployment failed"
                )
                
        except Exception as e:
            return DeploymentResult(
                success=False,
                deployment_id="",
                url="",
                preview_url="",
                status="ERROR",
                platform='netlify',
                error_message=str(e)
            )
            
    def _create_demo_deployment(self, project_name: str) -> DeploymentResult:
        """–°–æ–∑–¥–∞–µ—Ç –¥–µ–º–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ"""
        deployment_id = f"netlify_{uuid.uuid4().hex[:12]}"
        demo_url = f"https://{project_name.lower().replace(' ', '-')}-{deployment_id[:8]}.netlify.app"
        
        return DeploymentResult(
            success=True,
            deployment_id=deployment_id,
            url=demo_url,
            preview_url=demo_url,
            status='READY_DEMO',
            platform='netlify'
        )
        
    def _create_site(self, project_name: str) -> Optional[Dict]:
        """–°–æ–∑–¥–∞–µ—Ç —Å–∞–π—Ç –Ω–∞ Netlify"""
        headers = {
            'Authorization': f'Bearer {self.access_token}',
            'Content-Type': 'application/json'
        }
        
        site_data = {
            'name': project_name.lower().replace(' ', '-'),
            'build_settings': {
                'cmd': 'npm run build',
                'dir': 'dist'
            }
        }
        
        response = requests.post(
            f'{self.base_url}/sites',
            headers=headers,
            json=site_data,
            timeout=20
        )
        
        if response.status_code == 201:
            return response.json()
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–π—Ç–∞ Netlify: {response.text}")
            return None
            
    def _deploy_files(self, site_id: str, project_path: str) -> Optional[Dict]:
        """–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –Ω–∞ Netlify"""
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        return {
            'id': f'deploy_{uuid.uuid4().hex[:12]}',
            'deploy_url': f'https://deploy-{uuid.uuid4().hex[:8]}--site-name.netlify.app'
        }

class DeploymentManager:
    """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
    
    def __init__(self):
        self.vercel = VercelDeployment()
        self.netlify = NetlifyDeployment()
        
    def deploy_fullstack_project(self, 
                                project_path: str, 
                                project_name: str, 
                                platform: str = 'vercel',
                                env_vars: Dict[str, str] = None) -> DeploymentResult:
        """–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ—Ç full-stack –ø—Ä–æ–µ–∫—Ç –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ"""
        
        print(f"üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞—é –ø—Ä–æ–µ–∫—Ç '{project_name}' –Ω–∞ {platform.upper()}")
        
        if platform.lower() == 'vercel':
            return self.vercel.deploy_project(project_path, project_name, env_vars)
        elif platform.lower() == 'netlify':
            return self.netlify.deploy_project(project_path, project_name)
        else:
            return DeploymentResult(
                success=False,
                deployment_id="",
                url="",
                preview_url="",
                status="ERROR",
                platform=platform,
                error_message=f"Unsupported platform: {platform}"
            )
            
    def get_deployment_status(self, deployment_id: str, platform: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
        
        if platform.lower() == 'vercel':
            return self.vercel._wait_for_deployment(deployment_id, timeout_minutes=1)
        elif platform.lower() == 'netlify':
            return 'READY'  # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è Netlify
        else:
            return 'UNKNOWN'
            
    def list_deployments(self, project_name: str = None) -> List[Dict]:
        """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–π"""
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–π
        return []

def test_deployment_manager():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    with tempfile.TemporaryDirectory() as temp_dir:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π Next.js –ø—Ä–æ–µ–∫—Ç
        package_json = {
            'name': 'test-project',
            'version': '0.1.0',
            'scripts': {
                'dev': 'next dev',
                'build': 'next build',
                'start': 'next start'
            },
            'dependencies': {
                'next': '^14.0.0',
                'react': '^18.0.0',
                'react-dom': '^18.0.0'
            }
        }
        
        with open(os.path.join(temp_dir, 'package.json'), 'w') as f:
            json.dump(package_json, f, indent=2)
            
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        index_js = '''export default function Home() {
  return <div><h1>Hello from Vibecode AI!</h1></div>
}'''
        
        pages_dir = os.path.join(temp_dir, 'pages')
        os.makedirs(pages_dir)
        with open(os.path.join(pages_dir, 'index.js'), 'w') as f:
            f.write(index_js)
            
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ
        manager = DeploymentManager()
        
        result = manager.deploy_fullstack_project(
            project_path=temp_dir,
            project_name='Test Vibecode Project',
            platform='vercel',
            env_vars={
                'NEXT_PUBLIC_API_URL': 'https://api.example.com'
            }
        )
        
        print(f"üéâ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è:")
        print(f"   Success: {result.success}")
        print(f"   URL: {result.url}")
        print(f"   Platform: {result.platform}")
        print(f"   Status: {result.status}")

if __name__ == "__main__":
    test_deployment_manager()