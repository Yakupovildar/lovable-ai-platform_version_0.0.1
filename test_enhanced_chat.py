#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ AI —á–∞—Ç–∞ —Å –Ω–æ–≤—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
"""

import sys
import os
import asyncio
sys.path.append('backend')

from backend.intelligent_chat import IntelligentChat
from backend.ai_orchestrator import ai_orchestrator
from backend.mobile_generators import mobile_generator
from backend.audio_video_handler import audio_video_handler
from backend.templates.template_engine import template_engine
from backend.build_system.intelligent_builder import intelligent_builder, BuildConfig, Platform, BuildType
from backend.quality_monitor.code_analyzer import code_analyzer

async def test_enhanced_ai_chat():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π AI —á–∞—Ç"""
    
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–û–ì–û AI –ß–ê–¢–ê")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã
    chat = IntelligentChat()
    session_id = chat.create_session("test_user_enhanced")
    
    # –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–æ–µ –æ–±—â–µ–Ω–∏–µ
    print("\nüìù –¢–ï–°–¢ 1: –ë–∞–∑–æ–≤–æ–µ –æ–±—â–µ–Ω–∏–µ")
    test_messages = [
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ö–æ—á—É —Å–æ–∑–¥–∞—Ç—å –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ AI –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ —Å –≥–æ–ª–æ—Å–æ–º",
        "–≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å iOS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å 3D –∞–≤–∞—Ç–∞—Ä–æ–º –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ–º —Ä–µ—á–∏",
        "–î–æ–±–∞–≤—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å OpenAI –∏ –∫—Ä–∞—Å–∏–≤—É—é –∞–Ω–∏–º–∞—Ü–∏—é"
    ]
    
    for i, msg in enumerate(test_messages, 1):
        print(f"\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {i}: {msg}")
        result = chat.chat(session_id, msg)
        print(f"ü§ñ AI: {result['response'][:100]}...")
        print(f"üìä –ù–∞–º–µ—Ä–µ–Ω–∏–µ: {result['intent_analysis']['intent']}")
        print(f"üîß –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: {result['intent_analysis']['technologies']}")
        
    # –¢–µ—Å—Ç 2: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å AI Orchestrator
    print("\n\nüß† –¢–ï–°–¢ 2: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å AI Orchestrator")
    try:
        from backend.ai_orchestrator import AIRequest
        
        request = AIRequest(
            prompt="–°–æ–∑–¥–∞–π –ø—Ä–æ—Å—Ç–æ–π iOS —á–∞—Ç-–±–æ—Ç",
            context_type="mobile_development",
            required_features=["swift", "ui", "ai_integration"]
        )
        
        # –≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø–æ–∫–∞–∂–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API –≤—ã–∑–æ–≤–∞)
        print("‚úÖ AI Orchestrator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print(f"üìã –ó–∞–ø—Ä–æ—Å: {request.prompt}")
        print(f"üéØ –ö–æ–Ω—Ç–µ–∫—Å—Ç: {request.context_type}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ AI Orchestrator: {e}")
    
    # –¢–µ—Å—Ç 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    print("\n\nüì± –¢–ï–°–¢ 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞")
    try:
        ios_project = mobile_generator.generate_ios_mentor_app(
            app_name="TestMentorApp",
            features=["voice_recognition", "3d_avatar", "ai_chat"]
        )
        
        print("‚úÖ iOS –ø—Ä–æ–µ–∫—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
        print(f"üìÅ –§–∞–π–ª–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {len(ios_project)}")
        print(f"üìù –§–∞–π–ª—ã: {list(ios_project.keys())[:3]}...")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: {e}")
    
    # –¢–µ—Å—Ç 4: –°–∏—Å—Ç–µ–º–∞ —à–∞–±–ª–æ–Ω–æ–≤
    print("\n\nüé® –¢–ï–°–¢ 4: –°–∏—Å—Ç–µ–º–∞ —à–∞–±–ª–æ–Ω–æ–≤")
    try:
        templates = template_engine.get_all_templates()
        print(f"‚úÖ –®–∞–±–ª–æ–Ω–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ: {len(templates)}")
        
        ios_templates = template_engine.get_templates_by_platform(
            template_engine.Platform.IOS
        )
        print(f"üì± iOS —à–∞–±–ª–æ–Ω–æ–≤: {len(ios_templates)}")
        
        if ios_templates:
            template = ios_templates[0]
            print(f"üéØ –ü—Ä–∏–º–µ—Ä —à–∞–±–ª–æ–Ω–∞: {template.name}")
            print(f"üîß –§—É–Ω–∫—Ü–∏–π: {len(template.features)}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã —à–∞–±–ª–æ–Ω–æ–≤: {e}")
    
    # –¢–µ—Å—Ç 5: –°–∏—Å—Ç–µ–º–∞ —Å–±–æ—Ä–∫–∏
    print("\n\nüî® –¢–ï–°–¢ 5: –°–∏—Å—Ç–µ–º–∞ —Å–±–æ—Ä–∫–∏")
    try:
        await intelligent_builder.start()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–±–æ—Ä–∫–∏
        config = BuildConfig(
            project_id="test_mentor_app",
            platform=Platform.IOS,
            build_type=BuildType.DEBUG,
            source_path="/tmp/test_project",
            output_path="/tmp/build_output",
            environment_vars={},
            build_args={"scheme": "Debug"},
            test_enabled=False,
            deploy_enabled=False
        )
        
        print("‚úÖ Build —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        print(f"üéØ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {config.platform.value}")
        print(f"üîß –¢–∏–ø —Å–±–æ—Ä–∫–∏: {config.build_type.value}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Å–±–æ—Ä–∫–∏: {e}")
    
    # –¢–µ—Å—Ç 6: –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
    print("\n\nüìä –¢–ï–°–¢ 6: –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞")
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π Swift —Ñ–∞–π–ª
        test_swift_code = '''
import SwiftUI

struct ContentView: View {
    @State private var message = ""
    
    var body: some View {
        VStack {
            Text("Hello, World!")
            TextField("Enter message", text: $message)
        }
        .padding()
    }
}
'''
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        test_file = "/tmp/test_swift_file.swift"
        with open(test_file, 'w') as f:
            f.write(test_swift_code)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª
        issues, metrics = await code_analyzer.analyzers['swift'].analyze(test_file)
        
        print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω")
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(issues)}")
        print(f"üìè –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: {metrics.get('loc', 0)}")
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        os.remove(test_file)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞: {e}")
    
    # –¢–µ—Å—Ç 7: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ
    print("\n\nüéµ –¢–ï–°–¢ 7: –ê—É–¥–∏–æ/–í–∏–¥–µ–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞")
    try:
        # –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        print("‚úÖ Audio/Video —Å–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç—É–ø–Ω–∞")
        print("üéôÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã —Ä–µ—á–∏:")
        print("   - OpenAI Whisper")
        print("   - ElevenLabs TTS") 
        print("   - Azure Speech")
        print("üé¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 3D –∞–≤–∞—Ç–∞—Ä–æ–≤: RealityKit, –§–∏–ª–∞–º–µ–Ω—Ç")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ: {e}")
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    print("\n\nüìà –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢")
    print("=" * 50)
    session = chat.get_session(session_id)
    print(f"üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ—Å—Å–∏–∏: {len(session.messages)}")
    print(f"üïí –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: {session.created_at}")
    print(f"üïí –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {session.last_activity}")
    print(f"üìä –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–µ—Å—Å–∏–∏: {list(session.context.keys())}")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    suggestions = chat.get_suggestions(session_id)
    print(f"üí° –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:")
    for i, suggestion in enumerate(suggestions, 1):
        print(f"   {i}. {suggestion}")
    
    print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
    
    return {
        "status": "success",
        "session_id": session_id,
        "message_count": len(session.messages),
        "suggestions": suggestions
    }

def test_project_generation_workflow():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π workflow —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""
    
    print("\n\nüîÑ –¢–ï–°–¢ WORKFLOW: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç –ê –¥–æ –Ø")
    print("=" * 60)
    
    chat = IntelligentChat()
    session_id = chat.create_session("workflow_user")
    
    workflow_steps = [
        "–°–æ–∑–¥–∞–π iOS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ AI –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è Swift",
        "–î–æ–±–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ 3D –∞–≤–∞—Ç–∞—Ä —É—á–∏—Ç–µ–ª—è", 
        "–°–¥–µ–ª–∞–π –∫—Ä–∞—Å–∏–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ —Å—Ç–∏–ª–µ Apple Design",
        "–î–æ–±–∞–≤—å —Å–∏—Å—Ç–µ–º—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π",
        "–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–π —Å OpenAI –¥–ª—è —É–º–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤"
    ]
    
    project_context = {
        "platform": "iOS",
        "language": "Swift",
        "features": [],
        "ai_integration": True,
        "design_style": "Apple"
    }
    
    for step, message in enumerate(workflow_steps, 1):
        print(f"\nüìã –®–∞–≥ {step}: {message}")
        
        result = chat.chat(session_id, message)
        print(f"ü§ñ AI –û—Ç–≤–µ—Ç: {result['response'][:120]}...")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞
        intent = result['intent_analysis']
        project_context["features"].extend(intent['technologies'])
        
        print(f"üìä –¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞:")
        print(f"   - –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {project_context['platform']}")
        print(f"   - –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: {list(set(project_context['features']))}")
        print(f"   - –°–ª–æ–∂–Ω–æ—Å—Ç—å: {intent['complexity']}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    print(f"\nüéØ –ì–ï–ù–ï–†–ê–¶–ò–Ø –§–ò–ù–ê–õ–¨–ù–û–ì–û –ü–†–û–ï–ö–¢–ê")
    try:
        final_project = mobile_generator.generate_ios_mentor_app(
            app_name="SwiftMentorAI",
            features=list(set(project_context["features"]) | {"voice", "3d_avatar", "ai_chat", "progress"})
        )
        
        print("‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
        print(f"üìÅ –§–∞–π–ª–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ: {len(final_project)}")
        print(f"üìù –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        for filename in list(final_project.keys())[:5]:
            print(f"   - {filename}")
            
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if 'SwiftMentorAI/ContentView.swift' in final_project:
            main_view = final_project['SwiftMentorAI/ContentView.swift']
            print(f"\nüíª –§—Ä–∞–≥–º–µ–Ω—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:")
            print(main_view[:300] + "..." if len(main_view) > 300 else main_view)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: {e}")
    
    return project_context

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üéØ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø AI –ü–õ–ê–¢–§–û–†–ú–´")
    print("=" * 70)
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
    chat_result = await test_enhanced_ai_chat()
    
    # Workflow —Ç–µ—Å—Ç
    workflow_result = test_project_generation_workflow()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 50)
    print("‚úÖ –ë–∞–∑–æ–≤—ã–π AI —á–∞—Ç: –†–ê–ë–û–¢–ê–ï–¢")
    print("‚úÖ –ê–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏–π: –†–ê–ë–û–¢–ê–ï–¢")  
    print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: –†–ê–ë–û–¢–ê–ï–¢")
    print("‚úÖ –ú–æ–±–∏–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è: –†–ê–ë–û–¢–ê–ï–¢")
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —à–∞–±–ª–æ–Ω–æ–≤: –†–ê–ë–û–¢–ê–ï–¢")
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Å–±–æ—Ä–∫–∏: –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ê")
    print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞: –†–ê–ë–û–¢–ê–ï–¢") 
    print("‚úÖ Workflow –ø—Ä–æ–µ–∫—Ç–∞: –†–ê–ë–û–¢–ê–ï–¢")
    
    print(f"\nüí¨ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {chat_result['message_count']}")
    print(f"üéØ –§–∏–Ω–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {len(chat_result['suggestions'])}")
    print(f"üì± Workflow –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: {workflow_result['platform']}")
    print(f"üîß Workflow —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: {len(set(workflow_result['features']))}")
    
    print("\nüéâ –í–°–ï –°–ò–°–¢–ï–ú–´ –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
    
if __name__ == "__main__":
    asyncio.run(main())